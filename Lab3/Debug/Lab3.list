
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08005188  08005188  00006188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059cc  080059cc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080059cc  080059cc  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059cc  080059cc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  080059e0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080059e0  000071bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013251  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267c  00000000  00000000  0001a28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6a  00000000  00000000  0001d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c09a  00000000  00000000  0001e5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117e4  00000000  00000000  0004a664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117c55  00000000  00000000  0005be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00173a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  00173b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001780a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00178101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001781fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005170 	.word	0x08005170

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005170 	.word	0x08005170

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fc62 	bl	800130a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f863 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f9cd 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4e:	f000 f9a1 	bl	8000d94 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a52:	f000 f8af 	bl	8000bb4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000a56:	f000 f911 	bl	8000c7c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000a5a:	f000 f94f 	bl	8000cfc <MX_TIM2_Init>
//
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

  //generate_waveforms();
  sawtoothGraph();
 8000a5e:	f000 fa27 	bl	8000eb0 <sawtoothGraph>
  triangleGraph();
 8000a62:	f000 fa49 	bl	8000ef8 <triangleGraph>
  sineGraph();
 8000a66:	f000 fa7f 	bl	8000f68 <sineGraph>

  if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK ||
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4821      	ldr	r0, [pc, #132]	@ (8000af4 <main+0xb8>)
 8000a6e:	f001 fcfa 	bl	8002466 <HAL_DAC_Start>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d106      	bne.n	8000a86 <main+0x4a>
		  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2)){
 8000a78:	2110      	movs	r1, #16
 8000a7a:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <main+0xb8>)
 8000a7c:	f001 fcf3 	bl	8002466 <HAL_DAC_Start>
 8000a80:	4603      	mov	r3, r0
  if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK ||
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <main+0x4e>
	  Error_Handler();
 8000a86:	f000 fab9 	bl	8000ffc <Error_Handler>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(uint32_t i=0; i<PERIOD; i++){
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	e02d      	b.n	8000aec <main+0xb0>
		  sawtoothWave = sawtooth[i];
 8000a90:	4a19      	ldr	r2, [pc, #100]	@ (8000af8 <main+0xbc>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <main+0xc0>)
 8000a9a:	801a      	strh	r2, [r3, #0]
		  triangleWave = triangle[i];
 8000a9c:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <main+0xc4>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <main+0xc8>)
 8000aa6:	801a      	strh	r2, [r3, #0]
		  sineWave = sine[i];
 8000aa8:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <main+0xcc>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <main+0xd0>)
 8000ab2:	801a      	strh	r2, [r3, #0]
		  if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sineWave) != HAL_OK ||
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <main+0xd0>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <main+0xb8>)
 8000abe:	f001 fd24 	bl	800250a <HAL_DAC_SetValue>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d109      	bne.n	8000adc <main+0xa0>
				  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, triangleWave) != HAL_OK){
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <main+0xc8>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <main+0xb8>)
 8000ad2:	f001 fd1a 	bl	800250a <HAL_DAC_SetValue>
 8000ad6:	4603      	mov	r3, r0
		  if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sineWave) != HAL_OK ||
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <main+0xa4>
			  Error_Handler();
 8000adc:	f000 fa8e 	bl	8000ffc <Error_Handler>
		  }
		  HAL_Delay(PERIOD/15);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 fc87 	bl	80013f4 <HAL_Delay>
	  for(uint32_t i=0; i<PERIOD; i++){
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b0e      	cmp	r3, #14
 8000af0:	d9ce      	bls.n	8000a90 <main+0x54>
 8000af2:	e7ca      	b.n	8000a8a <main+0x4e>
 8000af4:	20000090 	.word	0x20000090
 8000af8:	20000158 	.word	0x20000158
 8000afc:	20000150 	.word	0x20000150
 8000b00:	20000178 	.word	0x20000178
 8000b04:	20000152 	.word	0x20000152
 8000b08:	20000198 	.word	0x20000198
 8000b0c:	20000154 	.word	0x20000154

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b096      	sub	sp, #88	@ 0x58
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2244      	movs	r2, #68	@ 0x44
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fafa 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b32:	2000      	movs	r0, #0
 8000b34:	f002 fa02 	bl	8002f3c <HAL_PWREx_ControlVoltageScaling>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b3e:	f000 fa5d 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b42:	2310      	movs	r3, #16
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b46:	2301      	movs	r3, #1
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4e:	2360      	movs	r3, #96	@ 0x60
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b56:	2301      	movs	r3, #1
 8000b58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b5e:	233c      	movs	r3, #60	@ 0x3c
 8000b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fa86 	bl	8003084 <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b7e:	f000 fa3d 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b82:	230f      	movs	r3, #15
 8000b84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b86:	2303      	movs	r3, #3
 8000b88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	2105      	movs	r1, #5
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fe8c 	bl	80038b8 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ba6:	f000 fa29 	bl	8000ffc <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3758      	adds	r7, #88	@ 0x58
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bcc:	4a29      	ldr	r2, [pc, #164]	@ (8000c74 <MX_ADC1_Init+0xc0>)
 8000bce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2a:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c2c:	f000 fda6 	bl	800177c <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c36:	f000 f9e1 	bl	8000ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_ADC1_Init+0xc4>)
 8000c3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c42:	2307      	movs	r3, #7
 8000c44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c46:	237f      	movs	r3, #127	@ 0x7f
 8000c48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <MX_ADC1_Init+0xbc>)
 8000c58:	f000 fed6 	bl	8001a08 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c62:	f000 f9cb 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000028 	.word	0x20000028
 8000c74:	50040000 	.word	0x50040000
 8000c78:	c7520000 	.word	0xc7520000

08000c7c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2228      	movs	r2, #40	@ 0x28
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fa45 	bl	8005118 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_DAC1_Init+0x78>)
 8000c90:	4a19      	ldr	r2, [pc, #100]	@ (8000cf8 <MX_DAC1_Init+0x7c>)
 8000c92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c94:	4817      	ldr	r0, [pc, #92]	@ (8000cf4 <MX_DAC1_Init+0x78>)
 8000c96:	f001 fbc4 	bl	8002422 <HAL_DAC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ca0:	f000 f9ac 	bl	8000ffc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000cac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <MX_DAC1_Init+0x78>)
 8000cc6:	f001 fc45 	bl	8002554 <HAL_DAC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000cd0:	f000 f994 	bl	8000ffc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_DAC1_Init+0x78>)
 8000cdc:	f001 fc3a 	bl	8002554 <HAL_DAC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f989 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	@ 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000090 	.word	0x20000090
 8000cf8:	40007400 	.word	0x40007400

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d24:	2278      	movs	r2, #120	@ 0x78
 8000d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d30:	2217      	movs	r2, #23
 8000d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d40:	4813      	ldr	r0, [pc, #76]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d42:	f003 fd63 	bl	800480c <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d4c:	f000 f956 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d5e:	f003 feb3 	bl	8004ac8 <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d68:	f000 f948 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_TIM2_Init+0x94>)
 8000d7a:	f004 f8e1 	bl	8004f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f93a 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000104 	.word	0x20000104

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200c      	movs	r0, #12
 8000dd0:	f001 faf1 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dd4:	200c      	movs	r0, #12
 8000dd6:	f001 fb0a 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a22      	ldr	r2, [pc, #136]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_GPIO_Init+0xbc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e4c:	4816      	ldr	r0, [pc, #88]	@ (8000ea8 <MX_GPIO_Init+0xc0>)
 8000e4e:	f002 f819 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000e52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	4810      	ldr	r0, [pc, #64]	@ (8000eac <MX_GPIO_Init+0xc4>)
 8000e6a:	f001 fe79 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <MX_GPIO_Init+0xc0>)
 8000e88:	f001 fe6a 	bl	8002b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2028      	movs	r0, #40	@ 0x28
 8000e92:	f001 fa90 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e96:	2028      	movs	r0, #40	@ 0x28
 8000e98:	f001 faa9 	bl	80023ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	48000800 	.word	0x48000800

08000eb0 <sawtoothGraph>:
//			triangle[i] = ((2*(PERIOD-1-i))*2730)/(PERIOD-1);
//		}
//	}
//}

void sawtoothGraph(void) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
	int step = 270;
 8000eb6:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000eba:	603b      	str	r3, [r7, #0]
	for(int i=0; i<PERIOD; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	e00d      	b.n	8000ede <sawtoothGraph+0x2e>
		sawtooth[i] = i*step;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	fb12 f303 	smulbb	r3, r2, r3
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <sawtoothGraph+0x44>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<PERIOD; i++) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0e      	cmp	r3, #14
 8000ee2:	ddee      	ble.n	8000ec2 <sawtoothGraph+0x12>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000158 	.word	0x20000158

08000ef8 <triangleGraph>:

void triangleGraph(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
	int step = 270*2;
 8000efe:	f44f 7307 	mov.w	r3, #540	@ 0x21c
 8000f02:	603b      	str	r3, [r7, #0]
	for(int i=0; i<PERIOD; i++) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e021      	b.n	8000f4e <triangleGraph+0x56>
		if(i <= 7) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	dc0b      	bgt.n	8000f28 <triangleGraph+0x30>
			triangle[i] = i*step;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	fb12 f303 	smulbb	r3, r2, r3
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	4a11      	ldr	r2, [pc, #68]	@ (8000f64 <triangleGraph+0x6c>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f26:	e00f      	b.n	8000f48 <triangleGraph+0x50>
		}
		else {
			triangle[i] = 3780-((i-7)*step);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b07      	subs	r3, #7
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	fb12 f303 	smulbb	r3, r2, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f5c3 636c 	rsb	r3, r3, #3776	@ 0xec0
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	b299      	uxth	r1, r3
 8000f40:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <triangleGraph+0x6c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<PERIOD; i++) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0e      	cmp	r3, #14
 8000f52:	ddda      	ble.n	8000f0a <triangleGraph+0x12>
		}
	}

}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000178 	.word	0x20000178

08000f68 <sineGraph>:

void sineGraph(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	for(int i = 0; i<PERIOD; i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e031      	b.n	8000fd8 <sineGraph+0x70>
//		sine[i] = (uint16_t)((arm_sin_f32((2*M_PI*i)/15)+1)*1890);
		sine[i] = (uint16_t)((arm_sin_f32(M_PI*i/7)+1)*1365);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fa95 	bl	80004a4 <__aeabi_i2d>
 8000f7a:	a31e      	add	r3, pc, #120	@ (adr r3, 8000ff4 <sineGraph+0x8c>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff fafa 	bl	8000578 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <sineGraph+0x80>)
 8000f92:	f7ff fc1b 	bl	80007cc <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fcfd 	bl	800099c <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	ee00 3a10 	vmov	s0, r3
 8000fa8:	f004 f870 	bl	800508c <arm_sin_f32>
 8000fac:	eef0 7a40 	vmov.f32	s15, s0
 8000fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000fec <sineGraph+0x84>
 8000fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc4:	ee17 3a90 	vmov	r3, s15
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <sineGraph+0x88>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i<PERIOD; i++){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b0e      	cmp	r3, #14
 8000fdc:	ddca      	ble.n	8000f74 <sineGraph+0xc>
	}
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	401c0000 	.word	0x401c0000
 8000fec:	44aaa000 	.word	0x44aaa000
 8000ff0:	20000198 	.word	0x20000198
 8000ff4:	54442d18 	.word	0x54442d18
 8000ff8:	400921fb 	.word	0x400921fb

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_MspInit+0x44>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_MspInit+0x44>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6613      	str	r3, [r2, #96]	@ 0x60
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <HAL_MspInit+0x44>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_MspInit+0x44>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6593      	str	r3, [r2, #88]	@ 0x58
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0a8      	sub	sp, #160	@ 0xa0
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2294      	movs	r2, #148	@ 0x94
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f004 f859 	bl	8005118 <memset>
  if(hadc->Instance==ADC1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_ADC_MspInit+0x80>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d12b      	bne.n	80010c8 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001074:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001076:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800107a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001086:	2310      	movs	r3, #16
 8001088:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001096:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fe9b 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80010ac:	f7ff ffa6 	bl	8000ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_ADC_MspInit+0x84>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_ADC_MspInit+0x84>)
 80010b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HAL_ADC_MspInit+0x84>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010c8:	bf00      	nop
 80010ca:	37a0      	adds	r7, #160	@ 0xa0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	50040000 	.word	0x50040000
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2b      	ldr	r2, [pc, #172]	@ (80011a4 <HAL_DAC_MspInit+0xcc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d14f      	bne.n	800119a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010fa:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <HAL_DAC_MspInit+0xd0>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	4a2a      	ldr	r2, [pc, #168]	@ (80011a8 <HAL_DAC_MspInit+0xd0>)
 8001100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001104:	6593      	str	r3, [r2, #88]	@ 0x58
 8001106:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <HAL_DAC_MspInit+0xd0>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <HAL_DAC_MspInit+0xd0>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a24      	ldr	r2, [pc, #144]	@ (80011a8 <HAL_DAC_MspInit+0xd0>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <HAL_DAC_MspInit+0xd0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800112a:	2330      	movs	r3, #48	@ 0x30
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001140:	f001 fd0e 	bl	8002b60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001144:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001146:	4a1a      	ldr	r2, [pc, #104]	@ (80011b0 <HAL_DAC_MspInit+0xd8>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 800114c:	2206      	movs	r2, #6
 800114e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001152:	2210      	movs	r2, #16
 8001154:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001168:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 800116c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001170:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001174:	2220      	movs	r2, #32
 8001176:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800117e:	480b      	ldr	r0, [pc, #44]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001180:	f001 fb34 	bl	80027ec <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800118a:	f7ff ff37 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <HAL_DAC_MspInit+0xd4>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40007400 	.word	0x40007400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	200000a4 	.word	0x200000a4
 80011b0:	4002001c 	.word	0x4002001c

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c4:	d113      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_TIM_Base_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_TIM_Base_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	201c      	movs	r0, #28
 80011e4:	f001 f8e7 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e8:	201c      	movs	r0, #28
 80011ea:	f001 f900 	bl	80023ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 f8af 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <DMA1_Channel2_IRQHandler+0x10>)
 8001262:	f001 fb6b 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000a4 	.word	0x200000a4

08001270 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <TIM2_IRQHandler+0x10>)
 8001276:	f003 fb20 	bl	80048ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000104 	.word	0x20000104

08001284 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001288:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800128c:	f001 fe12 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f003 ff1f 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff fba7 	bl	8000a3c <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012fc:	080059d4 	.word	0x080059d4
  ldr r2, =_sbss
 8001300:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001304:	200001bc 	.word	0x200001bc

08001308 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_IRQHandler>

0800130a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f001 f843 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f80e 	bl	800133c <HAL_InitTick>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	e001      	b.n	8001330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800132c:	f7ff fe6c 	bl	8001008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001330:	79fb      	ldrb	r3, [r7, #7]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <HAL_InitTick+0x6c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d023      	beq.n	8001398 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_InitTick+0x70>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_InitTick+0x6c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f001 f84f 	bl	800240a <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10f      	bne.n	8001392 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d809      	bhi.n	800138c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001380:	f001 f819 	bl	80023b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001384:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <HAL_InitTick+0x74>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e007      	b.n	800139c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e004      	b.n	800139c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e001      	b.n	800139c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	200001b8 	.word	0x200001b8

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200001b8 	.word	0x200001b8

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffee 	bl	80013dc <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffde 	bl	80013dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008

0800143c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3360      	adds	r3, #96	@ 0x60
 80014b6:	461a      	mov	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <LL_ADC_SetOffset+0x44>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	4313      	orrs	r3, r2
 80014d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	03fff000 	.word	0x03fff000

080014ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3360      	adds	r3, #96	@ 0x60
 80014fa:	461a      	mov	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3360      	adds	r3, #96	@ 0x60
 8001528:	461a      	mov	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	615a      	str	r2, [r3, #20]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3330      	adds	r3, #48	@ 0x30
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	211f      	movs	r1, #31
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0e9b      	lsrs	r3, r3, #26
 80015ac:	f003 011f 	and.w	r1, r3, #31
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3314      	adds	r3, #20
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0e5b      	lsrs	r3, r3, #25
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	0d1b      	lsrs	r3, r3, #20
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2107      	movs	r1, #7
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	0d1b      	lsrs	r3, r3, #20
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0318 	and.w	r3, r3, #24
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001648:	40d9      	lsrs	r1, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	400b      	ands	r3, r1
 800164e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001652:	431a      	orrs	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	0007ffff 	.word	0x0007ffff

0800166c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800167c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6093      	str	r3, [r2, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016a4:	d101      	bne.n	80016aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016f4:	d101      	bne.n	80016fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <LL_ADC_IsEnabled+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_ADC_IsEnabled+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b04      	cmp	r3, #4
 8001740:	d101      	bne.n	8001746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b08      	cmp	r3, #8
 8001766:	d101      	bne.n	800176c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e129      	b.n	80019ea <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fc53 	bl	8001050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff67 	bl	8001690 <LL_ADC_IsDeepPowerDownEnabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff4d 	bl	800166c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff82 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff66 	bl	80016b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ec:	4b81      	ldr	r3, [pc, #516]	@ (80019f4 <HAL_ADC_Init+0x278>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	4a81      	ldr	r2, [pc, #516]	@ (80019f8 <HAL_ADC_Init+0x27c>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001800:	e002      	b.n	8001808 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3b01      	subs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff64 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	f043 0210 	orr.w	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff75 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 80c2 	bne.w	80019d8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 80be 	bne.w	80019d8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001864:	f043 0202 	orr.w	r2, r3, #2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff49 	bl	8001708 <LL_ADC_IsEnabled>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800187c:	485f      	ldr	r0, [pc, #380]	@ (80019fc <HAL_ADC_Init+0x280>)
 800187e:	f7ff ff43 	bl	8001708 <LL_ADC_IsEnabled>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4619      	mov	r1, r3
 800188e:	485c      	ldr	r0, [pc, #368]	@ (8001a00 <HAL_ADC_Init+0x284>)
 8001890:	f7ff fdd4 	bl	800143c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e5b      	ldrb	r3, [r3, #25]
 8001898:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800189e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d106      	bne.n	80018d0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	3b01      	subs	r3, #1
 80018c8:	045b      	lsls	r3, r3, #17
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <HAL_ADC_Init+0x288>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff25 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 800190a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d140      	bne.n	8001994 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d13d      	bne.n	8001994 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001922:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800192a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800193a:	f023 0306 	bic.w	r3, r3, #6
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	430b      	orrs	r3, r1
 8001946:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800194e:	2b01      	cmp	r3, #1
 8001950:	d118      	bne.n	8001984 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800196e:	4311      	orrs	r1, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001974:	430a      	orrs	r2, r1
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	e007      	b.n	8001994 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10c      	bne.n	80019b6 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f023 010f 	bic.w	r1, r3, #15
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	1e5a      	subs	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b4:	e007      	b.n	80019c6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 020f 	bic.w	r2, r2, #15
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f023 0303 	bic.w	r3, r3, #3
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80019d6:	e007      	b.n	80019e8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	f043 0210 	orr.w	r2, r3, #16
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000
 80019f8:	053e2d63 	.word	0x053e2d63
 80019fc:	50040000 	.word	0x50040000
 8001a00:	50040300 	.word	0x50040300
 8001a04:	fff0c007 	.word	0xfff0c007

08001a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0b6      	sub	sp, #216	@ 0xd8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x22>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e3d5      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x7ce>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe79 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 83ba 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d824      	bhi.n	8001a9e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	3b02      	subs	r3, #2
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d81b      	bhi.n	8001a96 <HAL_ADC_ConfigChannel+0x8e>
 8001a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <HAL_ADC_ConfigChannel+0x5c>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a7d 	.word	0x08001a7d
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a8d 	.word	0x08001a8d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a74:	230c      	movs	r3, #12
 8001a76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a7a:	e010      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a82:	e00c      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a84:	2318      	movs	r3, #24
 8001a86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a8a:	e008      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a94:	e003      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a96:	2306      	movs	r3, #6
 8001a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001a9c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001aac:	f7ff fd62 	bl	8001574 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe3a 	bl	800172e <LL_ADC_REG_IsConversionOngoing>
 8001aba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fe46 	bl	8001754 <LL_ADC_INJ_IsConversionOngoing>
 8001ac8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 81bf 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 81ba 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ae8:	d10f      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff fd69 	bl	80015cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fd23 	bl	800154e <LL_ADC_SetSamplingTimeCommonConfig>
 8001b08:	e00e      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6819      	ldr	r1, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f7ff fd58 	bl	80015cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fd13 	bl	800154e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d00a      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6919      	ldr	r1, [r3, #16]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b5a:	f7ff fca3 	bl	80014a4 <LL_ADC_SetOffset>
 8001b5e:	e179      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fcc0 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x184>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fcb5 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	e01e      	b.n	8001bca <HAL_ADC_ConfigChannel+0x1c2>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fcaa 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001bba:	2320      	movs	r3, #32
 8001bbc:	e004      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x1da>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0e9b      	lsrs	r3, r3, #26
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	e018      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x20c>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001bfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001c06:	2320      	movs	r3, #32
 8001c08:	e004      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fc79 	bl	8001518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fc5d 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x24a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fc52 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	e01e      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x288>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc47 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e004      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x2a0>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	e018      	b.n	8001cda <HAL_ADC_ConfigChannel+0x2d2>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e004      	b.n	8001cda <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d106      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fc16 	bl	8001518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fbfa 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x310>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2102      	movs	r1, #2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fbef 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	e01e      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x34e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fbe4 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e004      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x366>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	e014      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x390>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001d7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e004      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	2102      	movs	r1, #2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fbb7 	bl	8001518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2103      	movs	r1, #3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fb9b 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x3ce>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fb90 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	e017      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x3fe>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fb85 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001df0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001df2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x416>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0e9b      	lsrs	r3, r3, #26
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	e011      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x43a>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001e30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001e3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d106      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fb62 	bl	8001518 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc55 	bl	8001708 <LL_ADC_IsEnabled>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f040 813f 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f7ff fbd6 	bl	8001624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a8e      	ldr	r2, [pc, #568]	@ (80020b8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	f040 8130 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x4a4>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	bf94      	ite	ls
 8001ea4:	2301      	movls	r3, #1
 8001ea6:	2300      	movhi	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e019      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x4d8>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001ec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	bf94      	ite	ls
 8001eda:	2301      	movls	r3, #1
 8001edc:	2300      	movhi	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d079      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x4f8>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	069b      	lsls	r3, r3, #26
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efe:	e015      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x524>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f10:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	e003      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x544>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	e017      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x574>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	ea42 0103 	orr.w	r1, r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x59a>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	051b      	lsls	r3, r3, #20
 8001fa0:	e018      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x5cc>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e003      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	e080      	b.n	80020da <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x5ec>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	3301      	adds	r3, #1
 8001fec:	069b      	lsls	r3, r3, #26
 8001fee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ff2:	e015      	b.n	8002020 <HAL_ADC_ConfigChannel+0x618>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e003      	b.n	8002018 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	069b      	lsls	r3, r3, #26
 800201c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x638>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	3301      	adds	r3, #1
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	e017      	b.n	8002070 <HAL_ADC_ConfigChannel+0x668>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	61bb      	str	r3, [r7, #24]
  return result;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e003      	b.n	8002064 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	ea42 0103 	orr.w	r1, r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10d      	bne.n	800209c <HAL_ADC_ConfigChannel+0x694>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	3b1e      	subs	r3, #30
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800209a:	e01d      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x6d0>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	60fb      	str	r3, [r7, #12]
  return result;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e005      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x6bc>
 80020b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	3b1e      	subs	r3, #30
 80020d2:	051b      	lsls	r3, r3, #20
 80020d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff fa74 	bl	80015cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <HAL_ADC_ConfigChannel+0x7d8>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d06c      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f0:	483c      	ldr	r0, [pc, #240]	@ (80021e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80020f2:	f7ff f9c9 	bl	8001488 <LL_ADC_GetCommonPathInternalCh>
 80020f6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3a      	ldr	r2, [pc, #232]	@ (80021e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d127      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d121      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a35      	ldr	r2, [pc, #212]	@ (80021ec <HAL_ADC_ConfigChannel+0x7e4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d157      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800211a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800211e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002122:	4619      	mov	r1, r3
 8002124:	482f      	ldr	r0, [pc, #188]	@ (80021e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002126:	f7ff f99c 	bl	8001462 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800212a:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <HAL_ADC_ConfigChannel+0x7e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	4a30      	ldr	r2, [pc, #192]	@ (80021f4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	099b      	lsrs	r3, r3, #6
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002144:	e002      	b.n	800214c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002152:	e03a      	b.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a27      	ldr	r2, [pc, #156]	@ (80021f8 <HAL_ADC_ConfigChannel+0x7f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d113      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800215e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_ADC_ConfigChannel+0x7e4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d12a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217c:	4619      	mov	r1, r3
 800217e:	4819      	ldr	r0, [pc, #100]	@ (80021e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002180:	f7ff f96f 	bl	8001462 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002184:	e021      	b.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <HAL_ADC_ConfigChannel+0x7f4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d11c      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002190:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d116      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <HAL_ADC_ConfigChannel+0x7e4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d111      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	@ (80021e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80021b2:	f7ff f956 	bl	8001462 <LL_ADC_SetCommonPathInternalCh>
 80021b6:	e008      	b.n	80021ca <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80021d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	37d8      	adds	r7, #216	@ 0xd8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	80080000 	.word	0x80080000
 80021e4:	50040300 	.word	0x50040300
 80021e8:	c7520000 	.word	0xc7520000
 80021ec:	50040000 	.word	0x50040000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	053e2d63 	.word	0x053e2d63
 80021f8:	cb840000 	.word	0xcb840000
 80021fc:	80000001 	.word	0x80000001

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	@ (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	@ (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff29 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff3e 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff31 	bl	8002264 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e014      	b.n	800245e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7fe fe47 	bl	80010d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	795b      	ldrb	r3, [r3, #5]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_DAC_Start+0x16>
 8002478:	2302      	movs	r3, #2
 800247a:	e040      	b.n	80024fe <HAL_DAC_Start+0x98>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d11d      	bne.n	80024f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	e014      	b.n	80024f0 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2102      	movs	r1, #2
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0202 	orr.w	r2, r2, #2
 80024ee:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800250a:	b480      	push	{r7}
 800250c:	b087      	sub	sp, #28
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	3308      	adds	r3, #8
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e004      	b.n	800253e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	3314      	adds	r3, #20
 800253c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	461a      	mov	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	795b      	ldrb	r3, [r3, #5]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_DAC_ConfigChannel+0x1c>
 800256c:	2302      	movs	r3, #2
 800256e:	e137      	b.n	80027e0 <HAL_DAC_ConfigChannel+0x28c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2202      	movs	r2, #2
 800257a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b04      	cmp	r3, #4
 8002582:	f040 8081 	bne.w	8002688 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002586:	f7fe ff29 	bl	80013dc <HAL_GetTick>
 800258a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d140      	bne.n	8002614 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002592:	e018      	b.n	80025c6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002594:	f7fe ff22 	bl	80013dc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d911      	bls.n	80025c6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f043 0208 	orr.w	r2, r3, #8
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2203      	movs	r2, #3
 80025c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e10c      	b.n	80027e0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1df      	bne.n	8002594 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fe ff0d 	bl	80013f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	69d2      	ldr	r2, [r2, #28]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80025e4:	e023      	b.n	800262e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025e6:	f7fe fef9 	bl	80013dc <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d90f      	bls.n	8002614 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da0a      	bge.n	8002614 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f043 0208 	orr.w	r2, r3, #8
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2203      	movs	r2, #3
 800260e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0e5      	b.n	80027e0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261a:	2b00      	cmp	r3, #0
 800261c:	dbe3      	blt.n	80025e6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800261e:	2001      	movs	r0, #1
 8002620:	f7fe fee8 	bl	80013f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	69d2      	ldr	r2, [r2, #28]
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	ea02 0103 	and.w	r1, r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6a1a      	ldr	r2, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	21ff      	movs	r1, #255	@ 0xff
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	ea02 0103 	and.w	r1, r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11d      	bne.n	80026cc <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	4313      	orrs	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002770:	d104      	bne.n	800277c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e018      	b.n	80027ae <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	e00f      	b.n	80027ae <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800278e:	f001 fa59 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8002792:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <HAL_DAC_ConfigChannel+0x294>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d904      	bls.n	80027a6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	e003      	b.n	80027ae <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80027ac:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	22c0      	movs	r2, #192	@ 0xc0
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	04c4b400 	.word	0x04c4b400

080027ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e08d      	b.n	800291a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_DMA_Init+0x138>)
 8002806:	429a      	cmp	r2, r3
 8002808:	d80f      	bhi.n	800282a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	4b45      	ldr	r3, [pc, #276]	@ (8002928 <HAL_DMA_Init+0x13c>)
 8002812:	4413      	add	r3, r2
 8002814:	4a45      	ldr	r2, [pc, #276]	@ (800292c <HAL_DMA_Init+0x140>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	009a      	lsls	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a42      	ldr	r2, [pc, #264]	@ (8002930 <HAL_DMA_Init+0x144>)
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40
 8002828:	e00e      	b.n	8002848 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	4b40      	ldr	r3, [pc, #256]	@ (8002934 <HAL_DMA_Init+0x148>)
 8002832:	4413      	add	r3, r2
 8002834:	4a3d      	ldr	r2, [pc, #244]	@ (800292c <HAL_DMA_Init+0x140>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	009a      	lsls	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a3c      	ldr	r2, [pc, #240]	@ (8002938 <HAL_DMA_Init+0x14c>)
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800285e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002862:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800286c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8fe 	bl	8002a9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028a8:	d102      	bne.n	80028b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <HAL_DMA_Init+0x104>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d80c      	bhi.n	80028f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f91e 	bl	8002b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e008      	b.n	8002902 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40020407 	.word	0x40020407
 8002928:	bffdfff8 	.word	0xbffdfff8
 800292c:	cccccccd 	.word	0xcccccccd
 8002930:	40020000 	.word	0x40020000
 8002934:	bffdfbf8 	.word	0xbffdfbf8
 8002938:	40020400 	.word	0x40020400

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	f003 031c 	and.w	r3, r3, #28
 800295c:	2204      	movs	r2, #4
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d026      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x7a>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d021      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f003 021c 	and.w	r2, r3, #28
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2104      	movs	r1, #4
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d071      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029b4:	e06c      	b.n	8002a90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	f003 031c 	and.w	r3, r3, #28
 80029be:	2202      	movs	r2, #2
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xec>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d029      	beq.n	8002a28 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 020a 	bic.w	r2, r2, #10
 80029f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f003 021c 	and.w	r2, r3, #28
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	2102      	movs	r1, #2
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d038      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a26:	e033      	b.n	8002a90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	f003 031c 	and.w	r3, r3, #28
 8002a30:	2208      	movs	r2, #8
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02a      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x156>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d025      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 020e 	bic.w	r2, r2, #14
 8002a54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	f003 021c 	and.w	r2, r3, #28
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	2101      	movs	r1, #1
 8002a64:	fa01 f202 	lsl.w	r2, r1, r2
 8002a68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
}
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d80a      	bhi.n	8002ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002abc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ac4:	e007      	b.n	8002ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	009a      	lsls	r2, r3, #2
 8002ace:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ad0:	4413      	add	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3b08      	subs	r3, #8
 8002ade:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002aec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40020407 	.word	0x40020407
 8002b0c:	4002081c 	.word	0x4002081c
 8002b10:	cccccccd 	.word	0xcccccccd
 8002b14:	40020880 	.word	0x40020880

08002b18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b3a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	1000823f 	.word	0x1000823f
 8002b5c:	40020940 	.word	0x40020940

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6e:	e166      	b.n	8002e3e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8158 	beq.w	8002e38 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d005      	beq.n	8002ba0 <HAL_GPIO_Init+0x40>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d130      	bne.n	8002c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 0201 	and.w	r2, r3, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d017      	beq.n	8002c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d123      	bne.n	8002c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	6939      	ldr	r1, [r7, #16]
 8002c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0203 	and.w	r2, r3, #3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80b2 	beq.w	8002e38 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd4:	4b61      	ldr	r3, [pc, #388]	@ (8002e5c <HAL_GPIO_Init+0x2fc>)
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <HAL_GPIO_Init+0x2fc>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e5c <HAL_GPIO_Init+0x2fc>)
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cec:	4a5c      	ldr	r2, [pc, #368]	@ (8002e60 <HAL_GPIO_Init+0x300>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d16:	d02b      	beq.n	8002d70 <HAL_GPIO_Init+0x210>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a52      	ldr	r2, [pc, #328]	@ (8002e64 <HAL_GPIO_Init+0x304>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d025      	beq.n	8002d6c <HAL_GPIO_Init+0x20c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a51      	ldr	r2, [pc, #324]	@ (8002e68 <HAL_GPIO_Init+0x308>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01f      	beq.n	8002d68 <HAL_GPIO_Init+0x208>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a50      	ldr	r2, [pc, #320]	@ (8002e6c <HAL_GPIO_Init+0x30c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d019      	beq.n	8002d64 <HAL_GPIO_Init+0x204>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4f      	ldr	r2, [pc, #316]	@ (8002e70 <HAL_GPIO_Init+0x310>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_GPIO_Init+0x200>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e74 <HAL_GPIO_Init+0x314>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00d      	beq.n	8002d5c <HAL_GPIO_Init+0x1fc>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a4d      	ldr	r2, [pc, #308]	@ (8002e78 <HAL_GPIO_Init+0x318>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <HAL_GPIO_Init+0x1f8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a4c      	ldr	r2, [pc, #304]	@ (8002e7c <HAL_GPIO_Init+0x31c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_GPIO_Init+0x1f4>
 8002d50:	2307      	movs	r3, #7
 8002d52:	e00e      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d54:	2308      	movs	r3, #8
 8002d56:	e00c      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d58:	2306      	movs	r3, #6
 8002d5a:	e00a      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d5c:	2305      	movs	r3, #5
 8002d5e:	e008      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d60:	2304      	movs	r3, #4
 8002d62:	e006      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d64:	2303      	movs	r3, #3
 8002d66:	e004      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e002      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d70:	2300      	movs	r3, #0
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	f002 0203 	and.w	r2, r2, #3
 8002d78:	0092      	lsls	r2, r2, #2
 8002d7a:	4093      	lsls	r3, r2
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d82:	4937      	ldr	r1, [pc, #220]	@ (8002e60 <HAL_GPIO_Init+0x300>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d90:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db4:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dba:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dde:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e08:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <HAL_GPIO_Init+0x320>)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f47f ae91 	bne.w	8002b70 <HAL_GPIO_Init+0x10>
  }
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40010000 	.word	0x40010000
 8002e64:	48000400 	.word	0x48000400
 8002e68:	48000800 	.word	0x48000800
 8002e6c:	48000c00 	.word	0x48000c00
 8002e70:	48001000 	.word	0x48001000
 8002e74:	48001400 	.word	0x48001400
 8002e78:	48001800 	.word	0x48001800
 8002e7c:	48001c00 	.word	0x48001c00
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f806 	bl	8002ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f0c:	d102      	bne.n	8002f14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f12:	e00b      	b.n	8002f2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f22:	d102      	bne.n	8002f2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f28:	e000      	b.n	8002f2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002f2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40007000 	.word	0x40007000

08002f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d141      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f56:	d131      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5e:	4a46      	ldr	r2, [pc, #280]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f70:	4a41      	ldr	r2, [pc, #260]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f78:	4b40      	ldr	r3, [pc, #256]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2232      	movs	r2, #50	@ 0x32
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a3f      	ldr	r2, [pc, #252]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8e:	e002      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa2:	d102      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002faa:	4b33      	ldr	r3, [pc, #204]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d158      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e057      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fcc:	e04d      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd4:	d141      	bne.n	800305a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fd6:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe2:	d131      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe4:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fea:	4a23      	ldr	r2, [pc, #140]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff4:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003002:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2232      	movs	r2, #50	@ 0x32
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	4a1c      	ldr	r2, [pc, #112]	@ (8003080 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0c9b      	lsrs	r3, r3, #18
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301a:	e002      	b.n	8003022 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3b01      	subs	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003022:	4b15      	ldr	r3, [pc, #84]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d102      	bne.n	8003036 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f2      	bne.n	800301c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003042:	d112      	bne.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e011      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003054:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003058:	e007      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800305a:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003062:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003068:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40007000 	.word	0x40007000
 800307c:	20000000 	.word	0x20000000
 8003080:	431bde83 	.word	0x431bde83

08003084 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f000 bc08 	b.w	80038a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003098:	4b96      	ldr	r3, [pc, #600]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a2:	4b94      	ldr	r3, [pc, #592]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80e4 	beq.w	8003282 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4c>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	f040 808b 	bne.w	80031de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f040 8087 	bne.w	80031de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d0:	4b88      	ldr	r3, [pc, #544]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x64>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e3df      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	4b81      	ldr	r3, [pc, #516]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_RCC_OscConfig+0x7e>
 80030f8:	4b7e      	ldr	r3, [pc, #504]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003100:	e005      	b.n	800310e <HAL_RCC_OscConfig+0x8a>
 8003102:	4b7c      	ldr	r3, [pc, #496]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800310e:	4293      	cmp	r3, r2
 8003110:	d223      	bcs.n	800315a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fda0 	bl	8003c5c <RCC_SetFlashLatencyFromMSIRange>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e3c0      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003126:	4b73      	ldr	r3, [pc, #460]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a72      	ldr	r2, [pc, #456]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	496d      	ldr	r1, [pc, #436]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003144:	4b6b      	ldr	r3, [pc, #428]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	4968      	ldr	r1, [pc, #416]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
 8003158:	e025      	b.n	80031a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800315a:	4b66      	ldr	r3, [pc, #408]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a65      	ldr	r2, [pc, #404]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b63      	ldr	r3, [pc, #396]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4960      	ldr	r1, [pc, #384]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003178:	4b5e      	ldr	r3, [pc, #376]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	495b      	ldr	r1, [pc, #364]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd60 	bl	8003c5c <RCC_SetFlashLatencyFromMSIRange>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e380      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a6:	f000 fcc1 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4950      	ldr	r1, [pc, #320]	@ (80032f8 <HAL_RCC_OscConfig+0x274>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a4e      	ldr	r2, [pc, #312]	@ (80032fc <HAL_RCC_OscConfig+0x278>)
 80031c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f8b6 	bl	800133c <HAL_InitTick>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d052      	beq.n	8003280 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	e364      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d032      	beq.n	800324c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031e6:	4b43      	ldr	r3, [pc, #268]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a42      	ldr	r2, [pc, #264]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f2:	f7fe f8f3 	bl	80013dc <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fa:	f7fe f8ef 	bl	80013dc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e34d      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320c:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003218:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a35      	ldr	r2, [pc, #212]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b33      	ldr	r3, [pc, #204]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4930      	ldr	r1, [pc, #192]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003236:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	492b      	ldr	r1, [pc, #172]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
 800324a:	e01a      	b.n	8003282 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800324c:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a28      	ldr	r2, [pc, #160]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003258:	f7fe f8c0 	bl	80013dc <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7fe f8bc 	bl	80013dc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e31a      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1dc>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d073      	beq.n	8003376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x21c>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d10e      	bne.n	80032b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b14      	ldr	r3, [pc, #80]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d063      	beq.n	8003374 <HAL_RCC_OscConfig+0x2f0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d15f      	bne.n	8003374 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e2f7      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x24c>
 80032c2:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0b      	ldr	r2, [pc, #44]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e025      	b.n	800331c <HAL_RCC_OscConfig+0x298>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d8:	d114      	bne.n	8003304 <HAL_RCC_OscConfig+0x280>
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b03      	ldr	r3, [pc, #12]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a02      	ldr	r2, [pc, #8]	@ (80032f4 <HAL_RCC_OscConfig+0x270>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e013      	b.n	800331c <HAL_RCC_OscConfig+0x298>
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08005188 	.word	0x08005188
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004
 8003304:	4ba0      	ldr	r3, [pc, #640]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a9f      	ldr	r2, [pc, #636]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800330a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b9d      	ldr	r3, [pc, #628]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a9c      	ldr	r2, [pc, #624]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800331a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f85a 	bl	80013dc <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe f856 	bl	80013dc <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	@ 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e2b4      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	4b92      	ldr	r3, [pc, #584]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x2a8>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f846 	bl	80013dc <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe f842 	bl	80013dc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e2a0      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	4b88      	ldr	r3, [pc, #544]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x2d0>
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d060      	beq.n	8003444 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d005      	beq.n	8003394 <HAL_RCC_OscConfig+0x310>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d119      	bne.n	80033c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d116      	bne.n	80033c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	4b7c      	ldr	r3, [pc, #496]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_OscConfig+0x328>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e27d      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	4973      	ldr	r1, [pc, #460]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	e040      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d023      	beq.n	8003412 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe f801 	bl	80013dc <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033de:	f7fd fffd 	bl	80013dc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e25b      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	4b65      	ldr	r3, [pc, #404]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fc:	4b62      	ldr	r3, [pc, #392]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	495f      	ldr	r1, [pc, #380]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
 8003410:	e018      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003412:	4b5d      	ldr	r3, [pc, #372]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5c      	ldr	r2, [pc, #368]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800341c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fd ffdd 	bl	80013dc <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fd ffd9 	bl	80013dc <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e237      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003438:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03c      	beq.n	80034ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01c      	beq.n	8003492 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003458:	4b4b      	ldr	r3, [pc, #300]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345e:	4a4a      	ldr	r2, [pc, #296]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fd ffb8 	bl	80013dc <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003470:	f7fd ffb4 	bl	80013dc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e212      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ef      	beq.n	8003470 <HAL_RCC_OscConfig+0x3ec>
 8003490:	e01b      	b.n	80034ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003492:	4b3d      	ldr	r3, [pc, #244]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003498:	4a3b      	ldr	r2, [pc, #236]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fd ff9b 	bl	80013dc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fd ff97 	bl	80013dc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1f5      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034bc:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ef      	bne.n	80034aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a6 	beq.w	8003624 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e8:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80034ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f4:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003500:	2301      	movs	r3, #1
 8003502:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003504:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_RCC_OscConfig+0x508>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d118      	bne.n	8003542 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003510:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <HAL_RCC_OscConfig+0x508>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <HAL_RCC_OscConfig+0x508>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351c:	f7fd ff5e 	bl	80013dc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fd ff5a 	bl	80013dc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1b8      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <HAL_RCC_OscConfig+0x508>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d108      	bne.n	800355c <HAL_RCC_OscConfig+0x4d8>
 800354a:	4b0f      	ldr	r3, [pc, #60]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003550:	4a0d      	ldr	r2, [pc, #52]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800355a:	e029      	b.n	80035b0 <HAL_RCC_OscConfig+0x52c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d115      	bne.n	8003590 <HAL_RCC_OscConfig+0x50c>
 8003564:	4b08      	ldr	r3, [pc, #32]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	4a07      	ldr	r2, [pc, #28]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357a:	4a03      	ldr	r2, [pc, #12]	@ (8003588 <HAL_RCC_OscConfig+0x504>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003584:	e014      	b.n	80035b0 <HAL_RCC_OscConfig+0x52c>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
 8003590:	4b9d      	ldr	r3, [pc, #628]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003596:	4a9c      	ldr	r2, [pc, #624]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a0:	4b99      	ldr	r3, [pc, #612]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	4a98      	ldr	r2, [pc, #608]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d016      	beq.n	80035e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fd ff10 	bl	80013dc <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fd ff0c 	bl	80013dc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e168      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ed      	beq.n	80035c0 <HAL_RCC_OscConfig+0x53c>
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fd fef9 	bl	80013dc <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fd fef5 	bl	80013dc <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e151      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003604:	4b80      	ldr	r3, [pc, #512]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ed      	bne.n	80035ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d105      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003618:	4b7b      	ldr	r3, [pc, #492]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	4a7a      	ldr	r2, [pc, #488]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03c      	beq.n	80036aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003638:	4b73      	ldr	r3, [pc, #460]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 800363a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800363e:	4a72      	ldr	r2, [pc, #456]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd fec8 	bl	80013dc <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003650:	f7fd fec4 	bl	80013dc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e122      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003662:	4b69      	ldr	r3, [pc, #420]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003664:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <HAL_RCC_OscConfig+0x5cc>
 8003670:	e01b      	b.n	80036aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003672:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003678:	4a63      	ldr	r2, [pc, #396]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fd feab 	bl	80013dc <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800368a:	f7fd fea7 	bl	80013dc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e105      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800369c:	4b5a      	ldr	r3, [pc, #360]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 800369e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ef      	bne.n	800368a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80f9 	beq.w	80038a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	f040 80cf 	bne.w	800385c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036be:	4b52      	ldr	r3, [pc, #328]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d12c      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	3b01      	subs	r3, #1
 80036de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d123      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d11b      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d113      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d109      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	3b01      	subs	r3, #1
 8003726:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d071      	beq.n	8003810 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d068      	beq.n	8003804 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003732:	4b35      	ldr	r3, [pc, #212]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800373e:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0ac      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800374e:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2d      	ldr	r2, [pc, #180]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800375a:	f7fd fe3f 	bl	80013dc <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fe3b 	bl	80013dc <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e099      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4b21      	ldr	r3, [pc, #132]	@ (800380c <HAL_RCC_OscConfig+0x788>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003790:	3a01      	subs	r2, #1
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800379a:	0212      	lsls	r2, r2, #8
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037a2:	0852      	lsrs	r2, r2, #1
 80037a4:	3a01      	subs	r2, #1
 80037a6:	0552      	lsls	r2, r2, #21
 80037a8:	4311      	orrs	r1, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037ae:	0852      	lsrs	r2, r2, #1
 80037b0:	3a01      	subs	r2, #1
 80037b2:	0652      	lsls	r2, r2, #25
 80037b4:	4311      	orrs	r1, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037ba:	06d2      	lsls	r2, r2, #27
 80037bc:	430a      	orrs	r2, r1
 80037be:	4912      	ldr	r1, [pc, #72]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037c4:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80037ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037dc:	f7fd fdfe 	bl	80013dc <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd fdfa 	bl	80013dc <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e058      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <HAL_RCC_OscConfig+0x784>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003802:	e050      	b.n	80038a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e04f      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
 8003808:	40021000 	.word	0x40021000
 800380c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003810:	4b27      	ldr	r3, [pc, #156]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d144      	bne.n	80038a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800381c:	4b24      	ldr	r3, [pc, #144]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003828:	4b21      	ldr	r3, [pc, #132]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a20      	ldr	r2, [pc, #128]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003832:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003834:	f7fd fdd2 	bl	80013dc <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fdce 	bl	80013dc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e02c      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x7b8>
 800385a:	e024      	b.n	80038a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d01f      	beq.n	80038a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003862:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a12      	ldr	r2, [pc, #72]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003868:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800386c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd fdb5 	bl	80013dc <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fdb1 	bl	80013dc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e00f      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003888:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	4905      	ldr	r1, [pc, #20]	@ (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800389a:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <HAL_RCC_OscConfig+0x830>)
 800389c:	4013      	ands	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e001      	b.n	80038a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	feeefffc 	.word	0xfeeefffc

080038b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e11d      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b90      	ldr	r3, [pc, #576]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d910      	bls.n	8003900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b8d      	ldr	r3, [pc, #564]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 020f 	bic.w	r2, r3, #15
 80038e6:	498b      	ldr	r1, [pc, #556]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b89      	ldr	r3, [pc, #548]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e105      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4b81      	ldr	r3, [pc, #516]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003918:	429a      	cmp	r2, r3
 800391a:	d908      	bls.n	800392e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	497b      	ldr	r1, [pc, #492]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d079      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d11e      	bne.n	8003980 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	4b75      	ldr	r3, [pc, #468]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0dc      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003952:	f000 f9dd 	bl	8003d10 <RCC_GetSysClockFreqFromPLLSource>
 8003956:	4603      	mov	r3, r0
 8003958:	4a70      	ldr	r2, [pc, #448]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d946      	bls.n	80039ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800395e:	4b6e      	ldr	r3, [pc, #440]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d140      	bne.n	80039ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800396a:	4b6b      	ldr	r3, [pc, #428]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003972:	4a69      	ldr	r2, [pc, #420]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003978:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e035      	b.n	80039ec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d107      	bne.n	8003998 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003988:	4b63      	ldr	r3, [pc, #396]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d115      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b9      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0ad      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b0:	4b59      	ldr	r3, [pc, #356]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0a5      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80039c0:	f000 f8b4 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4a55      	ldr	r2, [pc, #340]	@ (8003b1c <HAL_RCC_ClockConfig+0x264>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d90f      	bls.n	80039ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039cc:	4b52      	ldr	r3, [pc, #328]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 0203 	bic.w	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4947      	ldr	r1, [pc, #284]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fe:	f7fd fced 	bl	80013dc <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a06:	f7fd fce9 	bl	80013dc <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e077      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 020c 	and.w	r2, r3, #12
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d1eb      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b80      	cmp	r3, #128	@ 0x80
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a34:	4b38      	ldr	r3, [pc, #224]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a37      	ldr	r2, [pc, #220]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a3e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	4b31      	ldr	r3, [pc, #196]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d208      	bcs.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	492b      	ldr	r1, [pc, #172]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6e:	4b29      	ldr	r3, [pc, #164]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d210      	bcs.n	8003a9e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7c:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 020f 	bic.w	r2, r3, #15
 8003a84:	4923      	ldr	r1, [pc, #140]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8c:	4b21      	ldr	r3, [pc, #132]	@ (8003b14 <HAL_RCC_ClockConfig+0x25c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e036      	b.n	8003b0c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4918      	ldr	r1, [pc, #96]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac8:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4910      	ldr	r1, [pc, #64]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003adc:	f000 f826 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	490c      	ldr	r1, [pc, #48]	@ (8003b20 <HAL_RCC_ClockConfig+0x268>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_RCC_ClockConfig+0x26c>)
 8003afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fc1b 	bl	800133c <HAL_InitTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	04c4b400 	.word	0x04c4b400
 8003b20:	08005188 	.word	0x08005188
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	@ 0x24
 8003b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b44:	4b3b      	ldr	r3, [pc, #236]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x34>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d121      	bne.n	8003b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d11e      	bne.n	8003b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b60:	4b34      	ldr	r3, [pc, #208]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b6c:	4b31      	ldr	r3, [pc, #196]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	e005      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b88:	4a2b      	ldr	r2, [pc, #172]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e004      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bb0:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d134      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bba:	4b1e      	ldr	r3, [pc, #120]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8003bd0:	e005      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8003bd4:	617b      	str	r3, [r7, #20]
      break;
 8003bd6:	e005      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bd8:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bda:	617b      	str	r3, [r7, #20]
      break;
 8003bdc:	e002      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	617b      	str	r3, [r7, #20]
      break;
 8003be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be4:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3301      	adds	r3, #1
 8003bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bf2:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	fb03 f202 	mul.w	r2, r3, r2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	0e5b      	lsrs	r3, r3, #25
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	3301      	adds	r3, #1
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c24:	69bb      	ldr	r3, [r7, #24]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	08005198 	.word	0x08005198
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	007a1200 	.word	0x007a1200

08003c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000000 	.word	0x20000000

08003c5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c68:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c74:	f7ff f942 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 8003c78:	6178      	str	r0, [r7, #20]
 8003c7a:	e014      	b.n	8003ca6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	4a21      	ldr	r2, [pc, #132]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c88:	4b1f      	ldr	r3, [pc, #124]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c94:	f7ff f932 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 8003c98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cac:	d10b      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d913      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cb8:	d902      	bls.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cba:	2302      	movs	r3, #2
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e00d      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e00a      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cca:	d902      	bls.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e004      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b70      	cmp	r3, #112	@ 0x70
 8003cd6:	d101      	bne.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 020f 	bic.w	r2, r3, #15
 8003ce4:	4909      	ldr	r1, [pc, #36]	@ (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d16:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d00b      	beq.n	8003d3e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d825      	bhi.n	8003d78 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d008      	beq.n	8003d44 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d11f      	bne.n	8003d78 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d38:	4b25      	ldr	r3, [pc, #148]	@ (8003dd0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d3a:	613b      	str	r3, [r7, #16]
    break;
 8003d3c:	e01f      	b.n	8003d7e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d40:	613b      	str	r3, [r7, #16]
    break;
 8003d42:	e01c      	b.n	8003d7e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d44:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d50:	4b1e      	ldr	r3, [pc, #120]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e005      	b.n	8003d6c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d74:	613b      	str	r3, [r7, #16]
    break;
 8003d76:	e002      	b.n	8003d7e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
    break;
 8003d7c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	3301      	adds	r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	fb03 f202 	mul.w	r2, r3, r2
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	0e5b      	lsrs	r3, r3, #25
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003dbe:	683b      	ldr	r3, [r7, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200
 8003dd8:	08005198 	.word	0x08005198

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d040      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfc:	2b80      	cmp	r3, #128	@ 0x80
 8003dfe:	d02a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e00:	2b80      	cmp	r3, #128	@ 0x80
 8003e02:	d825      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e04:	2b60      	cmp	r3, #96	@ 0x60
 8003e06:	d026      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e08:	2b60      	cmp	r3, #96	@ 0x60
 8003e0a:	d821      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e0c:	2b40      	cmp	r3, #64	@ 0x40
 8003e0e:	d006      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003e10:	2b40      	cmp	r3, #64	@ 0x40
 8003e12:	d81d      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e1c:	e018      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1e:	4b89      	ldr	r3, [pc, #548]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a88      	ldr	r2, [pc, #544]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e2a:	e015      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fb02 	bl	800443c <RCCEx_PLLSAI1_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbed 	bl	8004624 <RCCEx_PLLSAI2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	74fb      	strb	r3, [r7, #19]
      break;
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5e:	4b79      	ldr	r3, [pc, #484]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e64:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e6c:	4975      	ldr	r1, [pc, #468]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d047      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e8e:	d030      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e94:	d82a      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e9a:	d02a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea0:	d824      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea6:	d008      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eac:	d81e      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb6:	d010      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003eb8:	e018      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eba:	4b62      	ldr	r3, [pc, #392]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4a61      	ldr	r2, [pc, #388]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ec6:	e015      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fab4 	bl	800443c <RCCEx_PLLSAI1_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ed8:	e00c      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3320      	adds	r3, #32
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fb9f 	bl	8004624 <RCCEx_PLLSAI2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eea:	e003      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	74fb      	strb	r3, [r7, #19]
      break;
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003efa:	4b52      	ldr	r3, [pc, #328]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	494e      	ldr	r1, [pc, #312]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f10:	e001      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 809f 	beq.w	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f24:	2300      	movs	r3, #0
 8003f26:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f28:	4b46      	ldr	r3, [pc, #280]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3e:	4b41      	ldr	r3, [pc, #260]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	4a40      	ldr	r2, [pc, #256]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f66:	f7fd fa39 	bl	80013dc <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f6c:	e009      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fd fa35 	bl	80013dc <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d902      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f80:	e005      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f82:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ef      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d15b      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f94:	4b2b      	ldr	r3, [pc, #172]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f9e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d019      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fb2:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fbe:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fce:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fde:	4a19      	ldr	r2, [pc, #100]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d016      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd f9f4 	bl	80013dc <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff6:	e00b      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f9f0 	bl	80013dc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d902      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	74fb      	strb	r3, [r7, #19]
            break;
 800400e:	e006      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ec      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10c      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004024:	4b07      	ldr	r3, [pc, #28]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	4903      	ldr	r1, [pc, #12]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800403c:	e008      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	74bb      	strb	r3, [r7, #18]
 8004042:	e005      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004044:	40021000 	.word	0x40021000
 8004048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004050:	7c7b      	ldrb	r3, [r7, #17]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d105      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004056:	4ba0      	ldr	r3, [pc, #640]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	4a9f      	ldr	r2, [pc, #636]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800406e:	4b9a      	ldr	r3, [pc, #616]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004074:	f023 0203 	bic.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	4996      	ldr	r1, [pc, #600]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004090:	4b91      	ldr	r3, [pc, #580]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	f023 020c 	bic.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	498e      	ldr	r1, [pc, #568]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040b2:	4b89      	ldr	r3, [pc, #548]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	4985      	ldr	r1, [pc, #532]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040d4:	4b80      	ldr	r3, [pc, #512]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e2:	497d      	ldr	r1, [pc, #500]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f6:	4b78      	ldr	r3, [pc, #480]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004104:	4974      	ldr	r1, [pc, #464]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004118:	4b6f      	ldr	r3, [pc, #444]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004126:	496c      	ldr	r1, [pc, #432]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800413a:	4b67      	ldr	r3, [pc, #412]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004140:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004148:	4963      	ldr	r1, [pc, #396]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800415c:	4b5e      	ldr	r3, [pc, #376]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800416a:	495b      	ldr	r1, [pc, #364]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800417e:	4b56      	ldr	r3, [pc, #344]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	4952      	ldr	r1, [pc, #328]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041a0:	4b4d      	ldr	r3, [pc, #308]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ae:	494a      	ldr	r1, [pc, #296]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041c2:	4b45      	ldr	r3, [pc, #276]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	4941      	ldr	r1, [pc, #260]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e4:	4b3c      	ldr	r3, [pc, #240]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f2:	4939      	ldr	r1, [pc, #228]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d028      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004206:	4b34      	ldr	r3, [pc, #208]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004214:	4930      	ldr	r1, [pc, #192]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004224:	d106      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004226:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a2b      	ldr	r2, [pc, #172]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004230:	60d3      	str	r3, [r2, #12]
 8004232:	e011      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800423c:	d10c      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	2101      	movs	r1, #1
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f8f9 	bl	800443c <RCCEx_PLLSAI1_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800424e:	7cfb      	ldrb	r3, [r7, #19]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d04d      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800426c:	d108      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800426e:	4b1a      	ldr	r3, [pc, #104]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800427a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800427e:	e012      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004280:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004286:	4a14      	ldr	r2, [pc, #80]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800428c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004290:	4b11      	ldr	r3, [pc, #68]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800429e:	490e      	ldr	r1, [pc, #56]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ae:	d106      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a08      	ldr	r2, [pc, #32]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
 80042bc:	e020      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c6:	d109      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042c8:	4b03      	ldr	r3, [pc, #12]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a02      	ldr	r2, [pc, #8]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d2:	60d3      	str	r3, [r2, #12]
 80042d4:	e014      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f8a5 	bl	800443c <RCCEx_PLLSAI1_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d028      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800430c:	4b4a      	ldr	r3, [pc, #296]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004312:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800431a:	4947      	ldr	r1, [pc, #284]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800432a:	d106      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432c:	4b42      	ldr	r3, [pc, #264]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a41      	ldr	r2, [pc, #260]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004336:	60d3      	str	r3, [r2, #12]
 8004338:	e011      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800433e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004342:	d10c      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f876 	bl	800443c <RCCEx_PLLSAI1_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01e      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800436a:	4b33      	ldr	r3, [pc, #204]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004370:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800437a:	492f      	ldr	r1, [pc, #188]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f851 	bl	800443c <RCCEx_PLLSAI1_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043b4:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ba:	f023 0204 	bic.w	r2, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c4:	491c      	ldr	r1, [pc, #112]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043d8:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043de:	f023 0218 	bic.w	r2, r3, #24
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	4913      	ldr	r1, [pc, #76]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d017      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800440c:	490a      	ldr	r1, [pc, #40]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441e:	d105      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800442c:	7cbb      	ldrb	r3, [r7, #18]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000

0800443c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800444a:	4b72      	ldr	r3, [pc, #456]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00e      	beq.n	8004474 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004456:	4b6f      	ldr	r3, [pc, #444]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0203 	and.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d103      	bne.n	800446e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
       ||
 800446a:	2b00      	cmp	r3, #0
 800446c:	d142      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e03f      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d018      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x72>
 800447c:	2b03      	cmp	r3, #3
 800447e:	d825      	bhi.n	80044cc <RCCEx_PLLSAI1_Config+0x90>
 8004480:	2b01      	cmp	r3, #1
 8004482:	d002      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x4e>
 8004484:	2b02      	cmp	r3, #2
 8004486:	d009      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x60>
 8004488:	e020      	b.n	80044cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448a:	4b62      	ldr	r3, [pc, #392]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11d      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449a:	e01a      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800449c:	4b5d      	ldr	r3, [pc, #372]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ac:	e013      	b.n	80044d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ae:	4b59      	ldr	r3, [pc, #356]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ba:	4b56      	ldr	r3, [pc, #344]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ca:	e006      	b.n	80044da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	e004      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044d2:	bf00      	nop
 80044d4:	e002      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044da:	bf00      	nop
    }

    if(status == HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4949      	ldr	r1, [pc, #292]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 8086 	bne.w	8004608 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044fc:	4b45      	ldr	r3, [pc, #276]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a44      	ldr	r2, [pc, #272]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc ff68 	bl	80013dc <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800450e:	e009      	b.n	8004524 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004510:	f7fc ff64 	bl	80013dc <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d902      	bls.n	8004524 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	73fb      	strb	r3, [r7, #15]
        break;
 8004522:	e005      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004524:	4b3b      	ldr	r3, [pc, #236]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ef      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d168      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d113      	bne.n	8004564 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453c:	4b35      	ldr	r3, [pc, #212]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	4b35      	ldr	r3, [pc, #212]	@ (8004618 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004542:	4013      	ands	r3, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6892      	ldr	r2, [r2, #8]
 8004548:	0211      	lsls	r1, r2, #8
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68d2      	ldr	r2, [r2, #12]
 800454e:	06d2      	lsls	r2, r2, #27
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6852      	ldr	r2, [r2, #4]
 8004556:	3a01      	subs	r2, #1
 8004558:	0112      	lsls	r2, r2, #4
 800455a:	430a      	orrs	r2, r1
 800455c:	492d      	ldr	r1, [pc, #180]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]
 8004562:	e02d      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d115      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800456a:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	4b2b      	ldr	r3, [pc, #172]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6892      	ldr	r2, [r2, #8]
 8004576:	0211      	lsls	r1, r2, #8
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6912      	ldr	r2, [r2, #16]
 800457c:	0852      	lsrs	r2, r2, #1
 800457e:	3a01      	subs	r2, #1
 8004580:	0552      	lsls	r2, r2, #21
 8004582:	4311      	orrs	r1, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6852      	ldr	r2, [r2, #4]
 8004588:	3a01      	subs	r2, #1
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	430a      	orrs	r2, r1
 800458e:	4921      	ldr	r1, [pc, #132]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	610b      	str	r3, [r1, #16]
 8004594:	e014      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004596:	4b1f      	ldr	r3, [pc, #124]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6892      	ldr	r2, [r2, #8]
 80045a2:	0211      	lsls	r1, r2, #8
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6952      	ldr	r2, [r2, #20]
 80045a8:	0852      	lsrs	r2, r2, #1
 80045aa:	3a01      	subs	r2, #1
 80045ac:	0652      	lsls	r2, r2, #25
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6852      	ldr	r2, [r2, #4]
 80045b4:	3a01      	subs	r2, #1
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	430a      	orrs	r2, r1
 80045ba:	4916      	ldr	r1, [pc, #88]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fc ff06 	bl	80013dc <HAL_GetTick>
 80045d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d2:	e009      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d4:	f7fc ff02 	bl	80013dc <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d902      	bls.n	80045e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	73fb      	strb	r3, [r7, #15]
          break;
 80045e6:	e005      	b.n	80045f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ef      	beq.n	80045d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045fa:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	4904      	ldr	r1, [pc, #16]	@ (8004614 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004604:	4313      	orrs	r3, r2
 8004606:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	07ff800f 	.word	0x07ff800f
 800461c:	ff9f800f 	.word	0xff9f800f
 8004620:	f9ff800f 	.word	0xf9ff800f

08004624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004632:	4b72      	ldr	r3, [pc, #456]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800463e:	4b6f      	ldr	r3, [pc, #444]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0203 	and.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d103      	bne.n	8004656 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
       ||
 8004652:	2b00      	cmp	r3, #0
 8004654:	d142      	bne.n	80046dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	e03f      	b.n	80046dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d018      	beq.n	8004696 <RCCEx_PLLSAI2_Config+0x72>
 8004664:	2b03      	cmp	r3, #3
 8004666:	d825      	bhi.n	80046b4 <RCCEx_PLLSAI2_Config+0x90>
 8004668:	2b01      	cmp	r3, #1
 800466a:	d002      	beq.n	8004672 <RCCEx_PLLSAI2_Config+0x4e>
 800466c:	2b02      	cmp	r3, #2
 800466e:	d009      	beq.n	8004684 <RCCEx_PLLSAI2_Config+0x60>
 8004670:	e020      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004672:	4b62      	ldr	r3, [pc, #392]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11d      	bne.n	80046ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004682:	e01a      	b.n	80046ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004684:	4b5d      	ldr	r3, [pc, #372]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d116      	bne.n	80046be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004694:	e013      	b.n	80046be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004696:	4b59      	ldr	r3, [pc, #356]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a2:	4b56      	ldr	r3, [pc, #344]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b2:	e006      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e004      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046ca:	4b4c      	ldr	r3, [pc, #304]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4949      	ldr	r1, [pc, #292]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 8086 	bne.w	80047f0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046e4:	4b45      	ldr	r3, [pc, #276]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a44      	ldr	r2, [pc, #272]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f0:	f7fc fe74 	bl	80013dc <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f6:	e009      	b.n	800470c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046f8:	f7fc fe70 	bl	80013dc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	73fb      	strb	r3, [r7, #15]
        break;
 800470a:	e005      	b.n	8004718 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800470c:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ef      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d168      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d113      	bne.n	800474c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004724:	4b35      	ldr	r3, [pc, #212]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <RCCEx_PLLSAI2_Config+0x1dc>)
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	06d2      	lsls	r2, r2, #27
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6852      	ldr	r2, [r2, #4]
 800473e:	3a01      	subs	r2, #1
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	430a      	orrs	r2, r1
 8004744:	492d      	ldr	r1, [pc, #180]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004746:	4313      	orrs	r3, r2
 8004748:	614b      	str	r3, [r1, #20]
 800474a:	e02d      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d115      	bne.n	800477e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004752:	4b2a      	ldr	r3, [pc, #168]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6892      	ldr	r2, [r2, #8]
 800475e:	0211      	lsls	r1, r2, #8
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6912      	ldr	r2, [r2, #16]
 8004764:	0852      	lsrs	r2, r2, #1
 8004766:	3a01      	subs	r2, #1
 8004768:	0552      	lsls	r2, r2, #21
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6852      	ldr	r2, [r2, #4]
 8004770:	3a01      	subs	r2, #1
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	430a      	orrs	r2, r1
 8004776:	4921      	ldr	r1, [pc, #132]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	614b      	str	r3, [r1, #20]
 800477c:	e014      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800477e:	4b1f      	ldr	r3, [pc, #124]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6892      	ldr	r2, [r2, #8]
 800478a:	0211      	lsls	r1, r2, #8
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6952      	ldr	r2, [r2, #20]
 8004790:	0852      	lsrs	r2, r2, #1
 8004792:	3a01      	subs	r2, #1
 8004794:	0652      	lsls	r2, r2, #25
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6852      	ldr	r2, [r2, #4]
 800479c:	3a01      	subs	r2, #1
 800479e:	0112      	lsls	r2, r2, #4
 80047a0:	430a      	orrs	r2, r1
 80047a2:	4916      	ldr	r1, [pc, #88]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047a8:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fc fe12 	bl	80013dc <HAL_GetTick>
 80047b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ba:	e009      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047bc:	f7fc fe0e 	bl	80013dc <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d902      	bls.n	80047d0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	73fb      	strb	r3, [r7, #15]
          break;
 80047ce:	e005      	b.n	80047dc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ef      	beq.n	80047bc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	4904      	ldr	r1, [pc, #16]	@ (80047fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40021000 	.word	0x40021000
 8004800:	07ff800f 	.word	0x07ff800f
 8004804:	ff9f800f 	.word	0xff9f800f
 8004808:	f9ff800f 	.word	0xf9ff800f

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e049      	b.n	80048b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fcbe 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fa38 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01b      	beq.n	800491e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0202 	mvn.w	r2, #2
 80048ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9bc 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 800490a:	e005      	b.n	8004918 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9ae 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9bf 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01b      	beq.n	800496a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0204 	mvn.w	r2, #4
 800493a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f996 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 8004956:	e005      	b.n	8004964 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f988 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f999 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01b      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0208 	mvn.w	r2, #8
 8004986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2204      	movs	r2, #4
 800498c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f970 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 80049a2:	e005      	b.n	80049b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f962 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f973 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0210 	mvn.w	r2, #16
 80049d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2208      	movs	r2, #8
 80049d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f94a 	bl	8004c82 <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f93c 	bl	8004c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f94d 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0201 	mvn.w	r2, #1
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f91a 	bl	8004c5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb08 	bl	8005064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fb00 	bl	8005078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f907 	bl	8004caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0220 	mvn.w	r2, #32
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fac8 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0b6      	b.n	8004c52 <HAL_TIM_ConfigClockSource+0x18a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b20:	d03e      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0xd8>
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b26:	f200 8087 	bhi.w	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2e:	f000 8086 	beq.w	8004c3e <HAL_TIM_ConfigClockSource+0x176>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b36:	d87f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b38:	2b70      	cmp	r3, #112	@ 0x70
 8004b3a:	d01a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xaa>
 8004b3c:	2b70      	cmp	r3, #112	@ 0x70
 8004b3e:	d87b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b40:	2b60      	cmp	r3, #96	@ 0x60
 8004b42:	d050      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x11e>
 8004b44:	2b60      	cmp	r3, #96	@ 0x60
 8004b46:	d877      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b48:	2b50      	cmp	r3, #80	@ 0x50
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xfe>
 8004b4c:	2b50      	cmp	r3, #80	@ 0x50
 8004b4e:	d873      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b50:	2b40      	cmp	r3, #64	@ 0x40
 8004b52:	d058      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x13e>
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d86f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b58:	2b30      	cmp	r3, #48	@ 0x30
 8004b5a:	d064      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b5c:	2b30      	cmp	r3, #48	@ 0x30
 8004b5e:	d86b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d060      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d867      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d05a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b70:	e062      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b82:	f000 f9bd 	bl	8004f00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
      break;
 8004b9e:	e04f      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb0:	f000 f9a6 	bl	8004f00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc2:	609a      	str	r2, [r3, #8]
      break;
 8004bc4:	e03c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f91a 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2150      	movs	r1, #80	@ 0x50
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f973 	bl	8004eca <TIM_ITRx_SetConfig>
      break;
 8004be4:	e02c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f939 	bl	8004e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2160      	movs	r1, #96	@ 0x60
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f963 	bl	8004eca <TIM_ITRx_SetConfig>
      break;
 8004c04:	e01c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f8fa 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2140      	movs	r1, #64	@ 0x40
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f953 	bl	8004eca <TIM_ITRx_SetConfig>
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 f94a 	bl	8004eca <TIM_ITRx_SetConfig>
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a46      	ldr	r2, [pc, #280]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cde:	d00f      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a43      	ldr	r2, [pc, #268]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a42      	ldr	r2, [pc, #264]	@ (8004df4 <TIM_Base_SetConfig+0x134>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a41      	ldr	r2, [pc, #260]	@ (8004df8 <TIM_Base_SetConfig+0x138>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a40      	ldr	r2, [pc, #256]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a35      	ldr	r2, [pc, #212]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01f      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d20:	d01b      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d017      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a31      	ldr	r2, [pc, #196]	@ (8004df4 <TIM_Base_SetConfig+0x134>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a30      	ldr	r2, [pc, #192]	@ (8004df8 <TIM_Base_SetConfig+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	@ (8004e00 <TIM_Base_SetConfig+0x140>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e04 <TIM_Base_SetConfig+0x144>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0x9a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2c      	ldr	r2, [pc, #176]	@ (8004e08 <TIM_Base_SetConfig+0x148>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00f      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <TIM_Base_SetConfig+0x140>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <TIM_Base_SetConfig+0x144>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0xf8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <TIM_Base_SetConfig+0x148>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]
  }
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800

08004e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 030a 	bic.w	r3, r3, #10
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b087      	sub	sp, #28
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f023 0210 	bic.w	r2, r3, #16
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	031b      	lsls	r3, r3, #12
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f043 0307 	orr.w	r3, r3, #7
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	609a      	str	r2, [r3, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	021a      	lsls	r2, r3, #8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e068      	b.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fca:	d018      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1a      	ldr	r2, [pc, #104]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a13      	ldr	r2, [pc, #76]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a14      	ldr	r2, [pc, #80]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10c      	bne.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40013400 	.word	0x40013400
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40014000 	.word	0x40014000

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <arm_sin_f32>:
 800508c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800510c <arm_sin_f32+0x80>
 8005090:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005094:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80050a0:	d504      	bpl.n	80050ac <arm_sin_f32+0x20>
 80050a2:	ee17 3a90 	vmov	r3, s15
 80050a6:	3b01      	subs	r3, #1
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005110 <arm_sin_f32+0x84>
 80050b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050b8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80050bc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80050c0:	ee17 3a90 	vmov	r3, s15
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ca:	d21a      	bcs.n	8005102 <arm_sin_f32+0x76>
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d4:	1c59      	adds	r1, r3, #1
 80050d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050da:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <arm_sin_f32+0x88>)
 80050dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80050e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80050e8:	ed93 7a00 	vldr	s14, [r3]
 80050ec:	edd2 6a00 	vldr	s13, [r2]
 80050f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80050f4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80050f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005100:	4770      	bx	lr
 8005102:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005106:	2101      	movs	r1, #1
 8005108:	2300      	movs	r3, #0
 800510a:	e7e6      	b.n	80050da <arm_sin_f32+0x4e>
 800510c:	3e22f983 	.word	0x3e22f983
 8005110:	44000000 	.word	0x44000000
 8005114:	080051c8 	.word	0x080051c8

08005118 <memset>:
 8005118:	4402      	add	r2, r0
 800511a:	4603      	mov	r3, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4d0d      	ldr	r5, [pc, #52]	@ (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	@ (8005164 <__libc_init_array+0x3c>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2600      	movs	r6, #0
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4d0b      	ldr	r5, [pc, #44]	@ (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	@ (800516c <__libc_init_array+0x44>)
 800513c:	f000 f818 	bl	8005170 <_init>
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2600      	movs	r6, #0
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	080059cc 	.word	0x080059cc
 8005164:	080059cc 	.word	0x080059cc
 8005168:	080059cc 	.word	0x080059cc
 800516c:	080059d0 	.word	0x080059d0

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
