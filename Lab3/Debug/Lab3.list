
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080047cc  080047cc  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047cc  080047cc  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080047d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000010  080047e4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080047e4  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001000c  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002265  00000000  00000000  0001604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  000182b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c56  00000000  00000000  000192b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7ce  00000000  00000000  00019f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001125f  00000000  00000000  000456dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147e6  00000000  00000000  0005693b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004378  00000000  00000000  0016b164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0016f4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004774 	.word	0x08004774

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08004774 	.word	0x08004774

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fbc7 	bl	8000992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f822 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f98e 	bl	8000528 <MX_GPIO_Init>
  MX_DMA_Init();
 800020c:	f000 f962 	bl	80004d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000210:	f000 f86e 	bl	80002f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000214:	f000 f8d2 	bl	80003bc <MX_DAC1_Init>
  MX_TIM2_Init();
 8000218:	f000 f910 	bl	800043c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start DAC channels
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);  // Sawtooth wave on Channel 1
 800021c:	2100      	movs	r1, #0
 800021e:	480a      	ldr	r0, [pc, #40]	@ (8000248 <main+0x4c>)
 8000220:	f001 fc69 	bl	8001af6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);  // Triangle wave on Channel 2
 8000224:	2110      	movs	r1, #16
 8000226:	4808      	ldr	r0, [pc, #32]	@ (8000248 <main+0x4c>)
 8000228:	f001 fc65 	bl	8001af6 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sawtoothGraph();
 800022c:	f000 f9e0 	bl	80005f0 <sawtoothGraph>
	  HAL_Delay(500); // Small delay for frequency control
 8000230:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000234:	f000 fc22 	bl	8000a7c <HAL_Delay>
	  triangleGraph();
 8000238:	f000 f9f8 	bl	800062c <triangleGraph>
	  HAL_Delay(500);
 800023c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000240:	f000 fc1c 	bl	8000a7c <HAL_Delay>
  {
 8000244:	bf00      	nop
 8000246:	e7f1      	b.n	800022c <main+0x30>
 8000248:	20000094 	.word	0x20000094

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b096      	sub	sp, #88	@ 0x58
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0314 	add.w	r3, r7, #20
 8000256:	2244      	movs	r2, #68	@ 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f004 fa5e 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800026e:	2000      	movs	r0, #0
 8000270:	f002 f9a0 	bl	80025b4 <HAL_PWREx_ControlVoltageScaling>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800027a:	f000 fa03 	bl	8000684 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800027e:	2310      	movs	r3, #16
 8000280:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800028a:	2360      	movs	r3, #96	@ 0x60
 800028c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000292:	2301      	movs	r3, #1
 8000294:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000296:	2301      	movs	r3, #1
 8000298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800029a:	233c      	movs	r3, #60	@ 0x3c
 800029c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fa24 	bl	80026fc <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ba:	f000 f9e3 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2303      	movs	r3, #3
 80002c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	2105      	movs	r1, #5
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fe2a 	bl	8002f30 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002e2:	f000 f9cf 	bl	8000684 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3758      	adds	r7, #88	@ 0x58
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	463b      	mov	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000306:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000308:	4a2a      	ldr	r2, [pc, #168]	@ (80003b4 <MX_ADC1_Init+0xc4>)
 800030a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030c:	4b28      	ldr	r3, [pc, #160]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000312:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000318:	4b25      	ldr	r3, [pc, #148]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031e:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000324:	4b22      	ldr	r3, [pc, #136]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000326:	2204      	movs	r2, #4
 8000328:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800032a:	4b21      	ldr	r3, [pc, #132]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800032c:	2200      	movs	r2, #0
 800032e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000330:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000332:	2200      	movs	r2, #0
 8000334:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000336:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000338:	2201      	movs	r2, #1
 800033a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033c:	4b1c      	ldr	r3, [pc, #112]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b1a      	ldr	r3, [pc, #104]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000346:	2200      	movs	r2, #0
 8000348:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034a:	4b19      	ldr	r3, [pc, #100]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800034c:	2200      	movs	r2, #0
 800034e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000352:	2200      	movs	r2, #0
 8000354:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800035a:	2200      	movs	r2, #0
 800035c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 8000368:	2204      	movs	r2, #4
 800036a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036c:	4810      	ldr	r0, [pc, #64]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800036e:	f000 fd49 	bl	8000e04 <HAL_ADC_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000378:	f000 f984 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_ADC1_Init+0xc8>)
 800037e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000380:	2306      	movs	r3, #6
 8000382:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000384:	2307      	movs	r3, #7
 8000386:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000388:	237f      	movs	r3, #127	@ 0x7f
 800038a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800038c:	2304      	movs	r3, #4
 800038e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000394:	463b      	mov	r3, r7
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_ADC1_Init+0xc0>)
 800039a:	f000 fe7f 	bl	800109c <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80003a4:	f000 f96e 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000002c 	.word	0x2000002c
 80003b4:	50040000 	.word	0x50040000
 80003b8:	c7520000 	.word	0xc7520000

080003bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	@ 0x28
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2228      	movs	r2, #40	@ 0x28
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 f9a7 	bl	800471c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003ce:	4b19      	ldr	r3, [pc, #100]	@ (8000434 <MX_DAC1_Init+0x78>)
 80003d0:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <MX_DAC1_Init+0x7c>)
 80003d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003d4:	4817      	ldr	r0, [pc, #92]	@ (8000434 <MX_DAC1_Init+0x78>)
 80003d6:	f001 fb6c 	bl	8001ab2 <HAL_DAC_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003e0:	f000 f950 	bl	8000684 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80003ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003f0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	4619      	mov	r1, r3
 8000404:	480b      	ldr	r0, [pc, #44]	@ (8000434 <MX_DAC1_Init+0x78>)
 8000406:	f001 fbed 	bl	8001be4 <HAL_DAC_ConfigChannel>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000410:	f000 f938 	bl	8000684 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000414:	463b      	mov	r3, r7
 8000416:	2210      	movs	r2, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4806      	ldr	r0, [pc, #24]	@ (8000434 <MX_DAC1_Init+0x78>)
 800041c:	f001 fbe2 	bl	8001be4 <HAL_DAC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 f92d 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	3728      	adds	r7, #40	@ 0x28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000094 	.word	0x20000094
 8000438:	40007400 	.word	0x40007400

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800045a:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800045c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000460:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8000462:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000464:	2278      	movs	r2, #120	@ 0x78
 8000466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000468:	4b19      	ldr	r3, [pc, #100]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000470:	2217      	movs	r2, #23
 8000472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000480:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <MX_TIM2_Init+0x94>)
 8000482:	f003 fcff 	bl	8003e84 <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800048c:	f000 f8fa 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000494:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <MX_TIM2_Init+0x94>)
 800049e:	f003 fe67 	bl	8004170 <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a8:	f000 f8ec 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_TIM2_Init+0x94>)
 80004ba:	f004 f889 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c4:	f000 f8de 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000108 	.word	0x20000108

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	@ (8000524 <MX_DMA_Init+0x50>)
 80004dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004de:	4a11      	ldr	r2, [pc, #68]	@ (8000524 <MX_DMA_Init+0x50>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <MX_DMA_Init+0x50>)
 80004e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <MX_DMA_Init+0x50>)
 80004f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <MX_DMA_Init+0x50>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <MX_DMA_Init+0x50>)
 8000500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200c      	movs	r0, #12
 8000510:	f001 fa99 	bl	8001a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000514:	200c      	movs	r0, #12
 8000516:	f001 fab2 	bl	8001a7e <HAL_NVIC_EnableIRQ>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4a28      	ldr	r2, [pc, #160]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a22      	ldr	r2, [pc, #136]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <MX_GPIO_Init+0xbc>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800058c:	4816      	ldr	r0, [pc, #88]	@ (80005e8 <MX_GPIO_Init+0xc0>)
 800058e:	f001 ffb5 	bl	80024fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	4810      	ldr	r0, [pc, #64]	@ (80005ec <MX_GPIO_Init+0xc4>)
 80005aa:	f001 fe15 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	4619      	mov	r1, r3
 80005c6:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <MX_GPIO_Init+0xc0>)
 80005c8:	f001 fe06 	bl	80021d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2028      	movs	r0, #40	@ 0x28
 80005d2:	f001 fa38 	bl	8001a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d6:	2028      	movs	r0, #40	@ 0x28
 80005d8:	f001 fa51 	bl	8001a7e <HAL_NVIC_EnableIRQ>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	48000800 	.word	0x48000800

080005f0 <sawtoothGraph>:

/* USER CODE BEGIN 4 */

void sawtoothGraph(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	static uint16_t saw_value = 0;  // Holds the current DAC output value

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, saw_value);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <sawtoothGraph+0x34>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	480a      	ldr	r0, [pc, #40]	@ (8000628 <sawtoothGraph+0x38>)
 80005fe:	f001 facc 	bl	8001b9a <HAL_DAC_SetValue>
	saw_value += 170;               // Increment by 170 for each step (roughly 65 Hz)
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <sawtoothGraph+0x34>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	33aa      	adds	r3, #170	@ 0xaa
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <sawtoothGraph+0x34>)
 800060c:	801a      	strh	r2, [r3, #0]

	if (saw_value > 4095) {         // Reset after reaching the max DAC value (12-bit max)
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <sawtoothGraph+0x34>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000616:	d302      	bcc.n	800061e <sawtoothGraph+0x2e>
		saw_value = 0;
 8000618:	4b02      	ldr	r3, [pc, #8]	@ (8000624 <sawtoothGraph+0x34>)
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
	}
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000154 	.word	0x20000154
 8000628:	20000094 	.word	0x20000094

0800062c <triangleGraph>:

void triangleGraph(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	static uint16_t triangle_value = 0;
	static int8_t step = 170;       // Step size for 65 Hz frequency; alternates between +170 and -170

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, triangle_value);
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <triangleGraph+0x4c>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	4810      	ldr	r0, [pc, #64]	@ (800067c <triangleGraph+0x50>)
 800063a:	f001 faae 	bl	8001b9a <HAL_DAC_SetValue>
	triangle_value += step;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <triangleGraph+0x54>)
 8000640:	f993 3000 	ldrsb.w	r3, [r3]
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <triangleGraph+0x4c>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <triangleGraph+0x4c>)
 8000650:	801a      	strh	r2, [r3, #0]

	if (triangle_value >= 4095) {   // Reverse direction if max value is reached
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <triangleGraph+0x4c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800065a:	4293      	cmp	r3, r2
 800065c:	d903      	bls.n	8000666 <triangleGraph+0x3a>
		step = -170;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <triangleGraph+0x54>)
 8000660:	2256      	movs	r2, #86	@ 0x56
 8000662:	701a      	strb	r2, [r3, #0]
	} else if (triangle_value == 0) { // Reverse direction if min value is reached
		step = 170;
	}
}
 8000664:	e006      	b.n	8000674 <triangleGraph+0x48>
	} else if (triangle_value == 0) { // Reverse direction if min value is reached
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <triangleGraph+0x4c>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d102      	bne.n	8000674 <triangleGraph+0x48>
		step = 170;
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <triangleGraph+0x54>)
 8000670:	22aa      	movs	r2, #170	@ 0xaa
 8000672:	701a      	strb	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000156 	.word	0x20000156
 800067c:	20000094 	.word	0x20000094
 8000680:	20000000 	.word	0x20000000

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <Error_Handler+0x8>

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_MspInit+0x44>)
 8000698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_MspInit+0x44>)
 80006a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <HAL_MspInit+0x44>)
 80006b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b2:	4a08      	ldr	r2, [pc, #32]	@ (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_MspInit+0x44>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0a8      	sub	sp, #160	@ 0xa0
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2294      	movs	r2, #148	@ 0x94
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 f817 	bl	800471c <memset>
  if(hadc->Instance==ADC1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a19      	ldr	r2, [pc, #100]	@ (8000758 <HAL_ADC_MspInit+0x80>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d12b      	bne.n	8000750 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800070e:	2310      	movs	r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800071e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fe93 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000734:	f7ff ffa6 	bl	8000684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HAL_ADC_MspInit+0x84>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0x84>)
 800073e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_ADC_MspInit+0x84>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	37a0      	adds	r7, #160	@ 0xa0
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	50040000 	.word	0x50040000
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a2b      	ldr	r2, [pc, #172]	@ (800082c <HAL_DAC_MspInit+0xcc>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d14f      	bne.n	8000822 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000782:	4b2b      	ldr	r3, [pc, #172]	@ (8000830 <HAL_DAC_MspInit+0xd0>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000786:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <HAL_DAC_MspInit+0xd0>)
 8000788:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800078c:	6593      	str	r3, [r2, #88]	@ 0x58
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <HAL_DAC_MspInit+0xd0>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <HAL_DAC_MspInit+0xd0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a24      	ldr	r2, [pc, #144]	@ (8000830 <HAL_DAC_MspInit+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <HAL_DAC_MspInit+0xd0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007b2:	2330      	movs	r3, #48	@ 0x30
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f001 fd06 	bl	80021d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000838 <HAL_DAC_MspInit+0xd8>)
 80007d0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007d4:	2206      	movs	r2, #6
 80007d6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007da:	2210      	movs	r2, #16
 80007dc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007e6:	2280      	movs	r2, #128	@ 0x80
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007f8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 80007fc:	2220      	movs	r2, #32
 80007fe:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 8000808:	f001 fb2c 	bl	8001e64 <HAL_DMA_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000812:	f7ff ff37 	bl	8000684 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <HAL_DAC_MspInit+0xd4>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40007400 	.word	0x40007400
 8000830:	40021000 	.word	0x40021000
 8000834:	200000a8 	.word	0x200000a8
 8000838:	4002001c 	.word	0x4002001c

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800084c:	d113      	bne.n	8000876 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <HAL_TIM_Base_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <HAL_TIM_Base_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6593      	str	r3, [r2, #88]	@ 0x58
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_TIM_Base_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	201c      	movs	r0, #28
 800086c:	f001 f8eb 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000870:	201c      	movs	r0, #28
 8000872:	f001 f904 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f000 f8af 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80008e8:	4802      	ldr	r0, [pc, #8]	@ (80008f4 <DMA1_Channel2_IRQHandler+0x10>)
 80008ea:	f001 fb63 	bl	8001fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000a8 	.word	0x200000a8

080008f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <TIM2_IRQHandler+0x10>)
 80008fe:	f003 fb18 	bl	8003f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000108 	.word	0x20000108

0800090c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000910:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000914:	f001 fe0a 	bl	800252c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <SystemInit+0x20>)
 8000922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000926:	4a05      	ldr	r2, [pc, #20]	@ (800093c <SystemInit+0x20>)
 8000928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800092c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000944:	f7ff ffea 	bl	800091c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	@ (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f003 fedd 	bl	800472c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000972:	f7ff fc43 	bl	80001fc <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000978:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000984:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8000988:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800098c:	2000015c 	.word	0x2000015c

08000990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_IRQHandler>

08000992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f001 f847 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f80e 	bl	80009c4 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e001      	b.n	80009b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b4:	f7ff fe6c 	bl	8000690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_InitTick+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d023      	beq.n	8000a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_InitTick+0x70>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_InitTick+0x6c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f853 	bl	8001a9a <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10f      	bne.n	8000a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d809      	bhi.n	8000a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a08:	f001 f81d 	bl	8001a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <HAL_InitTick+0x74>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e007      	b.n	8000a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e004      	b.n	8000a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e001      	b.n	8000a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	20000004 	.word	0x20000004
 8000a38:	20000008 	.word	0x20000008

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	20000158 	.word	0x20000158

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000158 	.word	0x20000158

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffee 	bl	8000a64 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffde 	bl	8000a64 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	609a      	str	r2, [r3, #8]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	609a      	str	r2, [r3, #8]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3360      	adds	r3, #96	@ 0x60
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <LL_ADC_SetOffset+0x44>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b64:	bf00      	nop
 8000b66:	371c      	adds	r7, #28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	03fff000 	.word	0x03fff000

08000b74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3360      	adds	r3, #96	@ 0x60
 8000b82:	461a      	mov	r2, r3
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3360      	adds	r3, #96	@ 0x60
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	615a      	str	r2, [r3, #20]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3330      	adds	r3, #48	@ 0x30
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	4413      	add	r3, r2
 8000c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	211f      	movs	r1, #31
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	0e9b      	lsrs	r3, r3, #26
 8000c34:	f003 011f 	and.w	r1, r3, #31
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	431a      	orrs	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3314      	adds	r3, #20
 8000c64:	461a      	mov	r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	0e5b      	lsrs	r3, r3, #25
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	4413      	add	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	0d1b      	lsrs	r3, r3, #20
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	2107      	movs	r1, #7
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	401a      	ands	r2, r3
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	0d1b      	lsrs	r3, r3, #20
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c9e:	bf00      	nop
 8000ca0:	371c      	adds	r7, #28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0318 	and.w	r3, r3, #24
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000cd0:	40d9      	lsrs	r1, r3
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	0007ffff 	.word	0x0007ffff

08000cf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000d04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6093      	str	r3, [r2, #8]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d2c:	d101      	bne.n	8000d32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000d50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000d7c:	d101      	bne.n	8000d82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <LL_ADC_IsEnabled+0x18>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <LL_ADC_IsEnabled+0x1a>
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	d101      	bne.n	8000dce <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d101      	bne.n	8000df4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e12f      	b.n	800107e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fc53 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff67 	bl	8000d18 <LL_ADC_IsDeepPowerDownEnabled>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff4d 	bl	8000cf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff82 	bl	8000d68 <LL_ADC_IsInternalRegulatorEnabled>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d115      	bne.n	8000e96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff66 	bl	8000d40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e74:	4b84      	ldr	r3, [pc, #528]	@ (8001088 <HAL_ADC_Init+0x284>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	099b      	lsrs	r3, r3, #6
 8000e7a:	4a84      	ldr	r2, [pc, #528]	@ (800108c <HAL_ADC_Init+0x288>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	099b      	lsrs	r3, r3, #6
 8000e82:	3301      	adds	r3, #1
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e88:	e002      	b.n	8000e90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f9      	bne.n	8000e8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff64 	bl	8000d68 <LL_ADC_IsInternalRegulatorEnabled>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	f043 0210 	orr.w	r2, r3, #16
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff75 	bl	8000db6 <LL_ADC_REG_IsConversionOngoing>
 8000ecc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 80c8 	bne.w	800106c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 80c4 	bne.w	800106c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000eec:	f043 0202 	orr.w	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff49 	bl	8000d90 <LL_ADC_IsEnabled>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10b      	bne.n	8000f1c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f04:	4862      	ldr	r0, [pc, #392]	@ (8001090 <HAL_ADC_Init+0x28c>)
 8000f06:	f7ff ff43 	bl	8000d90 <LL_ADC_IsEnabled>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d105      	bne.n	8000f1c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4619      	mov	r1, r3
 8000f16:	485f      	ldr	r0, [pc, #380]	@ (8001094 <HAL_ADC_Init+0x290>)
 8000f18:	f7ff fdd4 	bl	8000ac4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7e5b      	ldrb	r3, [r3, #25]
 8000f20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000f2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000f32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d106      	bne.n	8000f58 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	045b      	lsls	r3, r3, #17
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d009      	beq.n	8000f74 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	4b47      	ldr	r3, [pc, #284]	@ (8001098 <HAL_ADC_Init+0x294>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff12 	bl	8000db6 <LL_ADC_REG_IsConversionOngoing>
 8000f92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff1f 	bl	8000ddc <LL_ADC_INJ_IsConversionOngoing>
 8000f9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d140      	bne.n	8001028 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d13d      	bne.n	8001028 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e1b      	ldrb	r3, [r3, #24]
 8000fb4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fb6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000fbe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000fce:	f023 0306 	bic.w	r3, r3, #6
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d118      	bne.n	8001018 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000ffc:	4311      	orrs	r1, r2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001002:	4311      	orrs	r1, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001008:	430a      	orrs	r2, r1
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	e007      	b.n	8001028 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10c      	bne.n	800104a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f023 010f 	bic.w	r1, r3, #15
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	631a      	str	r2, [r3, #48]	@ 0x30
 8001048:	e007      	b.n	800105a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 020f 	bic.w	r2, r2, #15
 8001058:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	f023 0303 	bic.w	r3, r3, #3
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	659a      	str	r2, [r3, #88]	@ 0x58
 800106a:	e007      	b.n	800107c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001070:	f043 0210 	orr.w	r2, r3, #16
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800107c:	7ffb      	ldrb	r3, [r7, #31]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000004 	.word	0x20000004
 800108c:	053e2d63 	.word	0x053e2d63
 8001090:	50040000 	.word	0x50040000
 8001094:	50040300 	.word	0x50040300
 8001098:	fff0c007 	.word	0xfff0c007

0800109c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0b6      	sub	sp, #216	@ 0xd8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_ADC_ConfigChannel+0x22>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e3d3      	b.n	8001866 <HAL_ADC_ConfigChannel+0x7ca>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe73 	bl	8000db6 <LL_ADC_REG_IsConversionOngoing>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 83b8 	bne.w	8001848 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d824      	bhi.n	800112a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	3b02      	subs	r3, #2
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d81b      	bhi.n	8001122 <HAL_ADC_ConfigChannel+0x86>
 80010ea:	a201      	add	r2, pc, #4	@ (adr r2, 80010f0 <HAL_ADC_ConfigChannel+0x54>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001101 	.word	0x08001101
 80010f4:	08001109 	.word	0x08001109
 80010f8:	08001111 	.word	0x08001111
 80010fc:	08001119 	.word	0x08001119
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	220c      	movs	r2, #12
 8001104:	605a      	str	r2, [r3, #4]
          break;
 8001106:	e010      	b.n	800112a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2212      	movs	r2, #18
 800110c:	605a      	str	r2, [r3, #4]
          break;
 800110e:	e00c      	b.n	800112a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2218      	movs	r2, #24
 8001114:	605a      	str	r2, [r3, #4]
          break;
 8001116:	e008      	b.n	800112a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800111e:	605a      	str	r2, [r3, #4]
          break;
 8001120:	e003      	b.n	800112a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2206      	movs	r2, #6
 8001126:	605a      	str	r2, [r3, #4]
          break;
 8001128:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	6859      	ldr	r1, [r3, #4]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	f7ff fd60 	bl	8000bfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe38 	bl	8000db6 <LL_ADC_REG_IsConversionOngoing>
 8001146:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe44 	bl	8000ddc <LL_ADC_INJ_IsConversionOngoing>
 8001154:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001158:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800115c:	2b00      	cmp	r3, #0
 800115e:	f040 81c1 	bne.w	80014e4 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 81bc 	bne.w	80014e4 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001174:	d10f      	bne.n	8001196 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fd67 	bl	8000c54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd21 	bl	8000bd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001194:	e00e      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6819      	ldr	r1, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	461a      	mov	r2, r3
 80011a4:	f7ff fd56 	bl	8000c54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd11 	bl	8000bd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d00a      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011e6:	f7ff fca1 	bl	8000b2c <LL_ADC_SetOffset>
 80011ea:	e17b      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fcbe 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10a      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x17c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fcb3 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	0e9b      	lsrs	r3, r3, #26
 8001212:	f003 021f 	and.w	r2, r3, #31
 8001216:	e01e      	b.n	8001256 <HAL_ADC_ConfigChannel+0x1ba>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fca8 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800123a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800123e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8001246:	2320      	movs	r3, #32
 8001248:	e004      	b.n	8001254 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 800124a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800124e:	fab3 f383 	clz	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <HAL_ADC_ConfigChannel+0x1d2>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0e9b      	lsrs	r3, r3, #26
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	e018      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x204>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800128a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8001292:	2320      	movs	r3, #32
 8001294:	e004      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8001296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d106      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc77 	bl	8000ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fc5b 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10a      	bne.n	80012de <HAL_ADC_ConfigChannel+0x242>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fc50 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	0e9b      	lsrs	r3, r3, #26
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	e01e      	b.n	800131c <HAL_ADC_ConfigChannel+0x280>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fc45 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80012fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 800130c:	2320      	movs	r3, #32
 800130e:	e004      	b.n	800131a <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8001310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001324:	2b00      	cmp	r3, #0
 8001326:	d105      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x298>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0e9b      	lsrs	r3, r3, #26
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	e018      	b.n	8001366 <HAL_ADC_ConfigChannel+0x2ca>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800134c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8001358:	2320      	movs	r3, #32
 800135a:	e004      	b.n	8001366 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 800135c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001360:	fab3 f383 	clz	r3, r3
 8001364:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001366:	429a      	cmp	r2, r3
 8001368:	d106      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fc14 	bl	8000ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fbf8 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x308>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fbed 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	0e9b      	lsrs	r3, r3, #26
 800139e:	f003 021f 	and.w	r2, r3, #31
 80013a2:	e01e      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x346>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2102      	movs	r1, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbe2 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80013c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80013ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 80013d2:	2320      	movs	r3, #32
 80013d4:	e004      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 80013d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x35e>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0e9b      	lsrs	r3, r3, #26
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	e016      	b.n	8001428 <HAL_ADC_ConfigChannel+0x38c>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800140c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800140e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 800141a:	2320      	movs	r3, #32
 800141c:	e004      	b.n	8001428 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800141e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001428:	429a      	cmp	r2, r3
 800142a:	d106      	bne.n	800143a <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	2102      	movs	r1, #2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fbb3 	bl	8000ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2103      	movs	r1, #3
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fb97 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10a      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x3ca>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2103      	movs	r1, #3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fb8c 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	0e9b      	lsrs	r3, r3, #26
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	e017      	b.n	8001496 <HAL_ADC_ConfigChannel+0x3fa>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2103      	movs	r1, #3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fb81 	bl	8000b74 <LL_ADC_GetOffsetChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800147e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001480:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8001488:	2320      	movs	r3, #32
 800148a:	e003      	b.n	8001494 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 800148c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x412>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0e9b      	lsrs	r3, r3, #26
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	e011      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x436>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80014bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80014c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 80014c6:	2320      	movs	r3, #32
 80014c8:	e003      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80014ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d106      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	2103      	movs	r1, #3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb5e 	bl	8000ba0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fc51 	bl	8000d90 <LL_ADC_IsEnabled>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f040 813f 	bne.w	8001774 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	6819      	ldr	r1, [r3, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	461a      	mov	r2, r3
 8001504:	f7ff fbd2 	bl	8000cac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a8e      	ldr	r2, [pc, #568]	@ (8001748 <HAL_ADC_ConfigChannel+0x6ac>)
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 8130 	bne.w	8001774 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <HAL_ADC_ConfigChannel+0x4a0>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0e9b      	lsrs	r3, r3, #26
 800152a:	3301      	adds	r3, #1
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b09      	cmp	r3, #9
 8001532:	bf94      	ite	ls
 8001534:	2301      	movls	r3, #1
 8001536:	2300      	movhi	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	e019      	b.n	8001570 <HAL_ADC_ConfigChannel+0x4d4>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800154a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800154c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800154e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8001554:	2320      	movs	r3, #32
 8001556:	e003      	b.n	8001560 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	2b09      	cmp	r3, #9
 8001568:	bf94      	ite	ls
 800156a:	2301      	movls	r3, #1
 800156c:	2300      	movhi	r3, #0
 800156e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001570:	2b00      	cmp	r3, #0
 8001572:	d079      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x4f4>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0e9b      	lsrs	r3, r3, #26
 8001586:	3301      	adds	r3, #1
 8001588:	069b      	lsls	r3, r3, #26
 800158a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800158e:	e015      	b.n	80015bc <HAL_ADC_ConfigChannel+0x520>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800159e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80015a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 80015a8:	2320      	movs	r3, #32
 80015aa:	e003      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 80015ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	069b      	lsls	r3, r3, #26
 80015b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x540>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0e9b      	lsrs	r3, r3, #26
 80015ce:	3301      	adds	r3, #1
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	e017      	b.n	800160c <HAL_ADC_ConfigChannel+0x570>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80015ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80015ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 80015f4:	2320      	movs	r3, #32
 80015f6:	e003      	b.n	8001600 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 80015f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3301      	adds	r3, #1
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	ea42 0103 	orr.w	r1, r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10a      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x596>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0e9b      	lsrs	r3, r3, #26
 8001622:	3301      	adds	r3, #1
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	051b      	lsls	r3, r3, #20
 8001630:	e018      	b.n	8001664 <HAL_ADC_ConfigChannel+0x5c8>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800164a:	2320      	movs	r3, #32
 800164c:	e003      	b.n	8001656 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800164e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001664:	430b      	orrs	r3, r1
 8001666:	e080      	b.n	800176a <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x5e8>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0e9b      	lsrs	r3, r3, #26
 800167a:	3301      	adds	r3, #1
 800167c:	069b      	lsls	r3, r3, #26
 800167e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001682:	e015      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x614>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 800169c:	2320      	movs	r3, #32
 800169e:	e003      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 80016a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	069b      	lsls	r3, r3, #26
 80016ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x634>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	3301      	adds	r3, #1
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	e017      	b.n	8001700 <HAL_ADC_ConfigChannel+0x664>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	61fb      	str	r3, [r7, #28]
  return result;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 80016e8:	2320      	movs	r3, #32
 80016ea:	e003      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	ea42 0103 	orr.w	r1, r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10d      	bne.n	800172c <HAL_ADC_ConfigChannel+0x690>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0e9b      	lsrs	r3, r3, #26
 8001716:	3301      	adds	r3, #1
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	3b1e      	subs	r3, #30
 8001724:	051b      	lsls	r3, r3, #20
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800172a:	e01d      	b.n	8001768 <HAL_ADC_ConfigChannel+0x6cc>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	613b      	str	r3, [r7, #16]
  return result;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8001744:	2320      	movs	r3, #32
 8001746:	e005      	b.n	8001754 <HAL_ADC_ConfigChannel+0x6b8>
 8001748:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	3301      	adds	r3, #1
 8001756:	f003 021f 	and.w	r2, r3, #31
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	3b1e      	subs	r3, #30
 8001762:	051b      	lsls	r3, r3, #20
 8001764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001768:	430b      	orrs	r3, r1
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	6892      	ldr	r2, [r2, #8]
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa70 	bl	8000c54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_ADC_ConfigChannel+0x7d4>)
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d06c      	beq.n	800185a <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001780:	483c      	ldr	r0, [pc, #240]	@ (8001874 <HAL_ADC_ConfigChannel+0x7d8>)
 8001782:	f7ff f9c5 	bl	8000b10 <LL_ADC_GetCommonPathInternalCh>
 8001786:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a3a      	ldr	r2, [pc, #232]	@ (8001878 <HAL_ADC_ConfigChannel+0x7dc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d127      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d121      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a35      	ldr	r2, [pc, #212]	@ (800187c <HAL_ADC_ConfigChannel+0x7e0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d157      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017b2:	4619      	mov	r1, r3
 80017b4:	482f      	ldr	r0, [pc, #188]	@ (8001874 <HAL_ADC_ConfigChannel+0x7d8>)
 80017b6:	f7ff f998 	bl	8000aea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017ba:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <HAL_ADC_ConfigChannel+0x7e4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	4a30      	ldr	r2, [pc, #192]	@ (8001884 <HAL_ADC_ConfigChannel+0x7e8>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017e2:	e03a      	b.n	800185a <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <HAL_ADC_ConfigChannel+0x7ec>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d113      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x77a>
 80017ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_ADC_ConfigChannel+0x7e0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d12a      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001808:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180c:	4619      	mov	r1, r3
 800180e:	4819      	ldr	r0, [pc, #100]	@ (8001874 <HAL_ADC_ConfigChannel+0x7d8>)
 8001810:	f7ff f96b 	bl	8000aea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001814:	e021      	b.n	800185a <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	@ (800188c <HAL_ADC_ConfigChannel+0x7f0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d11c      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d116      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a12      	ldr	r2, [pc, #72]	@ (800187c <HAL_ADC_ConfigChannel+0x7e0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d111      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800183a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <HAL_ADC_ConfigChannel+0x7d8>)
 8001842:	f7ff f952 	bl	8000aea <LL_ADC_SetCommonPathInternalCh>
 8001846:	e008      	b.n	800185a <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f043 0220 	orr.w	r2, r3, #32
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001862:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001866:	4618      	mov	r0, r3
 8001868:	37d8      	adds	r7, #216	@ 0xd8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	80080000 	.word	0x80080000
 8001874:	50040300 	.word	0x50040300
 8001878:	c7520000 	.word	0xc7520000
 800187c:	50040000 	.word	0x50040000
 8001880:	20000004 	.word	0x20000004
 8001884:	053e2d63 	.word	0x053e2d63
 8001888:	cb840000 	.word	0xcb840000
 800188c:	80000001 	.word	0x80000001

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	@ (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	@ (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	@ (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff3e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff8e 	bl	8001984 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5d 	bl	8001930 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff31 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e014      	b.n	8001aee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe fe43 	bl	8000760 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	795b      	ldrb	r3, [r3, #5]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_DAC_Start+0x16>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e040      	b.n	8001b8e <HAL_DAC_Start+0x98>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2201      	movs	r2, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d11d      	bne.n	8001b80 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	e014      	b.n	8001b80 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2102      	movs	r1, #2
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0202 	orr.w	r2, r2, #2
 8001b7e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e004      	b.n	8001bce <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3314      	adds	r3, #20
 8001bcc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	795b      	ldrb	r3, [r3, #5]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_DAC_ConfigChannel+0x1c>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e12a      	b.n	8001e56 <HAL_DAC_ConfigChannel+0x272>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d174      	bne.n	8001cfe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001c14:	f7fe ff26 	bl	8000a64 <HAL_GetTick>
 8001c18:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d134      	bne.n	8001c8a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c20:	e011      	b.n	8001c46 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c22:	f7fe ff1f 	bl	8000a64 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d90a      	bls.n	8001c46 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f043 0208 	orr.w	r2, r3, #8
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e107      	b.n	8001e56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e6      	bne.n	8001c22 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7fe ff11 	bl	8000a7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	69d2      	ldr	r2, [r2, #28]
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c64:	e01e      	b.n	8001ca4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c66:	f7fe fefd 	bl	8000a64 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d90a      	bls.n	8001c8a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f043 0208 	orr.w	r2, r3, #8
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2203      	movs	r2, #3
 8001c84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e0e5      	b.n	8001e56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dbe8      	blt.n	8001c66 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7fe fef1 	bl	8000a7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	69d2      	ldr	r2, [r2, #28]
 8001ca2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	ea02 0103 	and.w	r1, r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	21ff      	movs	r1, #255	@ 0xff
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	ea02 0103 	and.w	r1, r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d11d      	bne.n	8001d42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	221f      	movs	r2, #31
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d48:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2207      	movs	r2, #7
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001de6:	d104      	bne.n	8001df2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	e018      	b.n	8001e24 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e00f      	b.n	8001e24 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001e04:	f001 fa5a 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8001e08:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <HAL_DAC_ConfigChannel+0x27c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d904      	bls.n	8001e1c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e003      	b.n	8001e24 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e22:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	22c0      	movs	r2, #192	@ 0xc0
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	04c4b400 	.word	0x04c4b400

08001e64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08d      	b.n	8001f92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b47      	ldr	r3, [pc, #284]	@ (8001f9c <HAL_DMA_Init+0x138>)
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d80f      	bhi.n	8001ea2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <HAL_DMA_Init+0x13c>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a45      	ldr	r2, [pc, #276]	@ (8001fa4 <HAL_DMA_Init+0x140>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	009a      	lsls	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	@ (8001fa8 <HAL_DMA_Init+0x144>)
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ea0:	e00e      	b.n	8001ec0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b40      	ldr	r3, [pc, #256]	@ (8001fac <HAL_DMA_Init+0x148>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a3d      	ldr	r2, [pc, #244]	@ (8001fa4 <HAL_DMA_Init+0x140>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	009a      	lsls	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <HAL_DMA_Init+0x14c>)
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8fe 	bl	8002114 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f20:	d102      	bne.n	8001f28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f3c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_DMA_Init+0x104>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d80c      	bhi.n	8001f68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f91e 	bl	8002190 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	e008      	b.n	8001f7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40020407 	.word	0x40020407
 8001fa0:	bffdfff8 	.word	0xbffdfff8
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	bffdfbf8 	.word	0xbffdfbf8
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	f003 031c 	and.w	r3, r3, #28
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d026      	beq.n	800202e <HAL_DMA_IRQHandler+0x7a>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d021      	beq.n	800202e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0204 	bic.w	r2, r2, #4
 8002006:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	f003 021c 	and.w	r2, r3, #28
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	2104      	movs	r1, #4
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	2b00      	cmp	r3, #0
 8002022:	d071      	beq.n	8002108 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800202c:	e06c      	b.n	8002108 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f003 031c 	and.w	r3, r3, #28
 8002036:	2202      	movs	r2, #2
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02e      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xec>
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d029      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10b      	bne.n	8002072 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 020a 	bic.w	r2, r2, #10
 8002068:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f003 021c 	and.w	r2, r3, #28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	2102      	movs	r1, #2
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d038      	beq.n	8002108 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800209e:	e033      	b.n	8002108 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f003 031c 	and.w	r3, r3, #28
 80020a8:	2208      	movs	r2, #8
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d02a      	beq.n	800210a <HAL_DMA_IRQHandler+0x156>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d025      	beq.n	800210a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 020e 	bic.w	r2, r2, #14
 80020cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f003 021c 	and.w	r2, r3, #28
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d004      	beq.n	800210a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002108:	bf00      	nop
 800210a:	bf00      	nop
}
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002124:	429a      	cmp	r2, r3
 8002126:	d80a      	bhi.n	800213e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002134:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6493      	str	r3, [r2, #72]	@ 0x48
 800213c:	e007      	b.n	800214e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	009a      	lsls	r2, r3, #2
 8002146:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002148:	4413      	add	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3b08      	subs	r3, #8
 8002156:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002164:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	2201      	movs	r2, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40020407 	.word	0x40020407
 8002184:	4002081c 	.word	0x4002081c
 8002188:	cccccccd 	.word	0xcccccccd
 800218c:	40020880 	.word	0x40020880

08002190 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2201      	movs	r2, #1
 80021be:	409a      	lsls	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	1000823f 	.word	0x1000823f
 80021d4:	40020940 	.word	0x40020940

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e6:	e166      	b.n	80024b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8158 	beq.w	80024b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d005      	beq.n	8002218 <HAL_GPIO_Init+0x40>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d130      	bne.n	800227a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224e:	2201      	movs	r2, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 0201 	and.w	r2, r3, #1
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b03      	cmp	r3, #3
 8002284:	d017      	beq.n	80022b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d123      	bne.n	800230a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	08da      	lsrs	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3208      	adds	r2, #8
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0203 	and.w	r2, r3, #3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80b2 	beq.w	80024b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234c:	4b61      	ldr	r3, [pc, #388]	@ (80024d4 <HAL_GPIO_Init+0x2fc>)
 800234e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002350:	4a60      	ldr	r2, [pc, #384]	@ (80024d4 <HAL_GPIO_Init+0x2fc>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6613      	str	r3, [r2, #96]	@ 0x60
 8002358:	4b5e      	ldr	r3, [pc, #376]	@ (80024d4 <HAL_GPIO_Init+0x2fc>)
 800235a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002364:	4a5c      	ldr	r2, [pc, #368]	@ (80024d8 <HAL_GPIO_Init+0x300>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800238e:	d02b      	beq.n	80023e8 <HAL_GPIO_Init+0x210>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_GPIO_Init+0x304>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d025      	beq.n	80023e4 <HAL_GPIO_Init+0x20c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a51      	ldr	r2, [pc, #324]	@ (80024e0 <HAL_GPIO_Init+0x308>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d01f      	beq.n	80023e0 <HAL_GPIO_Init+0x208>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a50      	ldr	r2, [pc, #320]	@ (80024e4 <HAL_GPIO_Init+0x30c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d019      	beq.n	80023dc <HAL_GPIO_Init+0x204>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a4f      	ldr	r2, [pc, #316]	@ (80024e8 <HAL_GPIO_Init+0x310>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_GPIO_Init+0x200>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a4e      	ldr	r2, [pc, #312]	@ (80024ec <HAL_GPIO_Init+0x314>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00d      	beq.n	80023d4 <HAL_GPIO_Init+0x1fc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a4d      	ldr	r2, [pc, #308]	@ (80024f0 <HAL_GPIO_Init+0x318>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0x1f8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a4c      	ldr	r2, [pc, #304]	@ (80024f4 <HAL_GPIO_Init+0x31c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_GPIO_Init+0x1f4>
 80023c8:	2307      	movs	r3, #7
 80023ca:	e00e      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023cc:	2308      	movs	r3, #8
 80023ce:	e00c      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023d0:	2306      	movs	r3, #6
 80023d2:	e00a      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023d4:	2305      	movs	r3, #5
 80023d6:	e008      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023d8:	2304      	movs	r3, #4
 80023da:	e006      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023dc:	2303      	movs	r3, #3
 80023de:	e004      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e002      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_GPIO_Init+0x212>
 80023e8:	2300      	movs	r3, #0
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	f002 0203 	and.w	r2, r2, #3
 80023f0:	0092      	lsls	r2, r2, #2
 80023f2:	4093      	lsls	r3, r2
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fa:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_GPIO_Init+0x300>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800242c:	4a32      	ldr	r2, [pc, #200]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002432:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002456:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800245c:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002480:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002486:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024aa:	4a13      	ldr	r2, [pc, #76]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f47f ae91 	bne.w	80021e8 <HAL_GPIO_Init+0x10>
  }
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010000 	.word	0x40010000
 80024dc:	48000400 	.word	0x48000400
 80024e0:	48000800 	.word	0x48000800
 80024e4:	48000c00 	.word	0x48000c00
 80024e8:	48001000 	.word	0x48001000
 80024ec:	48001400 	.word	0x48001400
 80024f0:	48001800 	.word	0x48001800
 80024f4:	48001c00 	.word	0x48001c00
 80024f8:	40010400 	.word	0x40010400

080024fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
 8002508:	4613      	mov	r3, r2
 800250a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800250c:	787b      	ldrb	r3, [r7, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002518:	e002      	b.n	8002520 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f806 	bl	800255c <HAL_GPIO_EXTI_Callback>
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002578:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002584:	d102      	bne.n	800258c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800258a:	e00b      	b.n	80025a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800258e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800259a:	d102      	bne.n	80025a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800259c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a0:	e000      	b.n	80025a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000

080025b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d141      	bne.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c2:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ce:	d131      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d0:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025d6:	4a46      	ldr	r2, [pc, #280]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e0:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025e8:	4a41      	ldr	r2, [pc, #260]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025f0:	4b40      	ldr	r3, [pc, #256]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2232      	movs	r2, #50	@ 0x32
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	4a3f      	ldr	r2, [pc, #252]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	3301      	adds	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002606:	e002      	b.n	800260e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3b01      	subs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800260e:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d102      	bne.n	8002622 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f2      	bne.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002622:	4b33      	ldr	r3, [pc, #204]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262e:	d158      	bne.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e057      	b.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002634:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800263a:	4a2d      	ldr	r2, [pc, #180]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002640:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002644:	e04d      	b.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800264c:	d141      	bne.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800264e:	4b28      	ldr	r3, [pc, #160]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265a:	d131      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002662:	4a23      	ldr	r2, [pc, #140]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800266c:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002674:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800267c:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2232      	movs	r2, #50	@ 0x32
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a1c      	ldr	r2, [pc, #112]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	3301      	adds	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002692:	e002      	b.n	800269a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3b01      	subs	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a6:	d102      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f2      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ba:	d112      	bne.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e011      	b.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026d0:	e007      	b.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40007000 	.word	0x40007000
 80026f4:	20000004 	.word	0x20000004
 80026f8:	431bde83 	.word	0x431bde83

080026fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f000 bc08 	b.w	8002f20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002710:	4b96      	ldr	r3, [pc, #600]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271a:	4b94      	ldr	r3, [pc, #592]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80e4 	beq.w	80028fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_RCC_OscConfig+0x4c>
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	f040 808b 	bne.w	8002856 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b01      	cmp	r3, #1
 8002744:	f040 8087 	bne.w	8002856 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002748:	4b88      	ldr	r3, [pc, #544]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x64>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e3df      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	4b81      	ldr	r3, [pc, #516]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_RCC_OscConfig+0x7e>
 8002770:	4b7e      	ldr	r3, [pc, #504]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002778:	e005      	b.n	8002786 <HAL_RCC_OscConfig+0x8a>
 800277a:	4b7c      	ldr	r3, [pc, #496]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002786:	4293      	cmp	r3, r2
 8002788:	d223      	bcs.n	80027d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fda0 	bl	80032d4 <RCC_SetFlashLatencyFromMSIRange>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e3c0      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279e:	4b73      	ldr	r3, [pc, #460]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	496d      	ldr	r1, [pc, #436]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027bc:	4b6b      	ldr	r3, [pc, #428]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	4968      	ldr	r1, [pc, #416]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e025      	b.n	800281e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d2:	4b66      	ldr	r3, [pc, #408]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a65      	ldr	r2, [pc, #404]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b63      	ldr	r3, [pc, #396]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4960      	ldr	r1, [pc, #384]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f0:	4b5e      	ldr	r3, [pc, #376]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	495b      	ldr	r1, [pc, #364]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd60 	bl	80032d4 <RCC_SetFlashLatencyFromMSIRange>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e380      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800281e:	f000 fcc1 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b51      	ldr	r3, [pc, #324]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4950      	ldr	r1, [pc, #320]	@ (8002970 <HAL_RCC_OscConfig+0x274>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a4e      	ldr	r2, [pc, #312]	@ (8002974 <HAL_RCC_OscConfig+0x278>)
 800283c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800283e:	4b4e      	ldr	r3, [pc, #312]	@ (8002978 <HAL_RCC_OscConfig+0x27c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe f8be 	bl	80009c4 <HAL_InitTick>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d052      	beq.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	e364      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d032      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800285e:	4b43      	ldr	r3, [pc, #268]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a42      	ldr	r2, [pc, #264]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800286a:	f7fe f8fb 	bl	8000a64 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002872:	f7fe f8f7 	bl	8000a64 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e34d      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002884:	4b39      	ldr	r3, [pc, #228]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002890:	4b36      	ldr	r3, [pc, #216]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a35      	ldr	r2, [pc, #212]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002896:	f043 0308 	orr.w	r3, r3, #8
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b33      	ldr	r3, [pc, #204]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4930      	ldr	r1, [pc, #192]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ae:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	492b      	ldr	r1, [pc, #172]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
 80028c2:	e01a      	b.n	80028fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a28      	ldr	r2, [pc, #160]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d0:	f7fe f8c8 	bl	8000a64 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d8:	f7fe f8c4 	bl	8000a64 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e31a      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ea:	4b20      	ldr	r3, [pc, #128]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1dc>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d073      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x21c>
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d10e      	bne.n	8002930 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d10b      	bne.n	8002930 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	4b14      	ldr	r3, [pc, #80]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d063      	beq.n	80029ec <HAL_RCC_OscConfig+0x2f0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d15f      	bne.n	80029ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e2f7      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x24c>
 800293a:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e025      	b.n	8002994 <HAL_RCC_OscConfig+0x298>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002950:	d114      	bne.n	800297c <HAL_RCC_OscConfig+0x280>
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a02      	ldr	r2, [pc, #8]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e013      	b.n	8002994 <HAL_RCC_OscConfig+0x298>
 800296c:	40021000 	.word	0x40021000
 8002970:	0800478c 	.word	0x0800478c
 8002974:	20000004 	.word	0x20000004
 8002978:	20000008 	.word	0x20000008
 800297c:	4ba0      	ldr	r3, [pc, #640]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a9f      	ldr	r2, [pc, #636]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b9d      	ldr	r3, [pc, #628]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a9c      	ldr	r2, [pc, #624]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe f862 	bl	8000a64 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe f85e 	bl	8000a64 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e2b4      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b6:	4b92      	ldr	r3, [pc, #584]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2a8>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe f84e 	bl	8000a64 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe f84a 	bl	8000a64 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e2a0      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029de:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x2d0>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d060      	beq.n	8002abc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x310>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d116      	bne.n	8002a3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x328>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e27d      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b76      	ldr	r3, [pc, #472]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	4973      	ldr	r1, [pc, #460]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a38:	e040      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d023      	beq.n	8002a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a42:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe f809 	bl	8000a64 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe f805 	bl	8000a64 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e25b      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a68:	4b65      	ldr	r3, [pc, #404]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b62      	ldr	r3, [pc, #392]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	495f      	ldr	r1, [pc, #380]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fd ffe5 	bl	8000a64 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fd ffe1 	bl	8000a64 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e237      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d03c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fd ffc0 	bl	8000a64 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fd ffbc 	bl	8000a64 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e212      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x3ec>
 8002b08:	e01b      	b.n	8002b42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b10:	4a3b      	ldr	r2, [pc, #236]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fd ffa3 	bl	8000a64 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fd ff9f 	bl	8000a64 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1f5      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b34:	4b32      	ldr	r3, [pc, #200]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ef      	bne.n	8002b22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a6 	beq.w	8002c9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b54:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b6c:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d118      	bne.n	8002bba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b94:	f7fd ff66 	bl	8000a64 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fd ff62 	bl	8000a64 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1b8      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4d8>
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd2:	e029      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d115      	bne.n	8002c08 <HAL_RCC_OscConfig+0x50c>
 8002bdc:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a03      	ldr	r2, [pc, #12]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	4b9d      	ldr	r3, [pc, #628]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0e:	4a9c      	ldr	r2, [pc, #624]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c18:	4b99      	ldr	r3, [pc, #612]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	4a98      	ldr	r2, [pc, #608]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d016      	beq.n	8002c5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fd ff18 	bl	8000a64 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fd ff14 	bl	8000a64 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e168      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ed      	beq.n	8002c38 <HAL_RCC_OscConfig+0x53c>
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fd ff01 	bl	8000a64 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fd fefd 	bl	8000a64 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e151      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7c:	4b80      	ldr	r3, [pc, #512]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ed      	bne.n	8002c66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b7b      	ldr	r3, [pc, #492]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	4a7a      	ldr	r2, [pc, #488]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01c      	beq.n	8002cea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cb0:	4b73      	ldr	r3, [pc, #460]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cb6:	4a72      	ldr	r2, [pc, #456]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fd fed0 	bl	8000a64 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc8:	f7fd fecc 	bl	8000a64 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e122      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cda:	4b69      	ldr	r3, [pc, #420]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ef      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x5cc>
 8002ce8:	e01b      	b.n	8002d22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cea:	4b65      	ldr	r3, [pc, #404]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cf0:	4a63      	ldr	r2, [pc, #396]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fd feb3 	bl	8000a64 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d02:	f7fd feaf 	bl	8000a64 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e105      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d14:	4b5a      	ldr	r3, [pc, #360]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ef      	bne.n	8002d02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80f9 	beq.w	8002f1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	f040 80cf 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d36:	4b52      	ldr	r3, [pc, #328]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0203 	and.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d12c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	3b01      	subs	r3, #1
 8002d56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d123      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d11b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d113      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d071      	beq.n	8002e88 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d068      	beq.n	8002e7c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002daa:	4b35      	ldr	r3, [pc, #212]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002db6:	4b32      	ldr	r3, [pc, #200]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0ac      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2d      	ldr	r2, [pc, #180]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002dcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd2:	f7fd fe47 	bl	8000a64 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fd fe43 	bl	8000a64 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e099      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dec:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df8:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <HAL_RCC_OscConfig+0x788>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e12:	0212      	lsls	r2, r2, #8
 8002e14:	4311      	orrs	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e1a:	0852      	lsrs	r2, r2, #1
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	0552      	lsls	r2, r2, #21
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e26:	0852      	lsrs	r2, r2, #1
 8002e28:	3a01      	subs	r2, #1
 8002e2a:	0652      	lsls	r2, r2, #25
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e32:	06d2      	lsls	r2, r2, #27
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4912      	ldr	r1, [pc, #72]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e54:	f7fd fe06 	bl	8000a64 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fd fe02 	bl	8000a64 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e058      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <HAL_RCC_OscConfig+0x784>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7a:	e050      	b.n	8002f1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e04f      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e88:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d144      	bne.n	8002f1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e94:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea0:	4b21      	ldr	r3, [pc, #132]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a20      	ldr	r2, [pc, #128]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eac:	f7fd fdda 	bl	8000a64 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fd fdd6 	bl	8000a64 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e02c      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x7b8>
 8002ed2:	e024      	b.n	8002f1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d01f      	beq.n	8002f1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fdbd 	bl	8000a64 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fd fdb9 	bl	8000a64 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e00f      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4905      	ldr	r1, [pc, #20]	@ (8002f28 <HAL_RCC_OscConfig+0x82c>)
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCC_OscConfig+0x830>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
 8002f18:	e001      	b.n	8002f1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	feeefffc 	.word	0xfeeefffc

08002f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e11d      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b90      	ldr	r3, [pc, #576]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b8d      	ldr	r3, [pc, #564]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	498b      	ldr	r1, [pc, #556]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b89      	ldr	r3, [pc, #548]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e105      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b81      	ldr	r3, [pc, #516]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b7e      	ldr	r3, [pc, #504]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	497b      	ldr	r1, [pc, #492]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d079      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d11e      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fba:	4b75      	ldr	r3, [pc, #468]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0dc      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002fca:	f000 f9dd 	bl	8003388 <RCC_GetSysClockFreqFromPLLSource>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4a70      	ldr	r2, [pc, #448]	@ (8003194 <HAL_RCC_ClockConfig+0x264>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d946      	bls.n	8003064 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d140      	bne.n	8003064 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fe2:	4b6b      	ldr	r3, [pc, #428]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fea:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e035      	b.n	8003064 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003000:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b9      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003018:	4b5d      	ldr	r3, [pc, #372]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0ad      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0a5      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003038:	f000 f8b4 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 800303c:	4603      	mov	r3, r0
 800303e:	4a55      	ldr	r2, [pc, #340]	@ (8003194 <HAL_RCC_ClockConfig+0x264>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d90f      	bls.n	8003064 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003044:	4b52      	ldr	r3, [pc, #328]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003050:	4b4f      	ldr	r3, [pc, #316]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003058:	4a4d      	ldr	r2, [pc, #308]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 800305a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800305e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003064:	4b4a      	ldr	r3, [pc, #296]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 0203 	bic.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4947      	ldr	r1, [pc, #284]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003076:	f7fd fcf5 	bl	8000a64 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307c:	e00a      	b.n	8003094 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307e:	f7fd fcf1 	bl	8000a64 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e077      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003094:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 020c 	and.w	r2, r3, #12
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d1eb      	bne.n	800307e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b80      	cmp	r3, #128	@ 0x80
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ac:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a37      	ldr	r2, [pc, #220]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d208      	bcs.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	492b      	ldr	r1, [pc, #172]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d210      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f4:	4b25      	ldr	r3, [pc, #148]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 020f 	bic.w	r2, r3, #15
 80030fc:	4923      	ldr	r1, [pc, #140]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003104:	4b21      	ldr	r3, [pc, #132]	@ (800318c <HAL_RCC_ClockConfig+0x25c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e036      	b.n	8003184 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4918      	ldr	r1, [pc, #96]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4910      	ldr	r1, [pc, #64]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003154:	f000 f826 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <HAL_RCC_ClockConfig+0x260>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	490c      	ldr	r1, [pc, #48]	@ (8003198 <HAL_RCC_ClockConfig+0x268>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <HAL_RCC_ClockConfig+0x26c>)
 8003172:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003174:	4b0a      	ldr	r3, [pc, #40]	@ (80031a0 <HAL_RCC_ClockConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fc23 	bl	80009c4 <HAL_InitTick>
 800317e:	4603      	mov	r3, r0
 8003180:	73fb      	strb	r3, [r7, #15]

  return status;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40022000 	.word	0x40022000
 8003190:	40021000 	.word	0x40021000
 8003194:	04c4b400 	.word	0x04c4b400
 8003198:	0800478c 	.word	0x0800478c
 800319c:	20000004 	.word	0x20000004
 80031a0:	20000008 	.word	0x20000008

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031bc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x34>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d121      	bne.n	8003216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d11e      	bne.n	8003216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031d8:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031e4:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003200:	4a2b      	ldr	r2, [pc, #172]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003214:	e00a      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d102      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800321c:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e004      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d101      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003228:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800322a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d134      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003232:	4b1e      	ldr	r3, [pc, #120]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0xa6>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d003      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0xac>
 8003248:	e005      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800324a:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800324c:	617b      	str	r3, [r7, #20]
      break;
 800324e:	e005      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003252:	617b      	str	r3, [r7, #20]
      break;
 8003254:	e002      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	617b      	str	r3, [r7, #20]
      break;
 800325a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3301      	adds	r3, #1
 8003268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	fb03 f202 	mul.w	r2, r3, r2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	0e5b      	lsrs	r3, r3, #25
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	3301      	adds	r3, #1
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800329c:	69bb      	ldr	r3, [r7, #24]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	0800479c 	.word	0x0800479c
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200

080032bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000004 	.word	0x20000004

080032d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032e0:	4b27      	ldr	r3, [pc, #156]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032ec:	f7ff f942 	bl	8002574 <HAL_PWREx_GetVoltageRange>
 80032f0:	6178      	str	r0, [r7, #20]
 80032f2:	e014      	b.n	800331e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	4a21      	ldr	r2, [pc, #132]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003300:	4b1f      	ldr	r3, [pc, #124]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800330c:	f7ff f932 	bl	8002574 <HAL_PWREx_GetVoltageRange>
 8003310:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	4a1a      	ldr	r2, [pc, #104]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800331c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003324:	d10b      	bne.n	800333e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b80      	cmp	r3, #128	@ 0x80
 800332a:	d913      	bls.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003330:	d902      	bls.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003332:	2302      	movs	r3, #2
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	e00d      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003338:	2301      	movs	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	e00a      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b7f      	cmp	r3, #127	@ 0x7f
 8003342:	d902      	bls.n	800334a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003344:	2302      	movs	r3, #2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e004      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b70      	cmp	r3, #112	@ 0x70
 800334e:	d101      	bne.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003350:	2301      	movs	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 020f 	bic.w	r2, r3, #15
 800335c:	4909      	ldr	r1, [pc, #36]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	40022000 	.word	0x40022000

08003388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800338e:	4b2d      	ldr	r3, [pc, #180]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b03      	cmp	r3, #3
 800339c:	d00b      	beq.n	80033b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d825      	bhi.n	80033f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d008      	beq.n	80033bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d11f      	bne.n	80033f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033b2:	613b      	str	r3, [r7, #16]
    break;
 80033b4:	e01f      	b.n	80033f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80033b6:	4b25      	ldr	r3, [pc, #148]	@ (800344c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80033b8:	613b      	str	r3, [r7, #16]
    break;
 80033ba:	e01c      	b.n	80033f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033bc:	4b21      	ldr	r3, [pc, #132]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	e005      	b.n	80033e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80033e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003450 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	613b      	str	r3, [r7, #16]
    break;
 80033ee:	e002      	b.n	80033f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]
    break;
 80033f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f6:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	3301      	adds	r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003404:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	fb03 f202 	mul.w	r2, r3, r2
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0e5b      	lsrs	r3, r3, #25
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	3301      	adds	r3, #1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003436:	683b      	ldr	r3, [r7, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	371c      	adds	r7, #28
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40021000 	.word	0x40021000
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200
 8003450:	0800479c 	.word	0x0800479c

08003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800345c:	2300      	movs	r3, #0
 800345e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003460:	2300      	movs	r3, #0
 8003462:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800346c:	2b00      	cmp	r3, #0
 800346e:	d040      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003474:	2b80      	cmp	r3, #128	@ 0x80
 8003476:	d02a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003478:	2b80      	cmp	r3, #128	@ 0x80
 800347a:	d825      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800347c:	2b60      	cmp	r3, #96	@ 0x60
 800347e:	d026      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003480:	2b60      	cmp	r3, #96	@ 0x60
 8003482:	d821      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003484:	2b40      	cmp	r3, #64	@ 0x40
 8003486:	d006      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003488:	2b40      	cmp	r3, #64	@ 0x40
 800348a:	d81d      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003490:	2b20      	cmp	r3, #32
 8003492:	d010      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003494:	e018      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003496:	4b89      	ldr	r3, [pc, #548]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a88      	ldr	r2, [pc, #544]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a2:	e015      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb02 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034b4:	e00c      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3320      	adds	r3, #32
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fbed 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034c6:	e003      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	74fb      	strb	r3, [r7, #19]
      break;
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80034ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034d6:	4b79      	ldr	r3, [pc, #484]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034dc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e4:	4975      	ldr	r1, [pc, #468]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80034ec:	e001      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d047      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003506:	d030      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350c:	d82a      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800350e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003512:	d02a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003518:	d824      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800351a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800351e:	d008      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003524:	d81e      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800352a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352e:	d010      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003530:	e018      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003532:	4b62      	ldr	r3, [pc, #392]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	4a61      	ldr	r2, [pc, #388]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800353e:	e015      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fab4 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003550:	e00c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3320      	adds	r3, #32
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fb9f 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003562:	e003      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	74fb      	strb	r3, [r7, #19]
      break;
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800356a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10b      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003572:	4b52      	ldr	r3, [pc, #328]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003580:	494e      	ldr	r1, [pc, #312]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003588:	e001      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 809f 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035a0:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b41      	ldr	r3, [pc, #260]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	4a40      	ldr	r2, [pc, #256]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c2:	4b3e      	ldr	r3, [pc, #248]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d2:	4b3b      	ldr	r3, [pc, #236]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3a      	ldr	r2, [pc, #232]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035de:	f7fd fa41 	bl	8000a64 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e4:	e009      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fd fa3d 	bl	8000a64 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d902      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	74fb      	strb	r3, [r7, #19]
        break;
 80035f8:	e005      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035fa:	4b31      	ldr	r3, [pc, #196]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0ef      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d15b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800360c:	4b2b      	ldr	r3, [pc, #172]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01f      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	429a      	cmp	r2, r3
 8003628:	d019      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363c:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003646:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003656:	4a19      	ldr	r2, [pc, #100]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d016      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd f9fc 	bl	8000a64 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366e:	e00b      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd f9f8 	bl	8000a64 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d902      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	74fb      	strb	r3, [r7, #19]
            break;
 8003686:	e006      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ec      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10c      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369c:	4b07      	ldr	r3, [pc, #28]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ac:	4903      	ldr	r1, [pc, #12]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	74bb      	strb	r3, [r7, #18]
 80036ba:	e005      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c8:	7c7b      	ldrb	r3, [r7, #17]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	4a9f      	ldr	r2, [pc, #636]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e6:	4b9a      	ldr	r3, [pc, #616]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f023 0203 	bic.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	4996      	ldr	r1, [pc, #600]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003708:	4b91      	ldr	r3, [pc, #580]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	f023 020c 	bic.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	498e      	ldr	r1, [pc, #568]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800372a:	4b89      	ldr	r3, [pc, #548]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	4985      	ldr	r1, [pc, #532]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800374c:	4b80      	ldr	r3, [pc, #512]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375a:	497d      	ldr	r1, [pc, #500]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800376e:	4b78      	ldr	r3, [pc, #480]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377c:	4974      	ldr	r1, [pc, #464]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003790:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003796:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379e:	496c      	ldr	r1, [pc, #432]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037b2:	4b67      	ldr	r3, [pc, #412]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c0:	4963      	ldr	r1, [pc, #396]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037e2:	495b      	ldr	r1, [pc, #364]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f6:	4b56      	ldr	r3, [pc, #344]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	4952      	ldr	r1, [pc, #328]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003818:	4b4d      	ldr	r3, [pc, #308]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	494a      	ldr	r1, [pc, #296]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800383a:	4b45      	ldr	r3, [pc, #276]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	4941      	ldr	r1, [pc, #260]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800385c:	4b3c      	ldr	r3, [pc, #240]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800385e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	4939      	ldr	r1, [pc, #228]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d028      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800387e:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388c:	4930      	ldr	r1, [pc, #192]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800389c:	d106      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800389e:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038a8:	60d3      	str	r3, [r2, #12]
 80038aa:	e011      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f8f9 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d04d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e4:	d108      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80038e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038ec:	4a18      	ldr	r2, [pc, #96]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80038f6:	e012      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80038f8:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038fe:	4a14      	ldr	r2, [pc, #80]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003904:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003916:	490e      	ldr	r1, [pc, #56]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003926:	d106      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a08      	ldr	r2, [pc, #32]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003932:	60d3      	str	r3, [r2, #12]
 8003934:	e020      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800393a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393e:	d109      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a02      	ldr	r2, [pc, #8]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394a:	60d3      	str	r3, [r2, #12]
 800394c:	e014      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800395c:	d10c      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f8a5 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d028      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003984:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003992:	4947      	ldr	r1, [pc, #284]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800399e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a4:	4b42      	ldr	r3, [pc, #264]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a41      	ldr	r2, [pc, #260]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ae:	60d3      	str	r3, [r2, #12]
 80039b0:	e011      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ba:	d10c      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f876 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e2:	4b33      	ldr	r3, [pc, #204]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f2:	492f      	ldr	r1, [pc, #188]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f851 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a2c:	4b20      	ldr	r3, [pc, #128]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a32:	f023 0204 	bic.w	r2, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a3c:	491c      	ldr	r1, [pc, #112]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a50:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a56:	f023 0218 	bic.w	r2, r3, #24
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	4913      	ldr	r1, [pc, #76]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a74:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a84:	490a      	ldr	r1, [pc, #40]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003aa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ac2:	4b72      	ldr	r3, [pc, #456]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ace:	4b6f      	ldr	r3, [pc, #444]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0203 	and.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d103      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d142      	bne.n	8003b6c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e03f      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d018      	beq.n	8003b26 <RCCEx_PLLSAI1_Config+0x72>
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d825      	bhi.n	8003b44 <RCCEx_PLLSAI1_Config+0x90>
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0x4e>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d009      	beq.n	8003b14 <RCCEx_PLLSAI1_Config+0x60>
 8003b00:	e020      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b02:	4b62      	ldr	r3, [pc, #392]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11d      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b12:	e01a      	b.n	8003b4a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b14:	4b5d      	ldr	r3, [pc, #372]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e013      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b26:	4b59      	ldr	r3, [pc, #356]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b32:	4b56      	ldr	r3, [pc, #344]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b42:	e006      	b.n	8003b52 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	e004      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4949      	ldr	r1, [pc, #292]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 8086 	bne.w	8003c80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b74:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a44      	ldr	r2, [pc, #272]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7fc ff70 	bl	8000a64 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b88:	f7fc ff6c 	bl	8000a64 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
        break;
 8003b9a:	e005      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ef      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d168      	bne.n	8003c80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d113      	bne.n	8003bdc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb4:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b35      	ldr	r3, [pc, #212]	@ (8003c90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6892      	ldr	r2, [r2, #8]
 8003bc0:	0211      	lsls	r1, r2, #8
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	06d2      	lsls	r2, r2, #27
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6852      	ldr	r2, [r2, #4]
 8003bce:	3a01      	subs	r2, #1
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	492d      	ldr	r1, [pc, #180]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	610b      	str	r3, [r1, #16]
 8003bda:	e02d      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d115      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6892      	ldr	r2, [r2, #8]
 8003bee:	0211      	lsls	r1, r2, #8
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6912      	ldr	r2, [r2, #16]
 8003bf4:	0852      	lsrs	r2, r2, #1
 8003bf6:	3a01      	subs	r2, #1
 8003bf8:	0552      	lsls	r2, r2, #21
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6852      	ldr	r2, [r2, #4]
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	430a      	orrs	r2, r1
 8003c06:	4921      	ldr	r1, [pc, #132]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	610b      	str	r3, [r1, #16]
 8003c0c:	e014      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	4b21      	ldr	r3, [pc, #132]	@ (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	0211      	lsls	r1, r2, #8
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6952      	ldr	r2, [r2, #20]
 8003c20:	0852      	lsrs	r2, r2, #1
 8003c22:	3a01      	subs	r2, #1
 8003c24:	0652      	lsls	r2, r2, #25
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	430a      	orrs	r2, r1
 8003c32:	4916      	ldr	r1, [pc, #88]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a13      	ldr	r2, [pc, #76]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fc ff0e 	bl	8000a64 <HAL_GetTick>
 8003c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c4a:	e009      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c4c:	f7fc ff0a 	bl	8000a64 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d902      	bls.n	8003c60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c5e:	e005      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c60:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ef      	beq.n	8003c4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	4904      	ldr	r1, [pc, #16]	@ (8003c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	07ff800f 	.word	0x07ff800f
 8003c94:	ff9f800f 	.word	0xff9f800f
 8003c98:	f9ff800f 	.word	0xf9ff800f

08003c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003caa:	4b72      	ldr	r3, [pc, #456]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00e      	beq.n	8003cd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d103      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d142      	bne.n	8003d54 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e03f      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d018      	beq.n	8003d0e <RCCEx_PLLSAI2_Config+0x72>
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d825      	bhi.n	8003d2c <RCCEx_PLLSAI2_Config+0x90>
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d002      	beq.n	8003cea <RCCEx_PLLSAI2_Config+0x4e>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d009      	beq.n	8003cfc <RCCEx_PLLSAI2_Config+0x60>
 8003ce8:	e020      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cea:	4b62      	ldr	r3, [pc, #392]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11d      	bne.n	8003d32 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfa:	e01a      	b.n	8003d32 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cfc:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d116      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0c:	e013      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d0e:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d1a:	4b56      	ldr	r3, [pc, #344]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d2a:	e006      	b.n	8003d3a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	e004      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d108      	bne.n	8003d54 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003d42:	4b4c      	ldr	r3, [pc, #304]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4949      	ldr	r1, [pc, #292]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8086 	bne.w	8003e68 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d5c:	4b45      	ldr	r3, [pc, #276]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a44      	ldr	r2, [pc, #272]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fc fe7c 	bl	8000a64 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d70:	f7fc fe78 	bl	8000a64 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
        break;
 8003d82:	e005      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d84:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ef      	bne.n	8003d70 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d168      	bne.n	8003e68 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d113      	bne.n	8003dc4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d9c:	4b35      	ldr	r3, [pc, #212]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	4b35      	ldr	r3, [pc, #212]	@ (8003e78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6892      	ldr	r2, [r2, #8]
 8003da8:	0211      	lsls	r1, r2, #8
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68d2      	ldr	r2, [r2, #12]
 8003dae:	06d2      	lsls	r2, r2, #27
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	3a01      	subs	r2, #1
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	492d      	ldr	r1, [pc, #180]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	614b      	str	r3, [r1, #20]
 8003dc2:	e02d      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d115      	bne.n	8003df6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dca:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	4b2b      	ldr	r3, [pc, #172]	@ (8003e7c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6892      	ldr	r2, [r2, #8]
 8003dd6:	0211      	lsls	r1, r2, #8
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6912      	ldr	r2, [r2, #16]
 8003ddc:	0852      	lsrs	r2, r2, #1
 8003dde:	3a01      	subs	r2, #1
 8003de0:	0552      	lsls	r2, r2, #21
 8003de2:	4311      	orrs	r1, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	3a01      	subs	r2, #1
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	430a      	orrs	r2, r1
 8003dee:	4921      	ldr	r1, [pc, #132]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	614b      	str	r3, [r1, #20]
 8003df4:	e014      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003df6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	0211      	lsls	r1, r2, #8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6952      	ldr	r2, [r2, #20]
 8003e08:	0852      	lsrs	r2, r2, #1
 8003e0a:	3a01      	subs	r2, #1
 8003e0c:	0652      	lsls	r2, r2, #25
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6852      	ldr	r2, [r2, #4]
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	4916      	ldr	r1, [pc, #88]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e20:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fc fe1a 	bl	8000a64 <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e32:	e009      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e34:	f7fc fe16 	bl	8000a64 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d902      	bls.n	8003e48 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	73fb      	strb	r3, [r7, #15]
          break;
 8003e46:	e005      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ef      	beq.n	8003e34 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	4904      	ldr	r1, [pc, #16]	@ (8003e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	07ff800f 	.word	0x07ff800f
 8003e7c:	ff9f800f 	.word	0xff9f800f
 8003e80:	f9ff800f 	.word	0xf9ff800f

08003e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e049      	b.n	8003f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc fcc6 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 fa50 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d122      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d11b      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0202 	mvn.w	r2, #2
 8003f5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f9d8 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003f7a:	e005      	b.n	8003f88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f9ca 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9db 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d122      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0204 	mvn.w	r2, #4
 8003fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f9ae 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003fce:	e005      	b.n	8003fdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f9a0 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f9b1 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d122      	bne.n	8004036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0208 	mvn.w	r2, #8
 8004006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f984 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8004022:	e005      	b.n	8004030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f976 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f987 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b10      	cmp	r3, #16
 8004042:	d122      	bne.n	800408a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0210 	mvn.w	r2, #16
 800405a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2208      	movs	r2, #8
 8004060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f95a 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8004076:	e005      	b.n	8004084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f94c 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f95d 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10e      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0201 	mvn.w	r2, #1
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f926 	bl	8004302 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d10e      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b80      	cmp	r3, #128	@ 0x80
 80040d0:	d107      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb09 	bl	80046f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fc:	2b80      	cmp	r3, #128	@ 0x80
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fafc 	bl	8004708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b40      	cmp	r3, #64	@ 0x40
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f90b 	bl	8004352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b20      	cmp	r3, #32
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b20      	cmp	r3, #32
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0220 	mvn.w	r2, #32
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fabc 	bl	80046e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIM_ConfigClockSource+0x1c>
 8004188:	2302      	movs	r3, #2
 800418a:	e0b6      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x18a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c8:	d03e      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0xd8>
 80041ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ce:	f200 8087 	bhi.w	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d6:	f000 8086 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x176>
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041de:	d87f      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041e0:	2b70      	cmp	r3, #112	@ 0x70
 80041e2:	d01a      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xaa>
 80041e4:	2b70      	cmp	r3, #112	@ 0x70
 80041e6:	d87b      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041e8:	2b60      	cmp	r3, #96	@ 0x60
 80041ea:	d050      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x11e>
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d877      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041f0:	2b50      	cmp	r3, #80	@ 0x50
 80041f2:	d03c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0xfe>
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d873      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d058      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x13e>
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d86f      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 8004200:	2b30      	cmp	r3, #48	@ 0x30
 8004202:	d064      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d86b      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d060      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d867      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05c      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d05a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 8004218:	e062      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800422a:	f000 f9b1 	bl	8004590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800423c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	609a      	str	r2, [r3, #8]
      break;
 8004246:	e04f      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	f000 f99a 	bl	8004590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800426a:	609a      	str	r2, [r3, #8]
      break;
 800426c:	e03c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	461a      	mov	r2, r3
 800427c:	f000 f90e 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2150      	movs	r1, #80	@ 0x50
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f967 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 800428c:	e02c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429a:	461a      	mov	r2, r3
 800429c:	f000 f92d 	bl	80044fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2160      	movs	r1, #96	@ 0x60
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f957 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 80042ac:	e01c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 f8ee 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f947 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 80042cc:	e00c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f000 f93e 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 80042de:	e003      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e000      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a40      	ldr	r2, [pc, #256]	@ (800447c <TIM_Base_SetConfig+0x114>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004386:	d00f      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a3d      	ldr	r2, [pc, #244]	@ (8004480 <TIM_Base_SetConfig+0x118>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a3c      	ldr	r2, [pc, #240]	@ (8004484 <TIM_Base_SetConfig+0x11c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a3b      	ldr	r2, [pc, #236]	@ (8004488 <TIM_Base_SetConfig+0x120>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <TIM_Base_SetConfig+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <TIM_Base_SetConfig+0x114>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01f      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c8:	d01b      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004480 <TIM_Base_SetConfig+0x118>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d017      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004484 <TIM_Base_SetConfig+0x11c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004488 <TIM_Base_SetConfig+0x120>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00f      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a29      	ldr	r2, [pc, #164]	@ (800448c <TIM_Base_SetConfig+0x124>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00b      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a28      	ldr	r2, [pc, #160]	@ (8004490 <TIM_Base_SetConfig+0x128>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a27      	ldr	r2, [pc, #156]	@ (8004494 <TIM_Base_SetConfig+0x12c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0x9a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a26      	ldr	r2, [pc, #152]	@ (8004498 <TIM_Base_SetConfig+0x130>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a10      	ldr	r2, [pc, #64]	@ (800447c <TIM_Base_SetConfig+0x114>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00f      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a12      	ldr	r2, [pc, #72]	@ (800448c <TIM_Base_SetConfig+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00b      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <TIM_Base_SetConfig+0x128>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a10      	ldr	r2, [pc, #64]	@ (8004494 <TIM_Base_SetConfig+0x12c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0f      	ldr	r2, [pc, #60]	@ (8004498 <TIM_Base_SetConfig+0x130>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40014000 	.word	0x40014000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	f043 0307 	orr.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e068      	b.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2e      	ldr	r2, [pc, #184]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2d      	ldr	r2, [pc, #180]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d108      	bne.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01d      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465a:	d018      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1a      	ldr	r2, [pc, #104]	@ (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a13      	ldr	r2, [pc, #76]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10c      	bne.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40014000 	.word	0x40014000

080046e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <__libc_init_array>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4d0d      	ldr	r5, [pc, #52]	@ (8004764 <__libc_init_array+0x38>)
 8004730:	4c0d      	ldr	r4, [pc, #52]	@ (8004768 <__libc_init_array+0x3c>)
 8004732:	1b64      	subs	r4, r4, r5
 8004734:	10a4      	asrs	r4, r4, #2
 8004736:	2600      	movs	r6, #0
 8004738:	42a6      	cmp	r6, r4
 800473a:	d109      	bne.n	8004750 <__libc_init_array+0x24>
 800473c:	4d0b      	ldr	r5, [pc, #44]	@ (800476c <__libc_init_array+0x40>)
 800473e:	4c0c      	ldr	r4, [pc, #48]	@ (8004770 <__libc_init_array+0x44>)
 8004740:	f000 f818 	bl	8004774 <_init>
 8004744:	1b64      	subs	r4, r4, r5
 8004746:	10a4      	asrs	r4, r4, #2
 8004748:	2600      	movs	r6, #0
 800474a:	42a6      	cmp	r6, r4
 800474c:	d105      	bne.n	800475a <__libc_init_array+0x2e>
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	f855 3b04 	ldr.w	r3, [r5], #4
 8004754:	4798      	blx	r3
 8004756:	3601      	adds	r6, #1
 8004758:	e7ee      	b.n	8004738 <__libc_init_array+0xc>
 800475a:	f855 3b04 	ldr.w	r3, [r5], #4
 800475e:	4798      	blx	r3
 8004760:	3601      	adds	r6, #1
 8004762:	e7f2      	b.n	800474a <__libc_init_array+0x1e>
 8004764:	080047cc 	.word	0x080047cc
 8004768:	080047cc 	.word	0x080047cc
 800476c:	080047cc 	.word	0x080047cc
 8004770:	080047d0 	.word	0x080047d0

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
