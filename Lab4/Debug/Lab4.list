
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007608  08007608  00008608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007780  08007780  000090e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007788  08007788  000090e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007788  08007788  00008788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800778c  0800778c  0000878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08007790  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001384  200000e4  08007874  000090e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001468  08007874  00009468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc5e  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426b  00000000  00000000  00025d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00029fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138b  00000000  00000000  0002b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad6b  00000000  00000000  0002ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed56  00000000  00000000  00057a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102db0  00000000  00000000  00076774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cec  00000000  00000000  00179568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00180254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075f0 	.word	0x080075f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	080075f0 	.word	0x080075f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000100 	.word	0x20000100
 8000590:	200001a0 	.word	0x200001a0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b09c      	sub	sp, #112	@ 0x70
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 faa5 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f873 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f933 	bl	800080c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 f901 	bl	80007ac <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80005aa:	f000 f8bf 	bl	800072c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  status_g = BSP_GYRO_Init();
 80005ae:	f000 fc0f 	bl	8000dd0 <BSP_GYRO_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <main+0xd0>)
 80005b8:	701a      	strb	r2, [r3, #0]
  BSP_MAGNETO_Init();
 80005ba:	f000 fc63 	bl	8000e84 <BSP_MAGNETO_Init>
  BSP_TSENSOR_Init();
 80005be:	f000 fcd3 	bl	8000f68 <BSP_TSENSOR_Init>
  BSP_PSENSOR_Init();
 80005c2:	f000 fca3 	bl	8000f0c <BSP_PSENSOR_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c6:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <main+0xd4>)
 80005c8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 f89d 	bl	8005720 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <main+0xd8>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonPress */
  osThreadDef(buttonPress, StartButtonTask, osPriorityIdle, 0, 128);
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <main+0xdc>)
 80005ee:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonPressHandle = osThreadCreate(osThread(buttonPress), NULL);
 8000600:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 f88a 	bl	8005720 <osThreadCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <main+0xe0>)
 8000610:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitData */
  osThreadDef(transmitData, StartTXTask, osPriorityIdle, 0, 128);
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <main+0xe4>)
 8000614:	f107 041c 	add.w	r4, r7, #28
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitDataHandle = osThreadCreate(osThread(transmitData), NULL);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f005 f877 	bl	8005720 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a11      	ldr	r2, [pc, #68]	@ (800067c <main+0xe8>)
 8000636:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensor */
  osThreadDef(readSensor, StartSensorTask, osPriorityIdle, 0, 128);
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <main+0xec>)
 800063a:	463c      	mov	r4, r7
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorHandle = osThreadCreate(osThread(readSensor), NULL);
 800064a:	463b      	mov	r3, r7
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f866 	bl	8005720 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <main+0xf0>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f005 f85a 	bl	8005712 <osKernelStart>
  /* USER CODE BEGIN WHILE */

//  uint32_t lastTick = 0; // Store the last tick count
//  uint32_t currentTick = 0; // Store the current tick count

  while (1)
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xca>
 8000662:	bf00      	nop
 8000664:	20000550 	.word	0x20000550
 8000668:	08007614 	.word	0x08007614
 800066c:	2000047c 	.word	0x2000047c
 8000670:	0800763c 	.word	0x0800763c
 8000674:	20000480 	.word	0x20000480
 8000678:	08007668 	.word	0x08007668
 800067c:	20000484 	.word	0x20000484
 8000680:	08007690 	.word	0x08007690
 8000684:	20000488 	.word	0x20000488

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	@ 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fad4 	bl	8006c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f002 fc63 	bl	8002f78 <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b8:	f000 fa34 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006bc:	2310      	movs	r3, #16
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c8:	2360      	movs	r3, #96	@ 0x60
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006d8:	2328      	movs	r3, #40	@ 0x28
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006dc:	2307      	movs	r3, #7
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fc99 	bl	8003024 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006f8:	f000 fa14 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	2104      	movs	r1, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f861 	bl	80037dc <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000720:	f000 fa00 	bl	8000b24 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3758      	adds	r7, #88	@ 0x58
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C2_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C2_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000768:	f001 fda6 	bl	80022b8 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f9d7 	bl	8000b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800077a:	f002 fb57 	bl	8002e2c <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f9ce 	bl	8000b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800078c:	f002 fb99 	bl	8002ec2 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f9c5 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200003a0 	.word	0x200003a0
 80007a4:	40005800 	.word	0x40005800
 80007a8:	10d19ce4 	.word	0x10d19ce4

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART1_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART1_UART_Init+0x58>)
 80007f0:	f004 f9cc 	bl	8004b8c <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f993 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200003f4 	.word	0x200003f4
 8000808:	40013800 	.word	0x40013800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_GPIO_Init+0x94>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a1e      	ldr	r2, [pc, #120]	@ (80008a0 <MX_GPIO_Init+0x94>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_GPIO_Init+0x94>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_GPIO_Init+0x94>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <MX_GPIO_Init+0x94>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <MX_GPIO_Init+0x94>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000858:	4812      	ldr	r0, [pc, #72]	@ (80008a4 <MX_GPIO_Init+0x98>)
 800085a:	f001 fd15 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <MX_GPIO_Init+0x9c>)
 8000874:	f001 fa52 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000878:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_GPIO_Init+0x98>)
 8000892:	f001 fa43 	bl	8001d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48000800 	.word	0x48000800

080008ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f004 ff7f 	bl	80057b8 <osDelay>
 80008ba:	e7fb      	b.n	80008b4 <StartDefaultTask+0x8>

080008bc <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f004 ff77 	bl	80057b8 <osDelay>

    if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)==0){
 80008ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ce:	480a      	ldr	r0, [pc, #40]	@ (80008f8 <StartButtonTask+0x3c>)
 80008d0:	f001 fcc2 	bl	8002258 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f4      	bne.n	80008c4 <StartButtonTask+0x8>
    	counter++;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <StartButtonTask+0x40>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <StartButtonTask+0x40>)
 80008e2:	6013      	str	r3, [r2, #0]
    	while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)==0);
 80008e4:	bf00      	nop
 80008e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ea:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <StartButtonTask+0x3c>)
 80008ec:	f001 fcb4 	bl	8002258 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f7      	beq.n	80008e6 <StartButtonTask+0x2a>
    osDelay(1);
 80008f6:	e7e5      	b.n	80008c4 <StartButtonTask+0x8>
 80008f8:	48000800 	.word	0x48000800
 80008fc:	20000554 	.word	0x20000554

08000900 <StartTXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTXTask */
void StartTXTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTXTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000908:	2064      	movs	r0, #100	@ 0x64
 800090a:	f004 ff55 	bl	80057b8 <osDelay>

    if(counter%4==0){
 800090e:	4b41      	ldr	r3, [pc, #260]	@ (8000a14 <StartTXTask+0x114>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d117      	bne.n	800094a <StartTXTask+0x4a>
    	sprintf(buffer_gyro, "Gyro X:%.2f Y:%.2f Z:%.2f", gyro[0], gyro[1], gyro[2]);
 800091a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a18 <StartTXTask+0x118>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a18 <StartTXTask+0x118>)
 8000920:	6859      	ldr	r1, [r3, #4]
 8000922:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <StartTXTask+0x118>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	460b      	mov	r3, r1
 800092a:	493c      	ldr	r1, [pc, #240]	@ (8000a1c <StartTXTask+0x11c>)
 800092c:	483c      	ldr	r0, [pc, #240]	@ (8000a20 <StartTXTask+0x120>)
 800092e:	f006 f969 	bl	8006c04 <siprintf>
    	status = HAL_UART_Transmit(&huart1, (uint8_t *)buffer_gyro, sizeof(buffer_gyro), 1000);
 8000932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000936:	2250      	movs	r2, #80	@ 0x50
 8000938:	4939      	ldr	r1, [pc, #228]	@ (8000a20 <StartTXTask+0x120>)
 800093a:	483a      	ldr	r0, [pc, #232]	@ (8000a24 <StartTXTask+0x124>)
 800093c:	f004 f974 	bl	8004c28 <HAL_UART_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b38      	ldr	r3, [pc, #224]	@ (8000a28 <StartTXTask+0x128>)
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e7de      	b.n	8000908 <StartTXTask+0x8>
    }
    else if(counter%4==1){
 800094a:	4b32      	ldr	r3, [pc, #200]	@ (8000a14 <StartTXTask+0x114>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	425a      	negs	r2, r3
 8000950:	f003 0303 	and.w	r3, r3, #3
 8000954:	f002 0203 	and.w	r2, r2, #3
 8000958:	bf58      	it	pl
 800095a:	4253      	negpl	r3, r2
 800095c:	2b01      	cmp	r3, #1
 800095e:	d112      	bne.n	8000986 <StartTXTask+0x86>
    	sprintf(buffer_pressure, "Pressure: %u", pressure);
 8000960:	4b32      	ldr	r3, [pc, #200]	@ (8000a2c <StartTXTask+0x12c>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4932      	ldr	r1, [pc, #200]	@ (8000a30 <StartTXTask+0x130>)
 8000968:	4832      	ldr	r0, [pc, #200]	@ (8000a34 <StartTXTask+0x134>)
 800096a:	f006 f94b 	bl	8006c04 <siprintf>
    	status = HAL_UART_Transmit(&huart1, (uint8_t *)buffer_pressure, sizeof(buffer_pressure), 1000);
 800096e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000972:	2214      	movs	r2, #20
 8000974:	492f      	ldr	r1, [pc, #188]	@ (8000a34 <StartTXTask+0x134>)
 8000976:	482b      	ldr	r0, [pc, #172]	@ (8000a24 <StartTXTask+0x124>)
 8000978:	f004 f956 	bl	8004c28 <HAL_UART_Transmit>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <StartTXTask+0x128>)
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e7c0      	b.n	8000908 <StartTXTask+0x8>
    }
    else if(counter%4==2){
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <StartTXTask+0x114>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	425a      	negs	r2, r3
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	f002 0203 	and.w	r2, r2, #3
 8000994:	bf58      	it	pl
 8000996:	4253      	negpl	r3, r2
 8000998:	2b02      	cmp	r3, #2
 800099a:	d112      	bne.n	80009c2 <StartTXTask+0xc2>
    	sprintf(buffer_temp, "Temp: %u", temp);
 800099c:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <StartTXTask+0x138>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4926      	ldr	r1, [pc, #152]	@ (8000a3c <StartTXTask+0x13c>)
 80009a4:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <StartTXTask+0x140>)
 80009a6:	f006 f92d 	bl	8006c04 <siprintf>
    	status = HAL_UART_Transmit(&huart1, (uint8_t *)buffer_temp, sizeof(buffer_temp), 1000);
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	2214      	movs	r2, #20
 80009b0:	4923      	ldr	r1, [pc, #140]	@ (8000a40 <StartTXTask+0x140>)
 80009b2:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <StartTXTask+0x124>)
 80009b4:	f004 f938 	bl	8004c28 <HAL_UART_Transmit>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <StartTXTask+0x128>)
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e7a2      	b.n	8000908 <StartTXTask+0x8>
    }
    else if(counter%4==3){
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <StartTXTask+0x114>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	425a      	negs	r2, r3
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	f002 0203 	and.w	r2, r2, #3
 80009d0:	bf58      	it	pl
 80009d2:	4253      	negpl	r3, r2
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d197      	bne.n	8000908 <StartTXTask+0x8>
    	sprintf(buffer_magneto, "Magneto X:%d Y:%d Z:%d", magneto[0], magneto[1], magneto[2]);
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <StartTXTask+0x144>)
 80009da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <StartTXTask+0x144>)
 80009e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <StartTXTask+0x144>)
 80009ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	460b      	mov	r3, r1
 80009f2:	4915      	ldr	r1, [pc, #84]	@ (8000a48 <StartTXTask+0x148>)
 80009f4:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <StartTXTask+0x14c>)
 80009f6:	f006 f905 	bl	8006c04 <siprintf>
    	status = HAL_UART_Transmit(&huart1, (uint8_t *)buffer_magneto, sizeof(buffer_magneto), 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	2232      	movs	r2, #50	@ 0x32
 8000a00:	4912      	ldr	r1, [pc, #72]	@ (8000a4c <StartTXTask+0x14c>)
 8000a02:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <StartTXTask+0x124>)
 8000a04:	f004 f910 	bl	8004c28 <HAL_UART_Transmit>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <StartTXTask+0x128>)
 8000a0e:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 8000a10:	e77a      	b.n	8000908 <StartTXTask+0x8>
 8000a12:	bf00      	nop
 8000a14:	20000554 	.word	0x20000554
 8000a18:	20000498 	.word	0x20000498
 8000a1c:	080076ac 	.word	0x080076ac
 8000a20:	20000500 	.word	0x20000500
 8000a24:	200003f4 	.word	0x200003f4
 8000a28:	20000558 	.word	0x20000558
 8000a2c:	2000048e 	.word	0x2000048e
 8000a30:	080076c8 	.word	0x080076c8
 8000a34:	200004b8 	.word	0x200004b8
 8000a38:	2000048c 	.word	0x2000048c
 8000a3c:	080076d8 	.word	0x080076d8
 8000a40:	200004a4 	.word	0x200004a4
 8000a44:	20000490 	.word	0x20000490
 8000a48:	080076e4 	.word	0x080076e4
 8000a4c:	200004cc 	.word	0x200004cc

08000a50 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000a58:	2064      	movs	r0, #100	@ 0x64
 8000a5a:	f004 fead 	bl	80057b8 <osDelay>

    if(counter%4==0){
 8000a5e:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <StartSensorTask+0x9c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <StartSensorTask+0x22>
    	BSP_GYRO_GetXYZ(gyro);
 8000a6a:	4821      	ldr	r0, [pc, #132]	@ (8000af0 <StartSensorTask+0xa0>)
 8000a6c:	f000 f9f2 	bl	8000e54 <BSP_GYRO_GetXYZ>
 8000a70:	e7f2      	b.n	8000a58 <StartSensorTask+0x8>
    }
    else if(counter%4==1){
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <StartSensorTask+0x9c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	425a      	negs	r2, r3
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	bf58      	it	pl
 8000a82:	4253      	negpl	r3, r2
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10b      	bne.n	8000aa0 <StartSensorTask+0x50>
    	pressure = BSP_PSENSOR_ReadPressure();
 8000a88:	f000 fa60 	bl	8000f4c <BSP_PSENSOR_ReadPressure>
 8000a8c:	eef0 7a40 	vmov.f32	s15, s0
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <StartSensorTask+0xa4>)
 8000a9c:	801a      	strh	r2, [r3, #0]
 8000a9e:	e7db      	b.n	8000a58 <StartSensorTask+0x8>
    }
    else if(counter%4==2){
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <StartSensorTask+0x9c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	425a      	negs	r2, r3
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	f002 0203 	and.w	r2, r2, #3
 8000aae:	bf58      	it	pl
 8000ab0:	4253      	negpl	r3, r2
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d10b      	bne.n	8000ace <StartSensorTask+0x7e>
    	temp = BSP_TSENSOR_ReadTemp();
 8000ab6:	f000 fa73 	bl	8000fa0 <BSP_TSENSOR_ReadTemp>
 8000aba:	eef0 7a40 	vmov.f32	s15, s0
 8000abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac2:	ee17 3a90 	vmov	r3, s15
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <StartSensorTask+0xa8>)
 8000aca:	801a      	strh	r2, [r3, #0]
 8000acc:	e7c4      	b.n	8000a58 <StartSensorTask+0x8>
    }
    else if(counter%4==3){
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <StartSensorTask+0x9c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	425a      	negs	r2, r3
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	f002 0203 	and.w	r2, r2, #3
 8000adc:	bf58      	it	pl
 8000ade:	4253      	negpl	r3, r2
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d1b9      	bne.n	8000a58 <StartSensorTask+0x8>
    	BSP_MAGNETO_GetXYZ(magneto);
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <StartSensorTask+0xac>)
 8000ae6:	f000 f9f9 	bl	8000edc <BSP_MAGNETO_GetXYZ>
    osDelay(100);
 8000aea:	e7b5      	b.n	8000a58 <StartSensorTask+0x8>
 8000aec:	20000554 	.word	0x20000554
 8000af0:	20000498 	.word	0x20000498
 8000af4:	2000048e 	.word	0x2000048e
 8000af8:	2000048c 	.word	0x2000048c
 8000afc:	20000490 	.word	0x20000490

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f001 f801 	bl	8001b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40001000 	.word	0x40001000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000b50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b54:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000b56:	2312      	movs	r3, #18
 8000b58:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000b62:	2304      	movs	r3, #4
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481b      	ldr	r0, [pc, #108]	@ (8000bdc <I2Cx_MspInit+0xac>)
 8000b6e:	f001 f8d5 	bl	8001d1c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4818      	ldr	r0, [pc, #96]	@ (8000bdc <I2Cx_MspInit+0xac>)
 8000b7a:	f001 f8cf 	bl	8001d1c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b82:	4a15      	ldr	r2, [pc, #84]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8a:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000b9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ba0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd8 <I2Cx_MspInit+0xa8>)
 8000ba8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000bac:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	2021      	movs	r0, #33	@ 0x21
 8000bb4:	f001 f888 	bl	8001cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000bb8:	2021      	movs	r0, #33	@ 0x21
 8000bba:	f001 f8a1 	bl	8001d00 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	2022      	movs	r0, #34	@ 0x22
 8000bc4:	f001 f880 	bl	8001cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000bc8:	2022      	movs	r0, #34	@ 0x22
 8000bca:	f001 f899 	bl	8001d00 <HAL_NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <I2Cx_Init+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <I2Cx_Init+0x58>)
 8000bf2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff89 	bl	8000b30 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f001 fb4a 	bl	80022b8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f002 f900 	bl	8002e2c <HAL_I2CEx_ConfigAnalogFilter>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005800 	.word	0x40005800
 8000c38:	00702681 	.word	0x00702681

08000c3c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af04      	add	r7, sp, #16
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	813b      	strh	r3, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	b299      	uxth	r1, r3
 8000c5e:	88f8      	ldrh	r0, [r7, #6]
 8000c60:	893a      	ldrh	r2, [r7, #8]
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	4603      	mov	r3, r0
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f001 fcfe 	bl	8002674 <HAL_I2C_Mem_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d004      	beq.n	8000c8c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000c82:	7afb      	ldrb	r3, [r7, #11]
 8000c84:	4619      	mov	r1, r3
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f000 f832 	bl	8000cf0 <I2Cx_Error>
  }
  return status;
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b08a      	sub	sp, #40	@ 0x28
 8000c9a:	af04      	add	r7, sp, #16
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	72fb      	strb	r3, [r7, #11]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	813b      	strh	r3, [r7, #8]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	88f8      	ldrh	r0, [r7, #6]
 8000cba:	893a      	ldrh	r2, [r7, #8]
 8000cbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	4603      	mov	r3, r0
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f001 fbbd 	bl	800244c <HAL_I2C_Mem_Write>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d004      	beq.n	8000ce6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 f805 	bl	8000cf0 <I2Cx_Error>
  }
  return status;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f001 fb76 	bl	80023ee <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff6c 	bl	8000be0 <I2Cx_Init>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <SENSOR_IO_Init+0x10>)
 8000d16:	f7ff ff63 	bl	8000be0 <I2Cx_Init>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000055c 	.word	0x2000055c

08000d24 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	4613      	mov	r3, r2
 8000d34:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	79f9      	ldrb	r1, [r7, #7]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	1d7b      	adds	r3, r7, #5
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <SENSOR_IO_Write+0x30>)
 8000d48:	f7ff ffa5 	bl	8000c96 <I2Cx_WriteMultiple>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000055c 	.word	0x2000055c

08000d58 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	79f9      	ldrb	r1, [r7, #7]
 8000d72:	2301      	movs	r3, #1
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f107 030f 	add.w	r3, r7, #15
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <SENSOR_IO_Read+0x38>)
 8000d80:	f7ff ff5c 	bl	8000c3c <I2Cx_ReadMultiple>

  return read_value;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000055c 	.word	0x2000055c

08000d94 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	603a      	str	r2, [r7, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	460b      	mov	r3, r1
 8000da4:	71bb      	strb	r3, [r7, #6]
 8000da6:	4613      	mov	r3, r2
 8000da8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	79f9      	ldrb	r1, [r7, #7]
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <SENSOR_IO_ReadMultiple+0x38>)
 8000dbc:	f7ff ff3e 	bl	8000c3c <I2Cx_ReadMultiple>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000055c 	.word	0x2000055c

08000dd0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <BSP_GYRO_Init+0x7c>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4798      	blx	r3
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b6a      	cmp	r3, #106	@ 0x6a
 8000de8:	d002      	beq.n	8000df0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e028      	b.n	8000e42 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8000df0:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <BSP_GYRO_Init+0x80>)
 8000df2:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <BSP_GYRO_Init+0x7c>)
 8000df4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8000dfa:	2330      	movs	r3, #48	@ 0x30
 8000dfc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000e06:	2340      	movs	r3, #64	@ 0x40
 8000e08:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8000e0e:	230c      	movs	r3, #12
 8000e10:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8000e12:	7aba      	ldrb	r2, [r7, #10]
 8000e14:	797b      	ldrb	r3, [r7, #5]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000e1c:	7a3b      	ldrb	r3, [r7, #8]
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <BSP_GYRO_Init+0x80>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	89ba      	ldrh	r2, [r7, #12]
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4798      	blx	r3
    
    ret = GYRO_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000054 	.word	0x20000054
 8000e50:	200005b0 	.word	0x200005b0

08000e54 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <BSP_GYRO_GetXYZ+0x2c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d009      	beq.n	8000e78 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <BSP_GYRO_GetXYZ+0x2c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d004      	beq.n	8000e78 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <BSP_GYRO_GetXYZ+0x2c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	4798      	blx	r3
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200005b0 	.word	0x200005b0

08000e84 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <BSP_MAGNETO_Init+0x50>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	4798      	blx	r3
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b3d      	cmp	r3, #61	@ 0x3d
 8000e98:	d002      	beq.n	8000ea0 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	e013      	b.n	8000ec8 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <BSP_MAGNETO_Init+0x54>)
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed4 <BSP_MAGNETO_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8000ea6:	2358      	movs	r3, #88	@ 0x58
 8000ea8:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8000eb6:	2340      	movs	r3, #64	@ 0x40
 8000eb8:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <BSP_MAGNETO_Init+0x54>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	463a      	mov	r2, r7
 8000ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec6:	4798      	blx	r3
  } 

  return ret;  
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	200005b4 	.word	0x200005b4

08000edc <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <BSP_MAGNETO_GetXYZ+0x2c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	4798      	blx	r3
    }
  }
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200005b4 	.word	0x200005b4

08000f0c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <BSP_PSENSOR_Init+0x38>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	20ba      	movs	r0, #186	@ 0xba
 8000f18:	4798      	blx	r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2bb1      	cmp	r3, #177	@ 0xb1
 8000f1e:	d002      	beq.n	8000f26 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e009      	b.n	8000f3a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <BSP_PSENSOR_Init+0x3c>)
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <BSP_PSENSOR_Init+0x38>)
 8000f2a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <BSP_PSENSOR_Init+0x3c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	20ba      	movs	r0, #186	@ 0xba
 8000f34:	4798      	blx	r3
    ret = PSENSOR_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000048 	.word	0x20000048
 8000f48:	200005b8 	.word	0x200005b8

08000f4c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <BSP_PSENSOR_ReadPressure+0x18>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	20ba      	movs	r0, #186	@ 0xba
 8000f58:	4798      	blx	r3
 8000f5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200005b8 	.word	0x200005b8

08000f68 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <BSP_TSENSOR_Init+0x30>)
 8000f74:	4a09      	ldr	r2, [pc, #36]	@ (8000f9c <BSP_TSENSOR_Init+0x34>)
 8000f76:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000f78:	f7ff feca 	bl	8000d10 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <BSP_TSENSOR_Init+0x30>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2100      	movs	r1, #0
 8000f84:	20be      	movs	r0, #190	@ 0xbe
 8000f86:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200005bc 	.word	0x200005bc
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <BSP_TSENSOR_ReadTemp+0x18>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	20be      	movs	r0, #190	@ 0xbe
 8000fac:	4798      	blx	r3
 8000fae:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200005bc 	.word	0x200005bc

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	f06f 0001 	mvn.w	r0, #1
 8000ffa:	f000 fe65 	bl	8001cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ac      	sub	sp, #176	@ 0xb0
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2288      	movs	r2, #136	@ 0x88
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f005 fe09 	bl	8006c44 <memset>
  if(hi2c->Instance==I2C2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <HAL_I2C_MspInit+0xb0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d13b      	bne.n	80010b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fe1d 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001054:	f7ff fd66 	bl	8000b24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_I2C_MspInit+0xb4>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <HAL_I2C_MspInit+0xb4>)
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_I2C_MspInit+0xb4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001070:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001078:	2312      	movs	r3, #18
 800107a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800108a:	2304      	movs	r3, #4
 800108c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001094:	4619      	mov	r1, r3
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <HAL_I2C_MspInit+0xb8>)
 8001098:	f000 fe40 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_I2C_MspInit+0xb4>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_I2C_MspInit+0xb4>)
 80010a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_I2C_MspInit+0xb4>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	37b0      	adds	r7, #176	@ 0xb0
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005800 	.word	0x40005800
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400

080010c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_I2C_MspDeInit+0x3c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10f      	bne.n	80010fa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_I2C_MspDeInit+0x40>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_I2C_MspDeInit+0x40>)
 80010e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80010e4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80010e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <HAL_I2C_MspDeInit+0x44>)
 80010ec:	f000 ffc0 	bl	8002070 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80010f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <HAL_I2C_MspDeInit+0x44>)
 80010f6:	f000 ffbb 	bl	8002070 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40005800 	.word	0x40005800
 8001108:	40021000 	.word	0x40021000
 800110c:	48000400 	.word	0x48000400

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0ac      	sub	sp, #176	@ 0xb0
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2288      	movs	r2, #136	@ 0x88
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f005 fd87 	bl	8006c44 <memset>
  if(huart->Instance==USART1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <HAL_UART_MspInit+0xb0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d13a      	bne.n	80011b6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fd9b 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001158:	f7ff fce4 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001160:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001166:	6613      	str	r3, [r2, #96]	@ 0x60
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 800116a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800118c:	23c0      	movs	r3, #192	@ 0xc0
 800118e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a4:	2307      	movs	r3, #7
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_UART_MspInit+0xb8>)
 80011b2:	f000 fdb3 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011b6:	bf00      	nop
 80011b8:	37b0      	adds	r7, #176	@ 0xb0
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	@ 0x38
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_InitTick+0xe0>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	4a33      	ldr	r2, [pc, #204]	@ (80012ac <HAL_InitTick+0xe0>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_InitTick+0xe0>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f2:	f107 0210 	add.w	r2, r7, #16
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fcb1 	bl	8003b64 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800120c:	f002 fc7e 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8001210:	6378      	str	r0, [r7, #52]	@ 0x34
 8001212:	e004      	b.n	800121e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001214:	f002 fc7a 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8001218:	4603      	mov	r3, r0
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001220:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <HAL_InitTick+0xe4>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	3b01      	subs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <HAL_InitTick+0xe8>)
 800122e:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <HAL_InitTick+0xec>)
 8001230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_InitTick+0xe8>)
 8001234:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001238:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800123a:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <HAL_InitTick+0xe8>)
 800123c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800123e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001240:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <HAL_InitTick+0xe8>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_InitTick+0xe8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_InitTick+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001252:	4818      	ldr	r0, [pc, #96]	@ (80012b4 <HAL_InitTick+0xe8>)
 8001254:	f003 f9d4 	bl	8004600 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800125e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11b      	bne.n	800129e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001266:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <HAL_InitTick+0xe8>)
 8001268:	f003 fa2c 	bl	80046c4 <HAL_TIM_Base_Start_IT>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001272:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001276:	2b00      	cmp	r3, #0
 8001278:	d111      	bne.n	800129e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800127a:	2036      	movs	r0, #54	@ 0x36
 800127c:	f000 fd40 	bl	8001d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	d808      	bhi.n	8001298 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001286:	2200      	movs	r2, #0
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	2036      	movs	r0, #54	@ 0x36
 800128c:	f000 fd1c 	bl	8001cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001290:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <HAL_InitTick+0xf0>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e002      	b.n	800129e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800129e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3738      	adds	r7, #56	@ 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	200005c0 	.word	0x200005c0
 80012b8:	40001000 	.word	0x40001000
 80012bc:	20000088 	.word	0x20000088

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <NMI_Handler+0x4>

080012c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <MemManage_Handler+0x4>

080012d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <TIM6_DAC_IRQHandler+0x10>)
 80012fe:	f003 fa51 	bl	80047a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200005c0 	.word	0x200005c0

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f005 fce0 	bl	8006d00 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20018000 	.word	0x20018000
 800136c:	00000400 	.word	0x00000400
 8001370:	2000060c 	.word	0x2000060c
 8001374:	20001468 	.word	0x20001468

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff ffea 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <LoopForever+0xe>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	@ (80013e8 <LoopForever+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f005 fc9f 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ce:	f7ff f8e1 	bl	8000594 <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80013e0:	08007790 	.word	0x08007790
  ldr r2, =_sbss
 80013e4:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80013e8:	20001468 	.word	0x20001468

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>

080013ee <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	6039      	str	r1, [r7, #0]
 80013f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2120      	movs	r1, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fca9 	bl	8000d58 <SENSOR_IO_Read>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f023 0303 	bic.w	r3, r3, #3
 8001420:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001430:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	2120      	movs	r1, #32
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc72 	bl	8000d24 <SENSOR_IO_Write>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	2302      	movs	r3, #2
 800145c:	21b2      	movs	r1, #178	@ 0xb2
 800145e:	f7ff fc99 	bl	8000d94 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2135      	movs	r1, #53	@ 0x35
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fc75 	bl	8000d58 <SENSOR_IO_Read>
 800146e:	4603      	mov	r3, r0
 8001470:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21b      	sxth	r3, r3
 8001478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800147c:	b21a      	sxth	r2, r3
 800147e:	7a3b      	ldrb	r3, [r7, #8]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001486:	7ffb      	ldrb	r3, [r7, #31]
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	b21b      	sxth	r3, r3
 800148c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001490:	b21a      	sxth	r2, r3
 8001492:	7a7b      	ldrb	r3, [r7, #9]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800149a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800149e:	10db      	asrs	r3, r3, #3
 80014a0:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80014a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014a6:	10db      	asrs	r3, r3, #3
 80014a8:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	b2d8      	uxtb	r0, r3
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	2304      	movs	r3, #4
 80014b4:	21bc      	movs	r1, #188	@ 0xbc
 80014b6:	f7ff fc6d 	bl	8000d94 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80014ba:	7a7b      	ldrb	r3, [r7, #9]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7a3b      	ldrb	r3, [r7, #8]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	7abb      	ldrb	r3, [r7, #10]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	b2d8      	uxtb	r0, r3
 80014da:	f107 0208 	add.w	r2, r7, #8
 80014de:	2302      	movs	r3, #2
 80014e0:	21aa      	movs	r1, #170	@ 0xaa
 80014e2:	f7ff fc57 	bl	8000d94 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80014e6:	7a7b      	ldrb	r3, [r7, #9]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7a3b      	ldrb	r3, [r7, #8]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80014f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800150a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001518:	ee67 6a27 	vmul.f32	s13, s14, s15
 800151c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001520:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001532:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	ee07 3a90 	vmov	s15, r3
}
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	463b      	mov	r3, r7
 800155e:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001562:	783b      	ldrb	r3, [r7, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	2120      	movs	r1, #32
 8001568:	203c      	movs	r0, #60	@ 0x3c
 800156a:	f7ff fbdb 	bl	8000d24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800156e:	787b      	ldrb	r3, [r7, #1]
 8001570:	461a      	mov	r2, r3
 8001572:	2121      	movs	r1, #33	@ 0x21
 8001574:	203c      	movs	r0, #60	@ 0x3c
 8001576:	f7ff fbd5 	bl	8000d24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800157a:	78bb      	ldrb	r3, [r7, #2]
 800157c:	461a      	mov	r2, r3
 800157e:	2122      	movs	r1, #34	@ 0x22
 8001580:	203c      	movs	r0, #60	@ 0x3c
 8001582:	f7ff fbcf 	bl	8000d24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	461a      	mov	r2, r3
 800158a:	2123      	movs	r1, #35	@ 0x23
 800158c:	203c      	movs	r0, #60	@ 0x3c
 800158e:	f7ff fbc9 	bl	8000d24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001592:	793b      	ldrb	r3, [r7, #4]
 8001594:	461a      	mov	r2, r3
 8001596:	2124      	movs	r1, #36	@ 0x24
 8001598:	203c      	movs	r0, #60	@ 0x3c
 800159a:	f7ff fbc3 	bl	8000d24 <SENSOR_IO_Write>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015ac:	2300      	movs	r3, #0
 80015ae:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80015b0:	2122      	movs	r1, #34	@ 0x22
 80015b2:	203c      	movs	r0, #60	@ 0x3c
 80015b4:	f7ff fbd0 	bl	8000d58 <SENSOR_IO_Read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f023 0303 	bic.w	r3, r3, #3
 80015c2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f043 0303 	orr.w	r3, r3, #3
 80015ca:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	461a      	mov	r2, r3
 80015d0:	2122      	movs	r1, #34	@ 0x22
 80015d2:	203c      	movs	r0, #60	@ 0x3c
 80015d4:	f7ff fba6 	bl	8000d24 <SENSOR_IO_Write>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80015e4:	f7ff fb94 	bl	8000d10 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80015e8:	210f      	movs	r1, #15
 80015ea:	203c      	movs	r0, #60	@ 0x3c
 80015ec:	f7ff fbb4 	bl	8000d58 <SENSOR_IO_Read>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001604:	2122      	movs	r1, #34	@ 0x22
 8001606:	203c      	movs	r0, #60	@ 0x3c
 8001608:	f7ff fba6 	bl	8000d58 <SENSOR_IO_Read>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f023 0320 	bic.w	r3, r3, #32
 8001616:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	461a      	mov	r2, r3
 800162a:	2122      	movs	r1, #34	@ 0x22
 800162c:	203c      	movs	r0, #60	@ 0x3c
 800162e:	f7ff fb79 	bl	8000d24 <SENSOR_IO_Write>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001644:	2300      	movs	r3, #0
 8001646:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001652:	2121      	movs	r1, #33	@ 0x21
 8001654:	203c      	movs	r0, #60	@ 0x3c
 8001656:	f7ff fb7f 	bl	8000d58 <SENSOR_IO_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	2306      	movs	r3, #6
 8001664:	21a8      	movs	r1, #168	@ 0xa8
 8001666:	203c      	movs	r0, #60	@ 0x3c
 8001668:	f7ff fb94 	bl	8000d94 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800166c:	2300      	movs	r3, #0
 800166e:	77fb      	strb	r3, [r7, #31]
 8001670:	e01a      	b.n	80016a8 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001672:	7ffb      	ldrb	r3, [r7, #31]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	3301      	adds	r3, #1
 8001678:	3320      	adds	r3, #32
 800167a:	443b      	add	r3, r7
 800167c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	7ffa      	ldrb	r2, [r7, #31]
 8001686:	0052      	lsls	r2, r2, #1
 8001688:	3220      	adds	r2, #32
 800168a:	443a      	add	r2, r7
 800168c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001690:	4413      	add	r3, r2
 8001692:	b29a      	uxth	r2, r3
 8001694:	7ffb      	ldrb	r3, [r7, #31]
 8001696:	b212      	sxth	r2, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	3320      	adds	r3, #32
 800169c:	443b      	add	r3, r7
 800169e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	3301      	adds	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d9e1      	bls.n	8001672 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80016b4:	2b60      	cmp	r3, #96	@ 0x60
 80016b6:	d013      	beq.n	80016e0 <LIS3MDL_MagReadXYZ+0xa4>
 80016b8:	2b60      	cmp	r3, #96	@ 0x60
 80016ba:	dc14      	bgt.n	80016e6 <LIS3MDL_MagReadXYZ+0xaa>
 80016bc:	2b40      	cmp	r3, #64	@ 0x40
 80016be:	d00c      	beq.n	80016da <LIS3MDL_MagReadXYZ+0x9e>
 80016c0:	2b40      	cmp	r3, #64	@ 0x40
 80016c2:	dc10      	bgt.n	80016e6 <LIS3MDL_MagReadXYZ+0xaa>
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <LIS3MDL_MagReadXYZ+0x92>
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d003      	beq.n	80016d4 <LIS3MDL_MagReadXYZ+0x98>
 80016cc:	e00b      	b.n	80016e6 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <LIS3MDL_MagReadXYZ+0xf8>)
 80016d0:	61bb      	str	r3, [r7, #24]
    break;
 80016d2:	e008      	b.n	80016e6 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <LIS3MDL_MagReadXYZ+0xfc>)
 80016d6:	61bb      	str	r3, [r7, #24]
    break;
 80016d8:	e005      	b.n	80016e6 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <LIS3MDL_MagReadXYZ+0x100>)
 80016dc:	61bb      	str	r3, [r7, #24]
    break;
 80016de:	e002      	b.n	80016e6 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <LIS3MDL_MagReadXYZ+0x104>)
 80016e2:	61bb      	str	r3, [r7, #24]
    break;    
 80016e4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	77fb      	strb	r3, [r7, #31]
 80016ea:	e01a      	b.n	8001722 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	3320      	adds	r3, #32
 80016f2:	443b      	add	r3, r7
 80016f4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001700:	edd7 7a06 	vldr	s15, [r7, #24]
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001714:	ee17 2a90 	vmov	r2, s15
 8001718:	b212      	sxth	r2, r2
 800171a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	3301      	adds	r3, #1
 8001720:	77fb      	strb	r3, [r7, #31]
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d9e1      	bls.n	80016ec <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	3e0f5c29 	.word	0x3e0f5c29
 8001738:	3e947ae1 	.word	0x3e947ae1
 800173c:	3edc28f6 	.word	0x3edc28f6
 8001740:	3f147ae1 	.word	0x3f147ae1

08001744 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f879 	bl	8001848 <LPS22HB_Init>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800176c:	f7ff fad0 	bl	8000d10 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	210f      	movs	r1, #15
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff faee 	bl	8000d58 <SENSOR_IO_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	74fb      	strb	r3, [r7, #19]
 800179e:	e013      	b.n	80017c8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7cfb      	ldrb	r3, [r7, #19]
 80017a6:	3328      	adds	r3, #40	@ 0x28
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	7cfc      	ldrb	r4, [r7, #19]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f7ff fad2 	bl	8000d58 <SENSOR_IO_Read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	f104 0318 	add.w	r3, r4, #24
 80017bc:	443b      	add	r3, r7
 80017be:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80017c2:	7cfb      	ldrb	r3, [r7, #19]
 80017c4:	3301      	adds	r3, #1
 80017c6:	74fb      	strb	r3, [r7, #19]
 80017c8:	7cfb      	ldrb	r3, [r7, #19]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d9e8      	bls.n	80017a0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	74fb      	strb	r3, [r7, #19]
 80017d2:	e00f      	b.n	80017f4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	3318      	adds	r3, #24
 80017d8:	443b      	add	r3, r7
 80017da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017de:	461a      	mov	r2, r3
 80017e0:	7cfb      	ldrb	r3, [r7, #19]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80017ee:	7cfb      	ldrb	r3, [r7, #19]
 80017f0:	3301      	adds	r3, #1
 80017f2:	74fb      	strb	r3, [r7, #19]
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d9ec      	bls.n	80017d4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800180a:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2264      	movs	r2, #100	@ 0x64
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	da01      	bge.n	8001820 <LPS22HB_P_ReadPressure+0x94>
 800181c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001820:	131b      	asrs	r3, r3, #12
 8001822:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001844 <LPS22HB_P_ReadPressure+0xb8>
 8001832:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001836:	eef0 7a66 	vmov.f32	s15, s13
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	42c80000 	.word	0x42c80000

08001848 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	211a      	movs	r1, #26
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fa7d 	bl	8000d58 <SENSOR_IO_Read>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	211a      	movs	r1, #26
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa52 	bl	8000d24 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2110      	movs	r1, #16
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa66 	bl	8000d58 <SENSOR_IO_Read>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001896:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800189e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	f023 0302 	bic.w	r3, r3, #2
 80018a6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	2110      	movs	r1, #16
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa33 	bl	8000d24 <SENSOR_IO_Write>
}  
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018d4:	2111      	movs	r1, #17
 80018d6:	20d4      	movs	r0, #212	@ 0xd4
 80018d8:	f7ff fa3e 	bl	8000d58 <SENSOR_IO_Read>
 80018dc:	4603      	mov	r3, r0
 80018de:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80018ec:	7bba      	ldrb	r2, [r7, #14]
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	461a      	mov	r2, r3
 80018f8:	2111      	movs	r1, #17
 80018fa:	20d4      	movs	r0, #212	@ 0xd4
 80018fc:	f7ff fa12 	bl	8000d24 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001900:	2112      	movs	r1, #18
 8001902:	20d4      	movs	r0, #212	@ 0xd4
 8001904:	f7ff fa28 	bl	8000d58 <SENSOR_IO_Read>
 8001908:	4603      	mov	r3, r0
 800190a:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	b29b      	uxth	r3, r3
 8001912:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001914:	7bbb      	ldrb	r3, [r7, #14]
 8001916:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800191a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800191c:	7bba      	ldrb	r2, [r7, #14]
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4313      	orrs	r3, r2
 8001922:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	461a      	mov	r2, r3
 8001928:	2112      	movs	r1, #18
 800192a:	20d4      	movs	r0, #212	@ 0xd4
 800192c:	f7ff f9fa 	bl	8000d24 <SENSOR_IO_Write>
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001942:	2111      	movs	r1, #17
 8001944:	20d4      	movs	r0, #212	@ 0xd4
 8001946:	f7ff fa07 	bl	8000d58 <SENSOR_IO_Read>
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	461a      	mov	r2, r3
 800195a:	2111      	movs	r1, #17
 800195c:	20d4      	movs	r0, #212	@ 0xd4
 800195e:	f7ff f9e1 	bl	8000d24 <SENSOR_IO_Write>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800196e:	f7ff f9cf 	bl	8000d10 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001972:	210f      	movs	r1, #15
 8001974:	20d4      	movs	r0, #212	@ 0xd4
 8001976:	f7ff f9ef 	bl	8000d58 <SENSOR_IO_Read>
 800197a:	4603      	mov	r3, r0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}

08001980 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800198e:	2116      	movs	r1, #22
 8001990:	20d4      	movs	r0, #212	@ 0xd4
 8001992:	f7ff f9e1 	bl	8000d58 <SENSOR_IO_Read>
 8001996:	4603      	mov	r3, r0
 8001998:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019a0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ae:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	461a      	mov	r2, r3
 80019b4:	2116      	movs	r1, #22
 80019b6:	20d4      	movs	r0, #212	@ 0xd4
 80019b8:	f7ff f9b4 	bl	8000d24 <SENSOR_IO_Write>
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80019da:	2111      	movs	r1, #17
 80019dc:	20d4      	movs	r0, #212	@ 0xd4
 80019de:	f7ff f9bb 	bl	8000d58 <SENSOR_IO_Read>
 80019e2:	4603      	mov	r3, r0
 80019e4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80019e6:	f107 0208 	add.w	r2, r7, #8
 80019ea:	2306      	movs	r3, #6
 80019ec:	2122      	movs	r1, #34	@ 0x22
 80019ee:	20d4      	movs	r0, #212	@ 0xd4
 80019f0:	f7ff f9d0 	bl	8000d94 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	77fb      	strb	r3, [r7, #31]
 80019f8:	e01a      	b.n	8001a30 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	3301      	adds	r3, #1
 8001a00:	3320      	adds	r3, #32
 8001a02:	443b      	add	r3, r7
 8001a04:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	7ffa      	ldrb	r2, [r7, #31]
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	3220      	adds	r2, #32
 8001a12:	443a      	add	r2, r7
 8001a14:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	7ffb      	ldrb	r3, [r7, #31]
 8001a1e:	b212      	sxth	r2, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	3320      	adds	r3, #32
 8001a24:	443b      	add	r3, r7
 8001a26:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d9e1      	bls.n	80019fa <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d829      	bhi.n	8001a94 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8001a40:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a7d 	.word	0x08001a7d
 8001a4c:	08001a95 	.word	0x08001a95
 8001a50:	08001a95 	.word	0x08001a95
 8001a54:	08001a95 	.word	0x08001a95
 8001a58:	08001a83 	.word	0x08001a83
 8001a5c:	08001a95 	.word	0x08001a95
 8001a60:	08001a95 	.word	0x08001a95
 8001a64:	08001a95 	.word	0x08001a95
 8001a68:	08001a89 	.word	0x08001a89
 8001a6c:	08001a95 	.word	0x08001a95
 8001a70:	08001a95 	.word	0x08001a95
 8001a74:	08001a95 	.word	0x08001a95
 8001a78:	08001a8f 	.word	0x08001a8f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8001a7e:	61bb      	str	r3, [r7, #24]
    break;
 8001a80:	e008      	b.n	8001a94 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001a84:	61bb      	str	r3, [r7, #24]
    break;
 8001a86:	e005      	b.n	8001a94 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001a88:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001a8a:	61bb      	str	r3, [r7, #24]
    break;
 8001a8c:	e002      	b.n	8001a94 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001a90:	61bb      	str	r3, [r7, #24]
    break;    
 8001a92:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
 8001a98:	e016      	b.n	8001ac8 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	3320      	adds	r3, #32
 8001aa0:	443b      	add	r3, r7
 8001aa2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	77fb      	strb	r3, [r7, #31]
 8001ac8:	7ffb      	ldrb	r3, [r7, #31]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d9e5      	bls.n	8001a9a <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	410c0000 	.word	0x410c0000
 8001adc:	418c0000 	.word	0x418c0000
 8001ae0:	420c0000 	.word	0x420c0000
 8001ae4:	428c0000 	.word	0x428c0000

08001ae8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af2:	2003      	movs	r0, #3
 8001af4:	f000 f8dd 	bl	8001cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af8:	200f      	movs	r0, #15
 8001afa:	f7ff fb67 	bl	80011cc <HAL_InitTick>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	e001      	b.n	8001b0e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0a:	f7ff fa57 	bl	8000fbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000008c 	.word	0x2000008c
 8001b3c:	20000610 	.word	0x20000610

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000610 	.word	0x20000610

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	@ (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff4c 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cda:	f7ff ff61 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001cde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	6978      	ldr	r0, [r7, #20]
 8001ce6:	f7ff ffb1 	bl	8001c4c <NVIC_EncodePriority>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff80 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff54 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e17f      	b.n	800202c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8171 	beq.w	8002026 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x40>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d118      	bne.n	8001dfc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80ac 	beq.w	8002026 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	4b5f      	ldr	r3, [pc, #380]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eda:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee6:	4a5a      	ldr	r2, [pc, #360]	@ (8002050 <HAL_GPIO_Init+0x334>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x242>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	@ (8002054 <HAL_GPIO_Init+0x338>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x23e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002058 <HAL_GPIO_Init+0x33c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x23a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <HAL_GPIO_Init+0x340>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x236>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002060 <HAL_GPIO_Init+0x344>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x232>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_GPIO_Init+0x348>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_GPIO_Init+0x34c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f70:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_GPIO_Init+0x334>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa2:	4a32      	ldr	r2, [pc, #200]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fcc:	4a27      	ldr	r2, [pc, #156]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002020:	4a12      	ldr	r2, [pc, #72]	@ (800206c <HAL_GPIO_Init+0x350>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae78 	bne.w	8001d2c <HAL_GPIO_Init+0x10>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	48000400 	.word	0x48000400
 8002058:	48000800 	.word	0x48000800
 800205c:	48000c00 	.word	0x48000c00
 8002060:	48001000 	.word	0x48001000
 8002064:	48001400 	.word	0x48001400
 8002068:	48001800 	.word	0x48001800
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800207e:	e0cd      	b.n	800221c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002080:	2201      	movs	r2, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80c0 	beq.w	8002216 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002096:	4a68      	ldr	r2, [pc, #416]	@ (8002238 <HAL_GPIO_DeInit+0x1c8>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020be:	d025      	beq.n	800210c <HAL_GPIO_DeInit+0x9c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a5e      	ldr	r2, [pc, #376]	@ (800223c <HAL_GPIO_DeInit+0x1cc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d01f      	beq.n	8002108 <HAL_GPIO_DeInit+0x98>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <HAL_GPIO_DeInit+0x1d0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d019      	beq.n	8002104 <HAL_GPIO_DeInit+0x94>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002244 <HAL_GPIO_DeInit+0x1d4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_GPIO_DeInit+0x90>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a5b      	ldr	r2, [pc, #364]	@ (8002248 <HAL_GPIO_DeInit+0x1d8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_GPIO_DeInit+0x8c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <HAL_GPIO_DeInit+0x1dc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_DeInit+0x88>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a59      	ldr	r2, [pc, #356]	@ (8002250 <HAL_GPIO_DeInit+0x1e0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_GPIO_DeInit+0x84>
 80020f0:	2306      	movs	r3, #6
 80020f2:	e00c      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 80020f4:	2307      	movs	r3, #7
 80020f6:	e00a      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 80020f8:	2305      	movs	r3, #5
 80020fa:	e008      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e006      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 8002100:	2303      	movs	r3, #3
 8002102:	e004      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 8002104:	2302      	movs	r3, #2
 8002106:	e002      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_GPIO_DeInit+0x9e>
 800210c:	2300      	movs	r3, #0
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	4093      	lsls	r3, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	429a      	cmp	r2, r3
 800211c:	d132      	bne.n	8002184 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800211e:	4b4d      	ldr	r3, [pc, #308]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	494b      	ldr	r1, [pc, #300]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 8002128:	4013      	ands	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800212c:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	4947      	ldr	r1, [pc, #284]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 8002136:	4013      	ands	r3, r2
 8002138:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800213a:	4b46      	ldr	r3, [pc, #280]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	4944      	ldr	r1, [pc, #272]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 8002144:	4013      	ands	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002148:	4b42      	ldr	r3, [pc, #264]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	4940      	ldr	r1, [pc, #256]	@ (8002254 <HAL_GPIO_DeInit+0x1e4>)
 8002152:	4013      	ands	r3, r2
 8002154:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002166:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <HAL_GPIO_DeInit+0x1c8>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43da      	mvns	r2, r3
 8002176:	4830      	ldr	r0, [pc, #192]	@ (8002238 <HAL_GPIO_DeInit+0x1c8>)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	400a      	ands	r2, r1
 800217e:	3302      	adds	r3, #2
 8002180:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2103      	movs	r1, #3
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	08d2      	lsrs	r2, r2, #3
 80021b8:	4019      	ands	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2103      	movs	r1, #3
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	2101      	movs	r1, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2103      	movs	r1, #3
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	401a      	ands	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002206:	2101      	movs	r1, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f af2b 	bne.w	8002080 <HAL_GPIO_DeInit+0x10>
  }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40010000 	.word	0x40010000
 800223c:	48000400 	.word	0x48000400
 8002240:	48000800 	.word	0x48000800
 8002244:	48000c00 	.word	0x48000c00
 8002248:	48001000 	.word	0x48001000
 800224c:	48001400 	.word	0x48001400
 8002250:	48001800 	.word	0x48001800
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e001      	b.n	800227a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e08d      	b.n	80023e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fe94 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	@ 0x24
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002308:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002318:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e006      	b.n	8002340 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800233e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d108      	bne.n	800235a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	e007      	b.n	800236a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800237c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800238c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69d9      	ldr	r1, [r3, #28]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e021      	b.n	8002444 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7fe fe55 	bl	80010c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	f040 80f9 	bne.w	8002666 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_I2C_Mem_Write+0x34>
 800247a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0ed      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_I2C_Mem_Write+0x4e>
 8002496:	2302      	movs	r3, #2
 8002498:	e0e6      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024a2:	f7ff fb4d 	bl	8001b40 <HAL_GetTick>
 80024a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2319      	movs	r3, #25
 80024ae:	2201      	movs	r2, #1
 80024b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fac3 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0d1      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2221      	movs	r2, #33	@ 0x21
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2240      	movs	r2, #64	@ 0x40
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ec:	88f8      	ldrh	r0, [r7, #6]
 80024ee:	893a      	ldrh	r2, [r7, #8]
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4603      	mov	r3, r0
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f9d3 	bl	80028a8 <I2C_RequestMemoryWrite>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0a9      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	2bff      	cmp	r3, #255	@ 0xff
 800251c:	d90e      	bls.n	800253c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	22ff      	movs	r2, #255	@ 0xff
 8002522:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	b2da      	uxtb	r2, r3
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	2300      	movs	r3, #0
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fc47 	bl	8002dc8 <I2C_TransferConfig>
 800253a:	e00f      	b.n	800255c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254a:	b2da      	uxtb	r2, r3
 800254c:	8979      	ldrh	r1, [r7, #10]
 800254e:	2300      	movs	r3, #0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fc36 	bl	8002dc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fac6 	bl	8002af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e07b      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d034      	beq.n	8002614 <HAL_I2C_Mem_Write+0x1c8>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d130      	bne.n	8002614 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b8:	2200      	movs	r2, #0
 80025ba:	2180      	movs	r1, #128	@ 0x80
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa3f 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e04d      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2bff      	cmp	r3, #255	@ 0xff
 80025d4:	d90e      	bls.n	80025f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	22ff      	movs	r2, #255	@ 0xff
 80025da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	2300      	movs	r3, #0
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fbeb 	bl	8002dc8 <I2C_TransferConfig>
 80025f2:	e00f      	b.n	8002614 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	b2da      	uxtb	r2, r3
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	2300      	movs	r3, #0
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fbda 	bl	8002dc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d19e      	bne.n	800255c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 faac 	bl	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e01a      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2220      	movs	r2, #32
 8002638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_I2C_Mem_Write+0x224>)
 8002646:	400b      	ands	r3, r1
 8002648:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	f040 80fd 	bne.w	8002896 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x34>
 80026a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0f1      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x4e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0ea      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ca:	f7ff fa39 	bl	8001b40 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f9af 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d5      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2222      	movs	r2, #34	@ 0x22
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800270c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002714:	88f8      	ldrh	r0, [r7, #6]
 8002716:	893a      	ldrh	r2, [r7, #8]
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4603      	mov	r3, r0
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f913 	bl	8002950 <I2C_RequestMemoryRead>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0ad      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2bff      	cmp	r3, #255	@ 0xff
 8002744:	d90e      	bls.n	8002764 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	b2da      	uxtb	r2, r3
 8002752:	8979      	ldrh	r1, [r7, #10]
 8002754:	4b52      	ldr	r3, [pc, #328]	@ (80028a0 <HAL_I2C_Mem_Read+0x22c>)
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fb33 	bl	8002dc8 <I2C_TransferConfig>
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	b2da      	uxtb	r2, r3
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <HAL_I2C_Mem_Read+0x22c>)
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fb22 	bl	8002dc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	2200      	movs	r2, #0
 800278c:	2104      	movs	r1, #4
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f956 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07c      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d034      	beq.n	8002844 <HAL_I2C_Mem_Read+0x1d0>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d130      	bne.n	8002844 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f927 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e04d      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2bff      	cmp	r3, #255	@ 0xff
 8002804:	d90e      	bls.n	8002824 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002810:	b2da      	uxtb	r2, r3
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fad3 	bl	8002dc8 <I2C_TransferConfig>
 8002822:	e00f      	b.n	8002844 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fac2 	bl	8002dc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d19a      	bne.n	8002784 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f994 	bl	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e01a      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2220      	movs	r2, #32
 8002868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_I2C_Mem_Read+0x230>)
 8002876:	400b      	ands	r3, r1
 8002878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002896:	2302      	movs	r3, #2
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	80002400 	.word	0x80002400
 80028a4:	fe00e800 	.word	0xfe00e800

080028a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	4b20      	ldr	r3, [pc, #128]	@ (800294c <I2C_RequestMemoryWrite+0xa4>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fa79 	bl	8002dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	69b9      	ldr	r1, [r7, #24]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f909 	bl	8002af2 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02c      	b.n	8002944 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80028fa:	e015      	b.n	8002928 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29b      	uxth	r3, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	69b9      	ldr	r1, [r7, #24]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f8ef 	bl	8002af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e012      	b.n	8002944 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800291e:	893b      	ldrh	r3, [r7, #8]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2200      	movs	r2, #0
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f884 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	80002000 	.word	0x80002000

08002950 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	8979      	ldrh	r1, [r7, #10]
 8002970:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <I2C_RequestMemoryRead+0xa4>)
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa26 	bl	8002dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f8b6 	bl	8002af2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e02c      	b.n	80029ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d105      	bne.n	80029a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002996:	893b      	ldrh	r3, [r7, #8]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
 80029a0:	e015      	b.n	80029ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029a2:	893b      	ldrh	r3, [r7, #8]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f89c 	bl	8002af2 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e012      	b.n	80029ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c4:	893b      	ldrh	r3, [r7, #8]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2140      	movs	r1, #64	@ 0x40
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f831 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	80002000 	.word	0x80002000

080029f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d103      	bne.n	8002a16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	619a      	str	r2, [r3, #24]
  }
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	e03b      	b.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f8d6 	bl	8002c08 <I2C_IsErrorOccurred>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e041      	b.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a6c:	d02d      	beq.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7ff f867 	bl	8001b40 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d122      	bne.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d113      	bne.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00f      	b.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d0b4      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002afe:	e033      	b.n	8002b68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f87f 	bl	8002c08 <I2C_IsErrorOccurred>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e031      	b.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b1a:	d025      	beq.n	8002b68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1c:	f7ff f810 	bl	8001b40 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d302      	bcc.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11a      	bne.n	8002b68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d013      	beq.n	8002b68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d1c4      	bne.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b8c:	e02f      	b.n	8002bee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f838 	bl	8002c08 <I2C_IsErrorOccurred>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02d      	b.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fe ffcd 	bl	8001b40 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11a      	bne.n	8002bee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d013      	beq.n	8002bee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e007      	b.n	8002bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d1c8      	bne.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d068      	beq.n	8002d06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c3c:	e049      	b.n	8002cd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c44:	d045      	beq.n	8002cd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c46:	f7fe ff7b 	bl	8001b40 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d302      	bcc.n	8002c5c <I2C_IsErrorOccurred+0x54>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d13a      	bne.n	8002cd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c7e:	d121      	bne.n	8002cc4 <I2C_IsErrorOccurred+0xbc>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c86:	d01d      	beq.n	8002cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d01a      	beq.n	8002cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c9e:	f7fe ff4f 	bl	8001b40 <HAL_GetTick>
 8002ca2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca4:	e00e      	b.n	8002cc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ca6:	f7fe ff4b 	bl	8001b40 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b19      	cmp	r3, #25
 8002cb2:	d907      	bls.n	8002cc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f043 0320 	orr.w	r3, r3, #32
 8002cba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cc2:	e006      	b.n	8002cd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d1e9      	bne.n	8002ca6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d003      	beq.n	8002ce8 <I2C_IsErrorOccurred+0xe0>
 8002ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0aa      	beq.n	8002c3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fe3b 	bl	80029f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <I2C_IsErrorOccurred+0x1bc>)
 8002d8e:	400b      	ands	r3, r1
 8002d90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	fe00e800 	.word	0xfe00e800

08002dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	817b      	strh	r3, [r7, #10]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dda:	897b      	ldrh	r3, [r7, #10]
 8002ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002de0:	7a7b      	ldrb	r3, [r7, #9]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002df6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	0d5b      	lsrs	r3, r3, #21
 8002e02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <I2C_TransferConfig+0x60>)
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	ea02 0103 	and.w	r1, r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	03ff63ff 	.word	0x03ff63ff

08002e2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d138      	bne.n	8002eb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e032      	b.n	8002eb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	@ 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d139      	bne.n	8002f4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e033      	b.n	8002f4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2224      	movs	r2, #36	@ 0x24
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f60:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40007000 	.word	0x40007000

08002f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f86:	d130      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f88:	4b23      	ldr	r3, [pc, #140]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f94:	d038      	beq.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f96:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2232      	movs	r2, #50	@ 0x32
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fbc:	e002      	b.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc4:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd0:	d102      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f2      	bne.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe4:	d110      	bne.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e00f      	b.n	800300a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff6:	d007      	beq.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff8:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003000:	4a05      	ldr	r2, [pc, #20]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003006:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000
 800301c:	20000000 	.word	0x20000000
 8003020:	431bde83 	.word	0x431bde83

08003024 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e3ca      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b97      	ldr	r3, [pc, #604]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80e4 	beq.w	8003220 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_RCC_OscConfig+0x4a>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	f040 808b 	bne.w	800317c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 8087 	bne.w	800317c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306e:	4b89      	ldr	r3, [pc, #548]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e3a2      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	4b82      	ldr	r3, [pc, #520]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_RCC_OscConfig+0x7c>
 8003096:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800309e:	e005      	b.n	80030ac <HAL_RCC_OscConfig+0x88>
 80030a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d223      	bcs.n	80030f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fd87 	bl	8003bc8 <RCC_SetFlashLatencyFromMSIRange>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e383      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c4:	4b73      	ldr	r3, [pc, #460]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a72      	ldr	r2, [pc, #456]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030ca:	f043 0308 	orr.w	r3, r3, #8
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b70      	ldr	r3, [pc, #448]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	496d      	ldr	r1, [pc, #436]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	4968      	ldr	r1, [pc, #416]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
 80030f6:	e025      	b.n	8003144 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f8:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a65      	ldr	r2, [pc, #404]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030fe:	f043 0308 	orr.w	r3, r3, #8
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b63      	ldr	r3, [pc, #396]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4960      	ldr	r1, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003116:	4b5f      	ldr	r3, [pc, #380]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	495b      	ldr	r1, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fd47 	bl	8003bc8 <RCC_SetFlashLatencyFromMSIRange>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e343      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003144:	f000 fc4a 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b52      	ldr	r3, [pc, #328]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	4950      	ldr	r1, [pc, #320]	@ (8003298 <HAL_RCC_OscConfig+0x274>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	4a4e      	ldr	r2, [pc, #312]	@ (800329c <HAL_RCC_OscConfig+0x278>)
 8003162:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003164:	4b4e      	ldr	r3, [pc, #312]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe f82f 	bl	80011cc <HAL_InitTick>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d052      	beq.n	800321e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	e327      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d032      	beq.n	80031ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003184:	4b43      	ldr	r3, [pc, #268]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a42      	ldr	r2, [pc, #264]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003190:	f7fe fcd6 	bl	8001b40 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003198:	f7fe fcd2 	bl	8001b40 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e310      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b6:	4b37      	ldr	r3, [pc, #220]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a36      	ldr	r2, [pc, #216]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031bc:	f043 0308 	orr.w	r3, r3, #8
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4931      	ldr	r1, [pc, #196]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	492c      	ldr	r1, [pc, #176]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	e01a      	b.n	8003220 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a29      	ldr	r2, [pc, #164]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f6:	f7fe fca3 	bl	8001b40 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fe:	f7fe fc9f 	bl	8001b40 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e2dd      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003210:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x1da>
 800321c:	e000      	b.n	8003220 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800321e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d074      	beq.n	8003316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x21a>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	d10e      	bne.n	8003256 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d10b      	bne.n	8003256 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d064      	beq.n	8003314 <HAL_RCC_OscConfig+0x2f0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d160      	bne.n	8003314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e2ba      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x24a>
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0b      	ldr	r2, [pc, #44]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e026      	b.n	80032bc <HAL_RCC_OscConfig+0x298>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003276:	d115      	bne.n	80032a4 <HAL_RCC_OscConfig+0x280>
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a05      	ldr	r2, [pc, #20]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800327e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a02      	ldr	r2, [pc, #8]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x298>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	08007704 	.word	0x08007704
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000088 	.word	0x20000088
 80032a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a9c      	ldr	r2, [pc, #624]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fc3c 	bl	8001b40 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fc38 	bl	8001b40 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e276      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032de:	4b92      	ldr	r3, [pc, #584]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x2a8>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fc28 	bl	8001b40 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fc24 	bl	8001b40 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e262      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003306:	4b88      	ldr	r3, [pc, #544]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2d0>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d060      	beq.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x310>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d119      	bne.n	8003362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d116      	bne.n	8003362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	4b7c      	ldr	r3, [pc, #496]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x328>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e23f      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	4973      	ldr	r1, [pc, #460]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003360:	e040      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d023      	beq.n	80033b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336a:	4b6f      	ldr	r3, [pc, #444]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fbe3 	bl	8001b40 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe fbdf 	bl	8001b40 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e21d      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003390:	4b65      	ldr	r3, [pc, #404]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b62      	ldr	r3, [pc, #392]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	495f      	ldr	r1, [pc, #380]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
 80033b0:	e018      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe fbbf 	bl	8001b40 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fe fbbb 	bl	8001b40 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1f9      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03c      	beq.n	800346a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01c      	beq.n	8003432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fb9a 	bl	8001b40 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe fb96 	bl	8001b40 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1d4      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ef      	beq.n	8003410 <HAL_RCC_OscConfig+0x3ec>
 8003430:	e01b      	b.n	800346a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003438:	4a3b      	ldr	r2, [pc, #236]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7fe fb7d 	bl	8001b40 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344a:	f7fe fb79 	bl	8001b40 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1b7      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345c:	4b32      	ldr	r3, [pc, #200]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ef      	bne.n	800344a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80a6 	beq.w	80035c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003478:	2300      	movs	r3, #0
 800347a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800347c:	4b2a      	ldr	r3, [pc, #168]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003488:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	4a26      	ldr	r2, [pc, #152]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800348e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003492:	6593      	str	r3, [r2, #88]	@ 0x58
 8003494:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a4:	4b21      	ldr	r3, [pc, #132]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d118      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b0:	4b1e      	ldr	r3, [pc, #120]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fb40 	bl	8001b40 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fe fb3c 	bl	8001b40 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e17a      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d108      	bne.n	80034fc <HAL_RCC_OscConfig+0x4d8>
 80034ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034fa:	e029      	b.n	8003550 <HAL_RCC_OscConfig+0x52c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b05      	cmp	r3, #5
 8003502:	d115      	bne.n	8003530 <HAL_RCC_OscConfig+0x50c>
 8003504:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003514:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	4a03      	ldr	r2, [pc, #12]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x52c>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
 8003530:	4b9c      	ldr	r3, [pc, #624]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a9b      	ldr	r2, [pc, #620]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003540:	4b98      	ldr	r3, [pc, #608]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a97      	ldr	r2, [pc, #604]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d016      	beq.n	8003586 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe faf2 	bl	8001b40 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe faee 	bl	8001b40 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e12a      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	4b8b      	ldr	r3, [pc, #556]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ed      	beq.n	8003560 <HAL_RCC_OscConfig+0x53c>
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe fadb 	bl	8001b40 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fad7 	bl	8001b40 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e113      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a4:	4b7f      	ldr	r3, [pc, #508]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ed      	bne.n	800358e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b7a      	ldr	r3, [pc, #488]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	4a79      	ldr	r2, [pc, #484]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80fe 	beq.w	80037ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	f040 80d0 	bne.w	8003778 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035d8:	4b72      	ldr	r3, [pc, #456]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d130      	bne.n	800364e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	3b01      	subs	r3, #1
 80035f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d127      	bne.n	800364e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d11f      	bne.n	800364e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003618:	2a07      	cmp	r2, #7
 800361a:	bf14      	ite	ne
 800361c:	2201      	movne	r2, #1
 800361e:	2200      	moveq	r2, #0
 8003620:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003622:	4293      	cmp	r3, r2
 8003624:	d113      	bne.n	800364e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	3b01      	subs	r3, #1
 8003634:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d109      	bne.n	800364e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d06e      	beq.n	800372c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d069      	beq.n	8003728 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003654:	4b53      	ldr	r3, [pc, #332]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003660:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0ad      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003670:	4b4c      	ldr	r3, [pc, #304]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800367c:	f7fe fa60 	bl	8001b40 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fa5c 	bl	8001b40 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e09a      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003696:	4b43      	ldr	r3, [pc, #268]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a2:	4b40      	ldr	r3, [pc, #256]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	4b40      	ldr	r3, [pc, #256]	@ (80037a8 <HAL_RCC_OscConfig+0x784>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036b2:	3a01      	subs	r2, #1
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	4311      	orrs	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036bc:	0212      	lsls	r2, r2, #8
 80036be:	4311      	orrs	r1, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036c4:	0852      	lsrs	r2, r2, #1
 80036c6:	3a01      	subs	r2, #1
 80036c8:	0552      	lsls	r2, r2, #21
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036d0:	0852      	lsrs	r2, r2, #1
 80036d2:	3a01      	subs	r2, #1
 80036d4:	0652      	lsls	r2, r2, #25
 80036d6:	4311      	orrs	r1, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036dc:	0912      	lsrs	r2, r2, #4
 80036de:	0452      	lsls	r2, r2, #17
 80036e0:	430a      	orrs	r2, r1
 80036e2:	4930      	ldr	r1, [pc, #192]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036e8:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f4:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003700:	f7fe fa1e 	bl	8001b40 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fa1a 	bl	8001b40 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e058      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	4b22      	ldr	r3, [pc, #136]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003726:	e050      	b.n	80037ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e04f      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d148      	bne.n	80037ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003744:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003750:	f7fe f9f6 	bl	8001b40 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe f9f2 	bl	8001b40 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e030      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x734>
 8003776:	e028      	b.n	80037ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d023      	beq.n	80037c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a08      	ldr	r2, [pc, #32]	@ (80037a4 <HAL_RCC_OscConfig+0x780>)
 8003784:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fe f9d9 	bl	8001b40 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003790:	e00c      	b.n	80037ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe f9d5 	bl	8001b40 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d905      	bls.n	80037ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e013      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_RCC_OscConfig+0x7b0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ec      	bne.n	8003792 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x7b0>)
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	4905      	ldr	r1, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x7b0>)
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_RCC_OscConfig+0x7b4>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60cb      	str	r3, [r1, #12]
 80037c4:	e001      	b.n	80037ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	feeefffc 	.word	0xfeeefffc

080037dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0e7      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b75      	ldr	r3, [pc, #468]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b72      	ldr	r3, [pc, #456]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	4970      	ldr	r1, [pc, #448]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b6e      	ldr	r3, [pc, #440]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0cf      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	4b66      	ldr	r3, [pc, #408]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003838:	429a      	cmp	r2, r3
 800383a:	d908      	bls.n	800384e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b63      	ldr	r3, [pc, #396]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4960      	ldr	r1, [pc, #384]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04c      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003862:	4b5a      	ldr	r3, [pc, #360]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d121      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0a6      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	4b54      	ldr	r3, [pc, #336]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e09a      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003892:	4b4e      	ldr	r3, [pc, #312]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e08e      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e086      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b46      	ldr	r3, [pc, #280]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4943      	ldr	r1, [pc, #268]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fe f93c 	bl	8001b40 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe f938 	bl	8001b40 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e06e      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b3a      	ldr	r3, [pc, #232]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390c:	429a      	cmp	r2, r3
 800390e:	d208      	bcs.n	8003922 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b2e      	ldr	r3, [pc, #184]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	492b      	ldr	r1, [pc, #172]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003922:	4b29      	ldr	r3, [pc, #164]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d210      	bcs.n	8003952 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 0207 	bic.w	r2, r3, #7
 8003938:	4923      	ldr	r1, [pc, #140]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003940:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e036      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395e:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4918      	ldr	r1, [pc, #96]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397c:	4b13      	ldr	r3, [pc, #76]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4910      	ldr	r1, [pc, #64]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003990:	f000 f824 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	490b      	ldr	r1, [pc, #44]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f4>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	4a09      	ldr	r2, [pc, #36]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f8>)
 80039ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <HAL_RCC_ClockConfig+0x1fc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fc09 	bl	80011cc <HAL_InitTick>
 80039ba:	4603      	mov	r3, r0
 80039bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80039be:	7afb      	ldrb	r3, [r7, #11]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08007704 	.word	0x08007704
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000088 	.word	0x20000088

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	@ 0x24
 80039e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x34>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d121      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d11e      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a10:	4b34      	ldr	r3, [pc, #208]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a1c:	4b31      	ldr	r3, [pc, #196]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a38:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a54:	4b25      	ldr	r3, [pc, #148]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e004      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a60:	4b23      	ldr	r3, [pc, #140]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d134      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xac>
 8003a80:	e005      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a82:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x110>)
 8003a84:	617b      	str	r3, [r7, #20]
      break;
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a8a:	617b      	str	r3, [r7, #20]
      break;
 8003a8c:	e002      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a94:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	fb03 f202 	mul.w	r2, r3, r2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0e5b      	lsrs	r3, r3, #25
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	@ 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	0800771c 	.word	0x0800771c
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000000 	.word	0x20000000

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b10:	f7ff fff0 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4904      	ldr	r1, [pc, #16]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08007714 	.word	0x08007714

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b3c:	f7ff ffda 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0adb      	lsrs	r3, r3, #11
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08007714 	.word	0x08007714

08003b64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	220f      	movs	r2, #15
 8003b72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b80:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b98:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <HAL_RCC_GetClockConfig+0x60>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0207 	and.w	r2, r3, #7
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40022000 	.word	0x40022000

08003bc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003be0:	f7ff f9bc 	bl	8002f5c <HAL_PWREx_GetVoltageRange>
 8003be4:	6178      	str	r0, [r7, #20]
 8003be6:	e014      	b.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf4:	4b22      	ldr	r3, [pc, #136]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c00:	f7ff f9ac 	bl	8002f5c <HAL_PWREx_GetVoltageRange>
 8003c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b1e      	ldr	r3, [pc, #120]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c18:	d10b      	bne.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b80      	cmp	r3, #128	@ 0x80
 8003c1e:	d919      	bls.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c24:	d902      	bls.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c26:	2302      	movs	r3, #2
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e013      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e010      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b80      	cmp	r3, #128	@ 0x80
 8003c36:	d902      	bls.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c38:	2303      	movs	r3, #3
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e00a      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b80      	cmp	r3, #128	@ 0x80
 8003c42:	d102      	bne.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c44:	2302      	movs	r3, #2
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e004      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b70      	cmp	r3, #112	@ 0x70
 8003c4e:	d101      	bne.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 0207 	bic.w	r2, r3, #7
 8003c5c:	4909      	ldr	r1, [pc, #36]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c64:	4b07      	ldr	r3, [pc, #28]	@ (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40022000 	.word	0x40022000

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d041      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cac:	d02a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cb2:	d824      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cbe:	d81e      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc8:	d010      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cca:	e018      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ccc:	4b86      	ldr	r3, [pc, #536]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a85      	ldr	r2, [pc, #532]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd8:	e015      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fabb 	bl	800425c <RCCEx_PLLSAI1_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cea:	e00c      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3320      	adds	r3, #32
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fba6 	bl	8004444 <RCCEx_PLLSAI2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cfc:	e003      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	74fb      	strb	r3, [r7, #19]
      break;
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d0c:	4b76      	ldr	r3, [pc, #472]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d1a:	4973      	ldr	r1, [pc, #460]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d22:	e001      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d041      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d3c:	d02a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d42:	d824      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d48:	d008      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d4e:	d81e      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d58:	d010      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d5a:	e018      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d5c:	4b62      	ldr	r3, [pc, #392]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a61      	ldr	r2, [pc, #388]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d68:	e015      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fa73 	bl	800425c <RCCEx_PLLSAI1_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d7a:	e00c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3320      	adds	r3, #32
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fb5e 	bl	8004444 <RCCEx_PLLSAI2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	74fb      	strb	r3, [r7, #19]
      break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d9c:	4b52      	ldr	r3, [pc, #328]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003daa:	494f      	ldr	r1, [pc, #316]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a0 	beq.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b41      	ldr	r3, [pc, #260]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	4a40      	ldr	r2, [pc, #256]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dec:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3a      	ldr	r2, [pc, #232]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e08:	f7fd fe9a 	bl	8001b40 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e0e:	e009      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fd fe96 	bl	8001b40 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	74fb      	strb	r3, [r7, #19]
        break;
 8003e22:	e005      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e24:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d15c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d019      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e54:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	4a20      	ldr	r2, [pc, #128]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e80:	4a19      	ldr	r2, [pc, #100]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fe55 	bl	8001b40 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd fe51 	bl	8001b40 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	74fb      	strb	r3, [r7, #19]
            break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ec      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed6:	4904      	ldr	r1, [pc, #16]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef4:	7c7b      	ldrb	r3, [r7, #17]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efa:	4b9e      	ldr	r3, [pc, #632]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	4a9d      	ldr	r2, [pc, #628]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f12:	4b98      	ldr	r3, [pc, #608]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f18:	f023 0203 	bic.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	4994      	ldr	r1, [pc, #592]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f34:	4b8f      	ldr	r3, [pc, #572]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3a:	f023 020c 	bic.w	r2, r3, #12
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	498c      	ldr	r1, [pc, #560]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f56:	4b87      	ldr	r3, [pc, #540]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	4983      	ldr	r1, [pc, #524]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f78:	4b7e      	ldr	r3, [pc, #504]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	497b      	ldr	r1, [pc, #492]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f9a:	4b76      	ldr	r3, [pc, #472]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa8:	4972      	ldr	r1, [pc, #456]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	496a      	ldr	r1, [pc, #424]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fde:	4b65      	ldr	r3, [pc, #404]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	4961      	ldr	r1, [pc, #388]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004000:	4b5c      	ldr	r3, [pc, #368]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400e:	4959      	ldr	r1, [pc, #356]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004022:	4b54      	ldr	r3, [pc, #336]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004030:	4950      	ldr	r1, [pc, #320]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004044:	4b4b      	ldr	r3, [pc, #300]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	4948      	ldr	r1, [pc, #288]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004066:	4b43      	ldr	r3, [pc, #268]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	493f      	ldr	r1, [pc, #252]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d028      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004088:	4b3a      	ldr	r3, [pc, #232]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004096:	4937      	ldr	r1, [pc, #220]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a6:	d106      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a8:	4b32      	ldr	r3, [pc, #200]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a31      	ldr	r2, [pc, #196]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040b2:	60d3      	str	r3, [r2, #12]
 80040b4:	e011      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040be:	d10c      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	2101      	movs	r1, #1
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f8c8 	bl	800425c <RCCEx_PLLSAI1_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040e6:	4b23      	ldr	r3, [pc, #140]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f4:	491f      	ldr	r1, [pc, #124]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004104:	d106      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4a1a      	ldr	r2, [pc, #104]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004110:	60d3      	str	r3, [r2, #12]
 8004112:	e011      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004118:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800411c:	d10c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f899 	bl	800425c <RCCEx_PLLSAI1_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02b      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004152:	4908      	ldr	r1, [pc, #32]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004162:	d109      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a02      	ldr	r2, [pc, #8]	@ (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416e:	60d3      	str	r3, [r2, #12]
 8004170:	e014      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f867 	bl	800425c <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b6:	4928      	ldr	r1, [pc, #160]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041c6:	d10d      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f844 	bl	800425c <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d014      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	74bb      	strb	r3, [r7, #18]
 80041e2:	e011      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3320      	adds	r3, #32
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f925 	bl	8004444 <RCCEx_PLLSAI2_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004214:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004222:	490d      	ldr	r1, [pc, #52]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004236:	4b08      	ldr	r3, [pc, #32]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004246:	4904      	ldr	r1, [pc, #16]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800424e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000

0800425c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800426a:	4b75      	ldr	r3, [pc, #468]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004276:	4b72      	ldr	r3, [pc, #456]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0203 	and.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d10d      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
       ||
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800428e:	4b6c      	ldr	r3, [pc, #432]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
       ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d047      	beq.n	8004332 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e044      	b.n	8004332 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d018      	beq.n	80042e2 <RCCEx_PLLSAI1_Config+0x86>
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d825      	bhi.n	8004300 <RCCEx_PLLSAI1_Config+0xa4>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d002      	beq.n	80042be <RCCEx_PLLSAI1_Config+0x62>
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d009      	beq.n	80042d0 <RCCEx_PLLSAI1_Config+0x74>
 80042bc:	e020      	b.n	8004300 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042be:	4b60      	ldr	r3, [pc, #384]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11d      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ce:	e01a      	b.n	8004306 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042d0:	4b5b      	ldr	r3, [pc, #364]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e0:	e013      	b.n	800430a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042e2:	4b57      	ldr	r3, [pc, #348]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ee:	4b54      	ldr	r3, [pc, #336]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042fe:	e006      	b.n	800430e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e004      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004316:	4b4a      	ldr	r3, [pc, #296]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	430b      	orrs	r3, r1
 800432c:	4944      	ldr	r1, [pc, #272]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d17d      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004338:	4b41      	ldr	r3, [pc, #260]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a40      	ldr	r2, [pc, #256]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004344:	f7fd fbfc 	bl	8001b40 <HAL_GetTick>
 8004348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800434a:	e009      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800434c:	f7fd fbf8 	bl	8001b40 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d902      	bls.n	8004360 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	73fb      	strb	r3, [r7, #15]
        break;
 800435e:	e005      	b.n	800436c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004360:	4b37      	ldr	r3, [pc, #220]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ef      	bne.n	800434c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d160      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004378:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6892      	ldr	r2, [r2, #8]
 8004388:	0211      	lsls	r1, r2, #8
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	0912      	lsrs	r2, r2, #4
 8004390:	0452      	lsls	r2, r2, #17
 8004392:	430a      	orrs	r2, r1
 8004394:	492a      	ldr	r1, [pc, #168]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
 800439a:	e027      	b.n	80043ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d112      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a2:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80043aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6892      	ldr	r2, [r2, #8]
 80043b2:	0211      	lsls	r1, r2, #8
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6912      	ldr	r2, [r2, #16]
 80043b8:	0852      	lsrs	r2, r2, #1
 80043ba:	3a01      	subs	r2, #1
 80043bc:	0552      	lsls	r2, r2, #21
 80043be:	430a      	orrs	r2, r1
 80043c0:	491f      	ldr	r1, [pc, #124]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
 80043c6:	e011      	b.n	80043ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	0211      	lsls	r1, r2, #8
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6952      	ldr	r2, [r2, #20]
 80043de:	0852      	lsrs	r2, r2, #1
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0652      	lsls	r2, r2, #25
 80043e4:	430a      	orrs	r2, r1
 80043e6:	4916      	ldr	r1, [pc, #88]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ec:	4b14      	ldr	r3, [pc, #80]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a13      	ldr	r2, [pc, #76]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fd fba2 	bl	8001b40 <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043fe:	e009      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004400:	f7fd fb9e 	bl	8001b40 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	73fb      	strb	r3, [r7, #15]
          break;
 8004412:	e005      	b.n	8004420 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	4904      	ldr	r1, [pc, #16]	@ (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004430:	4313      	orrs	r3, r2
 8004432:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000

08004444 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004452:	4b6a      	ldr	r3, [pc, #424]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d018      	beq.n	8004490 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800445e:	4b67      	ldr	r3, [pc, #412]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0203 	and.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d10d      	bne.n	800448a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
       ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004476:	4b61      	ldr	r3, [pc, #388]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
       ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d047      	beq.n	800451a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e044      	b.n	800451a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d018      	beq.n	80044ca <RCCEx_PLLSAI2_Config+0x86>
 8004498:	2b03      	cmp	r3, #3
 800449a:	d825      	bhi.n	80044e8 <RCCEx_PLLSAI2_Config+0xa4>
 800449c:	2b01      	cmp	r3, #1
 800449e:	d002      	beq.n	80044a6 <RCCEx_PLLSAI2_Config+0x62>
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d009      	beq.n	80044b8 <RCCEx_PLLSAI2_Config+0x74>
 80044a4:	e020      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044a6:	4b55      	ldr	r3, [pc, #340]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11d      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b6:	e01a      	b.n	80044ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b8:	4b50      	ldr	r3, [pc, #320]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c8:	e013      	b.n	80044f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ca:	4b4c      	ldr	r3, [pc, #304]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044d6:	4b49      	ldr	r3, [pc, #292]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044e6:	e006      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	e004      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044fe:	4b3f      	ldr	r3, [pc, #252]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	430b      	orrs	r3, r1
 8004514:	4939      	ldr	r1, [pc, #228]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d167      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004520:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a35      	ldr	r2, [pc, #212]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd fb08 	bl	8001b40 <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004532:	e009      	b.n	8004548 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004534:	f7fd fb04 	bl	8001b40 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	73fb      	strb	r3, [r7, #15]
        break;
 8004546:	e005      	b.n	8004554 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004548:	4b2c      	ldr	r3, [pc, #176]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ef      	bne.n	8004534 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d14a      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d111      	bne.n	8004584 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004560:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6892      	ldr	r2, [r2, #8]
 8004570:	0211      	lsls	r1, r2, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68d2      	ldr	r2, [r2, #12]
 8004576:	0912      	lsrs	r2, r2, #4
 8004578:	0452      	lsls	r2, r2, #17
 800457a:	430a      	orrs	r2, r1
 800457c:	491f      	ldr	r1, [pc, #124]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	614b      	str	r3, [r1, #20]
 8004582:	e011      	b.n	80045a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004584:	4b1d      	ldr	r3, [pc, #116]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800458c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6892      	ldr	r2, [r2, #8]
 8004594:	0211      	lsls	r1, r2, #8
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6912      	ldr	r2, [r2, #16]
 800459a:	0852      	lsrs	r2, r2, #1
 800459c:	3a01      	subs	r2, #1
 800459e:	0652      	lsls	r2, r2, #25
 80045a0:	430a      	orrs	r2, r1
 80045a2:	4916      	ldr	r1, [pc, #88]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045a8:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fac4 	bl	8001b40 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ba:	e009      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045bc:	f7fd fac0 	bl	8001b40 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d902      	bls.n	80045d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	73fb      	strb	r3, [r7, #15]
          break;
 80045ce:	e005      	b.n	80045dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4904      	ldr	r1, [pc, #16]	@ (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000

08004600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e049      	b.n	80046a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f841 	bl	80046ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 f9e0 	bl	8004a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e04f      	b.n	800477c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a23      	ldr	r2, [pc, #140]	@ (8004788 <HAL_TIM_Base_Start_IT+0xc4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x76>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004706:	d018      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x76>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_TIM_Base_Start_IT+0xc8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x76>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <HAL_TIM_Base_Start_IT+0xcc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x76>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_TIM_Base_Start_IT+0xd0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x76>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <HAL_TIM_Base_Start_IT+0xd4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x76>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_TIM_Base_Start_IT+0xd8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d115      	bne.n	8004766 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	4b17      	ldr	r3, [pc, #92]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004742:	4013      	ands	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d015      	beq.n	8004778 <HAL_TIM_Base_Start_IT+0xb4>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004752:	d011      	beq.n	8004778 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	e008      	b.n	8004778 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e000      	b.n	800477a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40014000 	.word	0x40014000
 80047a0:	00010007 	.word	0x00010007

080047a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d020      	beq.n	8004808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0202 	mvn.w	r2, #2
 80047d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8e9 	bl	80049c6 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8db 	bl	80049b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8ec 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0204 	mvn.w	r2, #4
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8c3 	bl	80049c6 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8b5 	bl	80049b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8c6 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d020      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0208 	mvn.w	r2, #8
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2204      	movs	r2, #4
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f89d 	bl	80049c6 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f88f 	bl	80049b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f8a0 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d020      	beq.n	80048ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0210 	mvn.w	r2, #16
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2208      	movs	r2, #8
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f877 	bl	80049c6 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f869 	bl	80049b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f87a 	bl	80049da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0201 	mvn.w	r2, #1
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc f8f8 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f913 	bl	8004b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00c      	beq.n	8004962 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f90b 	bl	8004b78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f834 	bl	80049ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0220 	mvn.w	r2, #32
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8d3 	bl	8004b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a46      	ldr	r2, [pc, #280]	@ (8004b30 <TIM_Base_SetConfig+0x12c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a22:	d00f      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a43      	ldr	r2, [pc, #268]	@ (8004b34 <TIM_Base_SetConfig+0x130>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00b      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a42      	ldr	r2, [pc, #264]	@ (8004b38 <TIM_Base_SetConfig+0x134>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d007      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a41      	ldr	r2, [pc, #260]	@ (8004b3c <TIM_Base_SetConfig+0x138>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_Base_SetConfig+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	@ (8004b40 <TIM_Base_SetConfig+0x13c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d108      	bne.n	8004a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a35      	ldr	r2, [pc, #212]	@ (8004b30 <TIM_Base_SetConfig+0x12c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01f      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d01b      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a32      	ldr	r2, [pc, #200]	@ (8004b34 <TIM_Base_SetConfig+0x130>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d017      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a31      	ldr	r2, [pc, #196]	@ (8004b38 <TIM_Base_SetConfig+0x134>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a30      	ldr	r2, [pc, #192]	@ (8004b3c <TIM_Base_SetConfig+0x138>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2f      	ldr	r2, [pc, #188]	@ (8004b40 <TIM_Base_SetConfig+0x13c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a2e      	ldr	r2, [pc, #184]	@ (8004b44 <TIM_Base_SetConfig+0x140>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2d      	ldr	r2, [pc, #180]	@ (8004b48 <TIM_Base_SetConfig+0x144>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0x9a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2c      	ldr	r2, [pc, #176]	@ (8004b4c <TIM_Base_SetConfig+0x148>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a16      	ldr	r2, [pc, #88]	@ (8004b30 <TIM_Base_SetConfig+0x12c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_Base_SetConfig+0xf8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a18      	ldr	r2, [pc, #96]	@ (8004b40 <TIM_Base_SetConfig+0x13c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_Base_SetConfig+0xf8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	@ (8004b44 <TIM_Base_SetConfig+0x140>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_Base_SetConfig+0xf8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <TIM_Base_SetConfig+0x144>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0xf8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <TIM_Base_SetConfig+0x148>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]
  }
}
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e040      	b.n	8004c20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc faae 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2224      	movs	r2, #36	@ 0x24
 8004bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb6a 	bl	80052ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8af 	bl	8004d3c <UART_SetConfig>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e01b      	b.n	8004c20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fbe9 	bl	80053f0 <UART_CheckIdleState>
 8004c1e:	4603      	mov	r3, r0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	@ 0x28
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d177      	bne.n	8004d30 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_UART_Transmit+0x24>
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e070      	b.n	8004d32 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2221      	movs	r2, #33	@ 0x21
 8004c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc ff6f 	bl	8001b40 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d108      	bne.n	8004c90 <HAL_UART_Transmit+0x68>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c98:	e02f      	b.n	8004cfa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fc4b 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e03b      	b.n	8004d32 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ccc:	b292      	uxth	r2, r2
 8004cce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	e007      	b.n	8004ce8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1c9      	bne.n	8004c9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2140      	movs	r1, #64	@ 0x40
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fc15 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e005      	b.n	8004d32 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d40:	b08a      	sub	sp, #40	@ 0x28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4ba4      	ldr	r3, [pc, #656]	@ (8004ffc <UART_SetConfig+0x2c0>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a99      	ldr	r2, [pc, #612]	@ (8005000 <UART_SetConfig+0x2c4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da4:	4313      	orrs	r3, r2
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a90      	ldr	r2, [pc, #576]	@ (8005004 <UART_SetConfig+0x2c8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d126      	bne.n	8004e14 <UART_SetConfig+0xd8>
 8004dc6:	4b90      	ldr	r3, [pc, #576]	@ (8005008 <UART_SetConfig+0x2cc>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d81b      	bhi.n	8004e0c <UART_SetConfig+0xd0>
 8004dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <UART_SetConfig+0xa0>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004dfd 	.word	0x08004dfd
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e05 	.word	0x08004e05
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df2:	e116      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfa:	e112      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e02:	e10e      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0a:	e10a      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e12:	e106      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7c      	ldr	r2, [pc, #496]	@ (800500c <UART_SetConfig+0x2d0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d138      	bne.n	8004e90 <UART_SetConfig+0x154>
 8004e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8005008 <UART_SetConfig+0x2cc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e24:	f003 030c 	and.w	r3, r3, #12
 8004e28:	2b0c      	cmp	r3, #12
 8004e2a:	d82d      	bhi.n	8004e88 <UART_SetConfig+0x14c>
 8004e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <UART_SetConfig+0xf8>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004e89 	.word	0x08004e89
 8004e3c:	08004e89 	.word	0x08004e89
 8004e40:	08004e89 	.word	0x08004e89
 8004e44:	08004e79 	.word	0x08004e79
 8004e48:	08004e89 	.word	0x08004e89
 8004e4c:	08004e89 	.word	0x08004e89
 8004e50:	08004e89 	.word	0x08004e89
 8004e54:	08004e71 	.word	0x08004e71
 8004e58:	08004e89 	.word	0x08004e89
 8004e5c:	08004e89 	.word	0x08004e89
 8004e60:	08004e89 	.word	0x08004e89
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e0d8      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e76:	e0d4      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7e:	e0d0      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e86:	e0cc      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8e:	e0c8      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a5e      	ldr	r2, [pc, #376]	@ (8005010 <UART_SetConfig+0x2d4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d125      	bne.n	8004ee6 <UART_SetConfig+0x1aa>
 8004e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005008 <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ea4:	2b30      	cmp	r3, #48	@ 0x30
 8004ea6:	d016      	beq.n	8004ed6 <UART_SetConfig+0x19a>
 8004ea8:	2b30      	cmp	r3, #48	@ 0x30
 8004eaa:	d818      	bhi.n	8004ede <UART_SetConfig+0x1a2>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d00a      	beq.n	8004ec6 <UART_SetConfig+0x18a>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d814      	bhi.n	8004ede <UART_SetConfig+0x1a2>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <UART_SetConfig+0x182>
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d008      	beq.n	8004ece <UART_SetConfig+0x192>
 8004ebc:	e00f      	b.n	8004ede <UART_SetConfig+0x1a2>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec4:	e0ad      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ecc:	e0a9      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ece:	2304      	movs	r3, #4
 8004ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed4:	e0a5      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004edc:	e0a1      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ede:	2310      	movs	r3, #16
 8004ee0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee4:	e09d      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a4a      	ldr	r2, [pc, #296]	@ (8005014 <UART_SetConfig+0x2d8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d125      	bne.n	8004f3c <UART_SetConfig+0x200>
 8004ef0:	4b45      	ldr	r3, [pc, #276]	@ (8005008 <UART_SetConfig+0x2cc>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004efc:	d016      	beq.n	8004f2c <UART_SetConfig+0x1f0>
 8004efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f00:	d818      	bhi.n	8004f34 <UART_SetConfig+0x1f8>
 8004f02:	2b80      	cmp	r3, #128	@ 0x80
 8004f04:	d00a      	beq.n	8004f1c <UART_SetConfig+0x1e0>
 8004f06:	2b80      	cmp	r3, #128	@ 0x80
 8004f08:	d814      	bhi.n	8004f34 <UART_SetConfig+0x1f8>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <UART_SetConfig+0x1d8>
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	d008      	beq.n	8004f24 <UART_SetConfig+0x1e8>
 8004f12:	e00f      	b.n	8004f34 <UART_SetConfig+0x1f8>
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1a:	e082      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f22:	e07e      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2a:	e07a      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f32:	e076      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e072      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a35      	ldr	r2, [pc, #212]	@ (8005018 <UART_SetConfig+0x2dc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d12a      	bne.n	8004f9c <UART_SetConfig+0x260>
 8004f46:	4b30      	ldr	r3, [pc, #192]	@ (8005008 <UART_SetConfig+0x2cc>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f54:	d01a      	beq.n	8004f8c <UART_SetConfig+0x250>
 8004f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5a:	d81b      	bhi.n	8004f94 <UART_SetConfig+0x258>
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f60:	d00c      	beq.n	8004f7c <UART_SetConfig+0x240>
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f66:	d815      	bhi.n	8004f94 <UART_SetConfig+0x258>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <UART_SetConfig+0x238>
 8004f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f70:	d008      	beq.n	8004f84 <UART_SetConfig+0x248>
 8004f72:	e00f      	b.n	8004f94 <UART_SetConfig+0x258>
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	e052      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f82:	e04e      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	e04a      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e046      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	e042      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a17      	ldr	r2, [pc, #92]	@ (8005000 <UART_SetConfig+0x2c4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d13a      	bne.n	800501c <UART_SetConfig+0x2e0>
 8004fa6:	4b18      	ldr	r3, [pc, #96]	@ (8005008 <UART_SetConfig+0x2cc>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fb4:	d01a      	beq.n	8004fec <UART_SetConfig+0x2b0>
 8004fb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fba:	d81b      	bhi.n	8004ff4 <UART_SetConfig+0x2b8>
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc0:	d00c      	beq.n	8004fdc <UART_SetConfig+0x2a0>
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc6:	d815      	bhi.n	8004ff4 <UART_SetConfig+0x2b8>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0x298>
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd0:	d008      	beq.n	8004fe4 <UART_SetConfig+0x2a8>
 8004fd2:	e00f      	b.n	8004ff4 <UART_SetConfig+0x2b8>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fda:	e022      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe2:	e01e      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fea:	e01a      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004fec:	2308      	movs	r3, #8
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff2:	e016      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffa:	e012      	b.n	8005022 <UART_SetConfig+0x2e6>
 8004ffc:	efff69f3 	.word	0xefff69f3
 8005000:	40008000 	.word	0x40008000
 8005004:	40013800 	.word	0x40013800
 8005008:	40021000 	.word	0x40021000
 800500c:	40004400 	.word	0x40004400
 8005010:	40004800 	.word	0x40004800
 8005014:	40004c00 	.word	0x40004c00
 8005018:	40005000 	.word	0x40005000
 800501c:	2310      	movs	r3, #16
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a9f      	ldr	r2, [pc, #636]	@ (80052a4 <UART_SetConfig+0x568>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d17a      	bne.n	8005122 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800502c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005030:	2b08      	cmp	r3, #8
 8005032:	d824      	bhi.n	800507e <UART_SetConfig+0x342>
 8005034:	a201      	add	r2, pc, #4	@ (adr r2, 800503c <UART_SetConfig+0x300>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005061 	.word	0x08005061
 8005040:	0800507f 	.word	0x0800507f
 8005044:	08005069 	.word	0x08005069
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800506f 	.word	0x0800506f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	0800507f 	.word	0x0800507f
 8005058:	0800507f 	.word	0x0800507f
 800505c:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fe fd54 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005064:	61f8      	str	r0, [r7, #28]
        break;
 8005066:	e010      	b.n	800508a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b8f      	ldr	r3, [pc, #572]	@ (80052a8 <UART_SetConfig+0x56c>)
 800506a:	61fb      	str	r3, [r7, #28]
        break;
 800506c:	e00d      	b.n	800508a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fe fcb5 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8005072:	61f8      	str	r0, [r7, #28]
        break;
 8005074:	e009      	b.n	800508a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507a:	61fb      	str	r3, [r7, #28]
        break;
 800507c:	e005      	b.n	800508a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80fb 	beq.w	8005288 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d305      	bcc.n	80050ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d903      	bls.n	80050b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050b4:	e0e8      	b.n	8005288 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2200      	movs	r2, #0
 80050ba:	461c      	mov	r4, r3
 80050bc:	4615      	mov	r5, r2
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	022b      	lsls	r3, r5, #8
 80050c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050cc:	0222      	lsls	r2, r4, #8
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	6849      	ldr	r1, [r1, #4]
 80050d2:	0849      	lsrs	r1, r1, #1
 80050d4:	2000      	movs	r0, #0
 80050d6:	4688      	mov	r8, r1
 80050d8:	4681      	mov	r9, r0
 80050da:	eb12 0a08 	adds.w	sl, r2, r8
 80050de:	eb43 0b09 	adc.w	fp, r3, r9
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f0:	4650      	mov	r0, sl
 80050f2:	4659      	mov	r1, fp
 80050f4:	f7fb f8bc 	bl	8000270 <__aeabi_uldivmod>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4613      	mov	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005106:	d308      	bcc.n	800511a <UART_SetConfig+0x3de>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510e:	d204      	bcs.n	800511a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	60da      	str	r2, [r3, #12]
 8005118:	e0b6      	b.n	8005288 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005120:	e0b2      	b.n	8005288 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800512a:	d15e      	bne.n	80051ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800512c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005130:	2b08      	cmp	r3, #8
 8005132:	d828      	bhi.n	8005186 <UART_SetConfig+0x44a>
 8005134:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <UART_SetConfig+0x400>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005161 	.word	0x08005161
 8005140:	08005169 	.word	0x08005169
 8005144:	08005171 	.word	0x08005171
 8005148:	08005187 	.word	0x08005187
 800514c:	08005177 	.word	0x08005177
 8005150:	08005187 	.word	0x08005187
 8005154:	08005187 	.word	0x08005187
 8005158:	08005187 	.word	0x08005187
 800515c:	0800517f 	.word	0x0800517f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005160:	f7fe fcd4 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005164:	61f8      	str	r0, [r7, #28]
        break;
 8005166:	e014      	b.n	8005192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7fe fce6 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 800516c:	61f8      	str	r0, [r7, #28]
        break;
 800516e:	e010      	b.n	8005192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005170:	4b4d      	ldr	r3, [pc, #308]	@ (80052a8 <UART_SetConfig+0x56c>)
 8005172:	61fb      	str	r3, [r7, #28]
        break;
 8005174:	e00d      	b.n	8005192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005176:	f7fe fc31 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800517a:	61f8      	str	r0, [r7, #28]
        break;
 800517c:	e009      	b.n	8005192 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005182:	61fb      	str	r3, [r7, #28]
        break;
 8005184:	e005      	b.n	8005192 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d077      	beq.n	8005288 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005a      	lsls	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	d916      	bls.n	80051e2 <UART_SetConfig+0x4a6>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ba:	d212      	bcs.n	80051e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f023 030f 	bic.w	r3, r3, #15
 80051c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	8afb      	ldrh	r3, [r7, #22]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	8afa      	ldrh	r2, [r7, #22]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	e052      	b.n	8005288 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051e8:	e04e      	b.n	8005288 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d827      	bhi.n	8005242 <UART_SetConfig+0x506>
 80051f2:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x4bc>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005225 	.word	0x08005225
 8005200:	0800522d 	.word	0x0800522d
 8005204:	08005243 	.word	0x08005243
 8005208:	08005233 	.word	0x08005233
 800520c:	08005243 	.word	0x08005243
 8005210:	08005243 	.word	0x08005243
 8005214:	08005243 	.word	0x08005243
 8005218:	0800523b 	.word	0x0800523b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7fe fc76 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005220:	61f8      	str	r0, [r7, #28]
        break;
 8005222:	e014      	b.n	800524e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005224:	f7fe fc88 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005228:	61f8      	str	r0, [r7, #28]
        break;
 800522a:	e010      	b.n	800524e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800522c:	4b1e      	ldr	r3, [pc, #120]	@ (80052a8 <UART_SetConfig+0x56c>)
 800522e:	61fb      	str	r3, [r7, #28]
        break;
 8005230:	e00d      	b.n	800524e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005232:	f7fe fbd3 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8005236:	61f8      	str	r0, [r7, #28]
        break;
 8005238:	e009      	b.n	800524e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800523e:	61fb      	str	r3, [r7, #28]
        break;
 8005240:	e005      	b.n	800524e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800524c:	bf00      	nop
    }

    if (pclk != 0U)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	085a      	lsrs	r2, r3, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d909      	bls.n	8005282 <UART_SetConfig+0x546>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005274:	d205      	bcs.n	8005282 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e002      	b.n	8005288 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005294:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	@ 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	40008000 	.word	0x40008000
 80052a8:	00f42400 	.word	0x00f42400

080052ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053aa:	d10a      	bne.n	80053c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b098      	sub	sp, #96	@ 0x60
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005400:	f7fc fb9e 	bl	8001b40 <HAL_GetTick>
 8005404:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d12e      	bne.n	8005472 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f88c 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d021      	beq.n	8005472 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005442:	653b      	str	r3, [r7, #80]	@ 0x50
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800544c:	647b      	str	r3, [r7, #68]	@ 0x44
 800544e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800545a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e062      	b.n	8005538 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d149      	bne.n	8005514 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f856 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d03c      	beq.n	8005514 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	623b      	str	r3, [r7, #32]
   return(result);
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60fb      	str	r3, [r7, #12]
   return(result);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ec:	61fa      	str	r2, [r7, #28]
 80054ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	69b9      	ldr	r1, [r7, #24]
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	617b      	str	r3, [r7, #20]
   return(result);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e011      	b.n	8005538 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3758      	adds	r7, #88	@ 0x58
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005550:	e04f      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005558:	d04b      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fc faf1 	bl	8001b40 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <UART_WaitOnFlagUntilTimeout+0x30>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e04e      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d037      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b80      	cmp	r3, #128	@ 0x80
 8005586:	d034      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d031      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d110      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f838 	bl	800561a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2208      	movs	r2, #8
 80055ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e029      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055cc:	d111      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f81e 	bl	800561a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0a0      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800561a:	b480      	push	{r7}
 800561c:	b095      	sub	sp, #84	@ 0x54
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005640:	643b      	str	r3, [r7, #64]	@ 0x40
 8005642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	61fb      	str	r3, [r7, #28]
   return(result);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568c:	2b01      	cmp	r3, #1
 800568e:	d118      	bne.n	80056c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	60bb      	str	r3, [r7, #8]
   return(result);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	613b      	str	r3, [r7, #16]
   return(result);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e6      	bne.n	8005690 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056d6:	bf00      	nop
 80056d8:	3754      	adds	r7, #84	@ 0x54
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	4603      	mov	r3, r0
 80056ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f4:	2b84      	cmp	r3, #132	@ 0x84
 80056f6:	d005      	beq.n	8005704 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	3303      	adds	r3, #3
 8005702:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005716:	f000 fafd 	bl	8005d14 <vTaskStartScheduler>
  
  return osOK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}

08005720 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005722:	b089      	sub	sp, #36	@ 0x24
 8005724:	af04      	add	r7, sp, #16
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d020      	beq.n	8005774 <osThreadCreate+0x54>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01c      	beq.n	8005774 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685c      	ldr	r4, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691e      	ldr	r6, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ffc8 	bl	80056e2 <makeFreeRtosPriority>
 8005752:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800575c:	9202      	str	r2, [sp, #8]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	9100      	str	r1, [sp, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	4632      	mov	r2, r6
 8005766:	4629      	mov	r1, r5
 8005768:	4620      	mov	r0, r4
 800576a:	f000 f8ed 	bl	8005948 <xTaskCreateStatic>
 800576e:	4603      	mov	r3, r0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e01c      	b.n	80057ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685c      	ldr	r4, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005780:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ffaa 	bl	80056e2 <makeFreeRtosPriority>
 800578e:	4602      	mov	r2, r0
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	9200      	str	r2, [sp, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4632      	mov	r2, r6
 800579c:	4629      	mov	r1, r5
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 f932 	bl	8005a08 <xTaskCreate>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d001      	beq.n	80057ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <osDelay+0x16>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	e000      	b.n	80057d0 <osDelay+0x18>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fa69 	bl	8005ca8 <vTaskDelay>
  
  return osOK;
 80057d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f103 0208 	add.w	r2, r3, #8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 0208 	add.w	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f103 0208 	add.w	r2, r3, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005898:	d103      	bne.n	80058a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e00c      	b.n	80058bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3308      	adds	r3, #8
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e002      	b.n	80058b0 <vListInsert+0x2e>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d2f6      	bcs.n	80058aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6852      	ldr	r2, [r2, #4]
 8005914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d103      	bne.n	8005928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	1e5a      	subs	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08e      	sub	sp, #56	@ 0x38
 800594c:	af04      	add	r7, sp, #16
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <xTaskCreateStatic+0x4a>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	61fb      	str	r3, [r7, #28]
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005992:	23a0      	movs	r3, #160	@ 0xa0
 8005994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2ba0      	cmp	r3, #160	@ 0xa0
 800599a:	d00b      	beq.n	80059b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	61bb      	str	r3, [r7, #24]
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01e      	beq.n	80059fa <xTaskCreateStatic+0xb2>
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01b      	beq.n	80059fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059d4:	2300      	movs	r3, #0
 80059d6:	9303      	str	r3, [sp, #12]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	9302      	str	r3, [sp, #8]
 80059dc:	f107 0314 	add.w	r3, r7, #20
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f851 	bl	8005a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059f4:	f000 f8ee 	bl	8005bd4 <prvAddNewTaskToReadyList>
 80059f8:	e001      	b.n	80059fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059fe:	697b      	ldr	r3, [r7, #20]
	}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3728      	adds	r7, #40	@ 0x28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08c      	sub	sp, #48	@ 0x30
 8005a0c:	af04      	add	r7, sp, #16
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 ff03 	bl	8006828 <pvPortMalloc>
 8005a22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00e      	beq.n	8005a48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a2a:	20a0      	movs	r0, #160	@ 0xa0
 8005a2c:	f000 fefc 	bl	8006828 <pvPortMalloc>
 8005a30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a3e:	e005      	b.n	8005a4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a40:	6978      	ldr	r0, [r7, #20]
 8005a42:	f000 ffbf 	bl	80069c4 <vPortFree>
 8005a46:	e001      	b.n	8005a4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d017      	beq.n	8005a82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	9302      	str	r3, [sp, #8]
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f80f 	bl	8005a94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a76:	69f8      	ldr	r0, [r7, #28]
 8005a78:	f000 f8ac 	bl	8005bd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e002      	b.n	8005a88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a88:	69bb      	ldr	r3, [r7, #24]
	}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005aac:	3b01      	subs	r3, #1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	617b      	str	r3, [r7, #20]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01f      	beq.n	8005b24 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e012      	b.n	8005b10 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	7819      	ldrb	r1, [r3, #0]
 8005af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	3334      	adds	r3, #52	@ 0x34
 8005afa:	460a      	mov	r2, r1
 8005afc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b0f      	cmp	r3, #15
 8005b14:	d9e9      	bls.n	8005aea <prvInitialiseNewTask+0x56>
 8005b16:	e000      	b.n	8005b1a <prvInitialiseNewTask+0x86>
			{
				break;
 8005b18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b22:	e003      	b.n	8005b2c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	2b06      	cmp	r3, #6
 8005b30:	d901      	bls.n	8005b36 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b32:	2306      	movs	r3, #6
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	2200      	movs	r2, #0
 8005b46:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fe67 	bl	8005820 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	3318      	adds	r3, #24
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fe62 	bl	8005820 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	f1c3 0207 	rsb	r2, r3, #7
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	334c      	adds	r3, #76	@ 0x4c
 8005b86:	224c      	movs	r2, #76	@ 0x4c
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 f85a 	bl	8006c44 <memset>
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <prvInitialiseNewTask+0x134>)
 8005b94:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <prvInitialiseNewTask+0x138>)
 8005b9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd0 <prvInitialiseNewTask+0x13c>)
 8005ba0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68f9      	ldr	r1, [r7, #12]
 8005ba6:	69b8      	ldr	r0, [r7, #24]
 8005ba8:	f000 fc2a 	bl	8006400 <pxPortInitialiseStack>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20001320 	.word	0x20001320
 8005bcc:	20001388 	.word	0x20001388
 8005bd0:	200013f0 	.word	0x200013f0

08005bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bdc:	f000 fd44 	bl	8006668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005be0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <prvAddNewTaskToReadyList+0xb8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4a29      	ldr	r2, [pc, #164]	@ (8005c8c <prvAddNewTaskToReadyList+0xb8>)
 8005be8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bea:	4b29      	ldr	r3, [pc, #164]	@ (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bf2:	4a27      	ldr	r2, [pc, #156]	@ (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bf8:	4b24      	ldr	r3, [pc, #144]	@ (8005c8c <prvAddNewTaskToReadyList+0xb8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d110      	bne.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c00:	f000 fad4 	bl	80061ac <prvInitialiseTaskLists>
 8005c04:	e00d      	b.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c06:	4b23      	ldr	r3, [pc, #140]	@ (8005c94 <prvAddNewTaskToReadyList+0xc0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c0e:	4b20      	ldr	r3, [pc, #128]	@ (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d802      	bhi.n	8005c22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c22:	4b1d      	ldr	r3, [pc, #116]	@ (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a1b      	ldr	r2, [pc, #108]	@ (8005c98 <prvAddNewTaskToReadyList+0xc4>)
 8005c2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	2201      	movs	r2, #1
 8005c32:	409a      	lsls	r2, r3
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <prvAddNewTaskToReadyList+0xc8>)
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <prvAddNewTaskToReadyList+0xcc>)
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7ff fdf0 	bl	800583a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c5a:	f000 fd37 	bl	80066cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c94 <prvAddNewTaskToReadyList+0xc0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c66:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <prvAddNewTaskToReadyList+0xbc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d207      	bcs.n	8005c84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <prvAddNewTaskToReadyList+0xd0>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c84:	bf00      	nop
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000714 	.word	0x20000714
 8005c90:	20000614 	.word	0x20000614
 8005c94:	20000720 	.word	0x20000720
 8005c98:	20000730 	.word	0x20000730
 8005c9c:	2000071c 	.word	0x2000071c
 8005ca0:	20000618 	.word	0x20000618
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cba:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <vTaskDelay+0x64>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <vTaskDelay+0x32>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60bb      	str	r3, [r7, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005cda:	f000 f885 	bl	8005de8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cde:	2100      	movs	r1, #0
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fb27 	bl	8006334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ce6:	f000 f88d 	bl	8005e04 <xTaskResumeAll>
 8005cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d107      	bne.n	8005d02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <vTaskDelay+0x68>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2000073c 	.word	0x2000073c
 8005d10:	e000ed04 	.word	0xe000ed04

08005d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	@ 0x28
 8005d18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d22:	463a      	mov	r2, r7
 8005d24:	1d39      	adds	r1, r7, #4
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fa fc18 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	9202      	str	r2, [sp, #8]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	460a      	mov	r2, r1
 8005d42:	4921      	ldr	r1, [pc, #132]	@ (8005dc8 <vTaskStartScheduler+0xb4>)
 8005d44:	4821      	ldr	r0, [pc, #132]	@ (8005dcc <vTaskStartScheduler+0xb8>)
 8005d46:	f7ff fdff 	bl	8005948 <xTaskCreateStatic>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4a20      	ldr	r2, [pc, #128]	@ (8005dd0 <vTaskStartScheduler+0xbc>)
 8005d4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d50:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd0 <vTaskStartScheduler+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	e001      	b.n	8005d62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d11b      	bne.n	8005da0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	613b      	str	r3, [r7, #16]
}
 8005d7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d7c:	4b15      	ldr	r3, [pc, #84]	@ (8005dd4 <vTaskStartScheduler+0xc0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	334c      	adds	r3, #76	@ 0x4c
 8005d82:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <vTaskStartScheduler+0xc4>)
 8005d84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d86:	4b15      	ldr	r3, [pc, #84]	@ (8005ddc <vTaskStartScheduler+0xc8>)
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d8e:	4b14      	ldr	r3, [pc, #80]	@ (8005de0 <vTaskStartScheduler+0xcc>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d94:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <vTaskStartScheduler+0xd0>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d9a:	f000 fbc1 	bl	8006520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d9e:	e00f      	b.n	8005dc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005da6:	d10b      	bne.n	8005dc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60fb      	str	r3, [r7, #12]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <vTaskStartScheduler+0xa8>
}
 8005dc0:	bf00      	nop
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	080076fc 	.word	0x080076fc
 8005dcc:	0800617d 	.word	0x0800617d
 8005dd0:	20000738 	.word	0x20000738
 8005dd4:	20000614 	.word	0x20000614
 8005dd8:	20000094 	.word	0x20000094
 8005ddc:	20000734 	.word	0x20000734
 8005de0:	20000720 	.word	0x20000720
 8005de4:	20000718 	.word	0x20000718

08005de8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005dec:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <vTaskSuspendAll+0x18>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a03      	ldr	r2, [pc, #12]	@ (8005e00 <vTaskSuspendAll+0x18>)
 8005df4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005df6:	bf00      	nop
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	2000073c 	.word	0x2000073c

08005e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e12:	4b42      	ldr	r3, [pc, #264]	@ (8005f1c <xTaskResumeAll+0x118>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10b      	bne.n	8005e32 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	603b      	str	r3, [r7, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	e7fd      	b.n	8005e2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e32:	f000 fc19 	bl	8006668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e36:	4b39      	ldr	r3, [pc, #228]	@ (8005f1c <xTaskResumeAll+0x118>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4a37      	ldr	r2, [pc, #220]	@ (8005f1c <xTaskResumeAll+0x118>)
 8005e3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e40:	4b36      	ldr	r3, [pc, #216]	@ (8005f1c <xTaskResumeAll+0x118>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d161      	bne.n	8005f0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e48:	4b35      	ldr	r3, [pc, #212]	@ (8005f20 <xTaskResumeAll+0x11c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05d      	beq.n	8005f0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e50:	e02e      	b.n	8005eb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e52:	4b34      	ldr	r3, [pc, #208]	@ (8005f24 <xTaskResumeAll+0x120>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fd48 	bl	80058f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fd43 	bl	80058f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	2201      	movs	r2, #1
 8005e74:	409a      	lsls	r2, r3
 8005e76:	4b2c      	ldr	r3, [pc, #176]	@ (8005f28 <xTaskResumeAll+0x124>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005f28 <xTaskResumeAll+0x124>)
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4a27      	ldr	r2, [pc, #156]	@ (8005f2c <xTaskResumeAll+0x128>)
 8005e8e:	441a      	add	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	4610      	mov	r0, r2
 8005e98:	f7ff fccf 	bl	800583a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea0:	4b23      	ldr	r3, [pc, #140]	@ (8005f30 <xTaskResumeAll+0x12c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005eaa:	4b22      	ldr	r3, [pc, #136]	@ (8005f34 <xTaskResumeAll+0x130>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f24 <xTaskResumeAll+0x120>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1cc      	bne.n	8005e52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ebe:	f000 fa19 	bl	80062f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f38 <xTaskResumeAll+0x134>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d010      	beq.n	8005ef0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ece:	f000 f837 	bl	8005f40 <xTaskIncrementTick>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ed8:	4b16      	ldr	r3, [pc, #88]	@ (8005f34 <xTaskResumeAll+0x130>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f1      	bne.n	8005ece <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005eea:	4b13      	ldr	r3, [pc, #76]	@ (8005f38 <xTaskResumeAll+0x134>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ef0:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <xTaskResumeAll+0x130>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005efc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f3c <xTaskResumeAll+0x138>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f0c:	f000 fbde 	bl	80066cc <vPortExitCritical>

	return xAlreadyYielded;
 8005f10:	68bb      	ldr	r3, [r7, #8]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000073c 	.word	0x2000073c
 8005f20:	20000714 	.word	0x20000714
 8005f24:	200006d4 	.word	0x200006d4
 8005f28:	2000071c 	.word	0x2000071c
 8005f2c:	20000618 	.word	0x20000618
 8005f30:	20000614 	.word	0x20000614
 8005f34:	20000728 	.word	0x20000728
 8005f38:	20000724 	.word	0x20000724
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8006088 <xTaskIncrementTick+0x148>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 808f 	bne.w	8006072 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f54:	4b4d      	ldr	r3, [pc, #308]	@ (800608c <xTaskIncrementTick+0x14c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800608c <xTaskIncrementTick+0x14c>)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d121      	bne.n	8005fac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f68:	4b49      	ldr	r3, [pc, #292]	@ (8006090 <xTaskIncrementTick+0x150>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	603b      	str	r3, [r7, #0]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <xTaskIncrementTick+0x46>
 8005f8a:	4b41      	ldr	r3, [pc, #260]	@ (8006090 <xTaskIncrementTick+0x150>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	4b40      	ldr	r3, [pc, #256]	@ (8006094 <xTaskIncrementTick+0x154>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a3e      	ldr	r2, [pc, #248]	@ (8006090 <xTaskIncrementTick+0x150>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4a3e      	ldr	r2, [pc, #248]	@ (8006094 <xTaskIncrementTick+0x154>)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8006098 <xTaskIncrementTick+0x158>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8006098 <xTaskIncrementTick+0x158>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	f000 f9a4 	bl	80062f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fac:	4b3b      	ldr	r3, [pc, #236]	@ (800609c <xTaskIncrementTick+0x15c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d348      	bcc.n	8006048 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fb6:	4b36      	ldr	r3, [pc, #216]	@ (8006090 <xTaskIncrementTick+0x150>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc0:	4b36      	ldr	r3, [pc, #216]	@ (800609c <xTaskIncrementTick+0x15c>)
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fc6:	601a      	str	r2, [r3, #0]
					break;
 8005fc8:	e03e      	b.n	8006048 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fca:	4b31      	ldr	r3, [pc, #196]	@ (8006090 <xTaskIncrementTick+0x150>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d203      	bcs.n	8005fea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800609c <xTaskIncrementTick+0x15c>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fe8:	e02e      	b.n	8006048 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fc80 	bl	80058f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3318      	adds	r3, #24
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fc77 	bl	80058f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600a:	2201      	movs	r2, #1
 800600c:	409a      	lsls	r2, r3
 800600e:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <xTaskIncrementTick+0x160>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	4a22      	ldr	r2, [pc, #136]	@ (80060a0 <xTaskIncrementTick+0x160>)
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4a1f      	ldr	r2, [pc, #124]	@ (80060a4 <xTaskIncrementTick+0x164>)
 8006026:	441a      	add	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f7ff fc03 	bl	800583a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006038:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <xTaskIncrementTick+0x168>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	429a      	cmp	r2, r3
 8006040:	d3b9      	bcc.n	8005fb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006046:	e7b6      	b.n	8005fb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006048:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <xTaskIncrementTick+0x168>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604e:	4915      	ldr	r1, [pc, #84]	@ (80060a4 <xTaskIncrementTick+0x164>)
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d901      	bls.n	8006064 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006064:	4b11      	ldr	r3, [pc, #68]	@ (80060ac <xTaskIncrementTick+0x16c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e004      	b.n	800607c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006072:	4b0f      	ldr	r3, [pc, #60]	@ (80060b0 <xTaskIncrementTick+0x170>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	4a0d      	ldr	r2, [pc, #52]	@ (80060b0 <xTaskIncrementTick+0x170>)
 800607a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800607c:	697b      	ldr	r3, [r7, #20]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	2000073c 	.word	0x2000073c
 800608c:	20000718 	.word	0x20000718
 8006090:	200006cc 	.word	0x200006cc
 8006094:	200006d0 	.word	0x200006d0
 8006098:	2000072c 	.word	0x2000072c
 800609c:	20000734 	.word	0x20000734
 80060a0:	2000071c 	.word	0x2000071c
 80060a4:	20000618 	.word	0x20000618
 80060a8:	20000614 	.word	0x20000614
 80060ac:	20000728 	.word	0x20000728
 80060b0:	20000724 	.word	0x20000724

080060b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006164 <vTaskSwitchContext+0xb0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060c2:	4b29      	ldr	r3, [pc, #164]	@ (8006168 <vTaskSwitchContext+0xb4>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060c8:	e045      	b.n	8006156 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80060ca:	4b27      	ldr	r3, [pc, #156]	@ (8006168 <vTaskSwitchContext+0xb4>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d0:	4b26      	ldr	r3, [pc, #152]	@ (800616c <vTaskSwitchContext+0xb8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	fab3 f383 	clz	r3, r3
 80060dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	f1c3 031f 	rsb	r3, r3, #31
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	4922      	ldr	r1, [pc, #136]	@ (8006170 <vTaskSwitchContext+0xbc>)
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <vTaskSwitchContext+0x5e>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	e7fd      	b.n	800610e <vTaskSwitchContext+0x5a>
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <vTaskSwitchContext+0xbc>)
 800611e:	4413      	add	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	3308      	adds	r3, #8
 8006134:	429a      	cmp	r2, r3
 8006136:	d104      	bne.n	8006142 <vTaskSwitchContext+0x8e>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <vTaskSwitchContext+0xc0>)
 800614a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800614c:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <vTaskSwitchContext+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	334c      	adds	r3, #76	@ 0x4c
 8006152:	4a09      	ldr	r2, [pc, #36]	@ (8006178 <vTaskSwitchContext+0xc4>)
 8006154:	6013      	str	r3, [r2, #0]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000073c 	.word	0x2000073c
 8006168:	20000728 	.word	0x20000728
 800616c:	2000071c 	.word	0x2000071c
 8006170:	20000618 	.word	0x20000618
 8006174:	20000614 	.word	0x20000614
 8006178:	20000094 	.word	0x20000094

0800617c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006184:	f000 f852 	bl	800622c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <prvIdleTask+0x28>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d9f9      	bls.n	8006184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006190:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <prvIdleTask+0x2c>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061a0:	e7f0      	b.n	8006184 <prvIdleTask+0x8>
 80061a2:	bf00      	nop
 80061a4:	20000618 	.word	0x20000618
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	e00c      	b.n	80061d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4a12      	ldr	r2, [pc, #72]	@ (800620c <prvInitialiseTaskLists+0x60>)
 80061c4:	4413      	add	r3, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fb0a 	bl	80057e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3301      	adds	r3, #1
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d9ef      	bls.n	80061b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061d8:	480d      	ldr	r0, [pc, #52]	@ (8006210 <prvInitialiseTaskLists+0x64>)
 80061da:	f7ff fb01 	bl	80057e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061de:	480d      	ldr	r0, [pc, #52]	@ (8006214 <prvInitialiseTaskLists+0x68>)
 80061e0:	f7ff fafe 	bl	80057e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061e4:	480c      	ldr	r0, [pc, #48]	@ (8006218 <prvInitialiseTaskLists+0x6c>)
 80061e6:	f7ff fafb 	bl	80057e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061ea:	480c      	ldr	r0, [pc, #48]	@ (800621c <prvInitialiseTaskLists+0x70>)
 80061ec:	f7ff faf8 	bl	80057e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061f0:	480b      	ldr	r0, [pc, #44]	@ (8006220 <prvInitialiseTaskLists+0x74>)
 80061f2:	f7ff faf5 	bl	80057e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <prvInitialiseTaskLists+0x78>)
 80061f8:	4a05      	ldr	r2, [pc, #20]	@ (8006210 <prvInitialiseTaskLists+0x64>)
 80061fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006228 <prvInitialiseTaskLists+0x7c>)
 80061fe:	4a05      	ldr	r2, [pc, #20]	@ (8006214 <prvInitialiseTaskLists+0x68>)
 8006200:	601a      	str	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000618 	.word	0x20000618
 8006210:	200006a4 	.word	0x200006a4
 8006214:	200006b8 	.word	0x200006b8
 8006218:	200006d4 	.word	0x200006d4
 800621c:	200006e8 	.word	0x200006e8
 8006220:	20000700 	.word	0x20000700
 8006224:	200006cc 	.word	0x200006cc
 8006228:	200006d0 	.word	0x200006d0

0800622c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006232:	e019      	b.n	8006268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006234:	f000 fa18 	bl	8006668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006238:	4b10      	ldr	r3, [pc, #64]	@ (800627c <prvCheckTasksWaitingTermination+0x50>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fb55 	bl	80058f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <prvCheckTasksWaitingTermination+0x54>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3b01      	subs	r3, #1
 8006250:	4a0b      	ldr	r2, [pc, #44]	@ (8006280 <prvCheckTasksWaitingTermination+0x54>)
 8006252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <prvCheckTasksWaitingTermination+0x58>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3b01      	subs	r3, #1
 800625a:	4a0a      	ldr	r2, [pc, #40]	@ (8006284 <prvCheckTasksWaitingTermination+0x58>)
 800625c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800625e:	f000 fa35 	bl	80066cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f810 	bl	8006288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006268:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <prvCheckTasksWaitingTermination+0x58>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e1      	bne.n	8006234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200006e8 	.word	0x200006e8
 8006280:	20000714 	.word	0x20000714
 8006284:	200006fc 	.word	0x200006fc

08006288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	334c      	adds	r3, #76	@ 0x4c
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fcdd 	bl	8006c54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d108      	bne.n	80062b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fb8b 	bl	80069c4 <vPortFree>
				vPortFree( pxTCB );
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb88 	bl	80069c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062b4:	e019      	b.n	80062ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d103      	bne.n	80062c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb7f 	bl	80069c4 <vPortFree>
	}
 80062c6:	e010      	b.n	80062ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d00b      	beq.n	80062ea <prvDeleteTCB+0x62>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60fb      	str	r3, [r7, #12]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <prvDeleteTCB+0x5e>
	}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062fa:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <prvResetNextTaskUnblockTime+0x38>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006304:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <prvResetNextTaskUnblockTime+0x3c>)
 8006306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800630a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800630c:	e008      	b.n	8006320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630e:	4b07      	ldr	r3, [pc, #28]	@ (800632c <prvResetNextTaskUnblockTime+0x38>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a04      	ldr	r2, [pc, #16]	@ (8006330 <prvResetNextTaskUnblockTime+0x3c>)
 800631e:	6013      	str	r3, [r2, #0]
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	200006cc 	.word	0x200006cc
 8006330:	20000734 	.word	0x20000734

08006334 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800633e:	4b29      	ldr	r3, [pc, #164]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006344:	4b28      	ldr	r3, [pc, #160]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3304      	adds	r3, #4
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fad2 	bl	80058f4 <uxListRemove>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006356:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	2201      	movs	r2, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	43da      	mvns	r2, r3
 8006364:	4b21      	ldr	r3, [pc, #132]	@ (80063ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4013      	ands	r3, r2
 800636a:	4a20      	ldr	r2, [pc, #128]	@ (80063ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800636c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006374:	d10a      	bne.n	800638c <prvAddCurrentTaskToDelayedList+0x58>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800637c:	4b1a      	ldr	r3, [pc, #104]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	481a      	ldr	r0, [pc, #104]	@ (80063f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006386:	f7ff fa58 	bl	800583a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800638a:	e026      	b.n	80063da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006394:	4b14      	ldr	r3, [pc, #80]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d209      	bcs.n	80063b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a4:	4b13      	ldr	r3, [pc, #76]	@ (80063f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b0f      	ldr	r3, [pc, #60]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7ff fa66 	bl	8005882 <vListInsert>
}
 80063b6:	e010      	b.n	80063da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b8:	4b0f      	ldr	r3, [pc, #60]	@ (80063f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f7ff fa5c 	bl	8005882 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063ca:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d202      	bcs.n	80063da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063d4:	4a09      	ldr	r2, [pc, #36]	@ (80063fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6013      	str	r3, [r2, #0]
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000718 	.word	0x20000718
 80063e8:	20000614 	.word	0x20000614
 80063ec:	2000071c 	.word	0x2000071c
 80063f0:	20000700 	.word	0x20000700
 80063f4:	200006d0 	.word	0x200006d0
 80063f8:	200006cc 	.word	0x200006cc
 80063fc:	20000734 	.word	0x20000734

08006400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3b04      	subs	r3, #4
 8006410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b04      	subs	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f023 0201 	bic.w	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b04      	subs	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006430:	4a0c      	ldr	r2, [pc, #48]	@ (8006464 <pxPortInitialiseStack+0x64>)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b14      	subs	r3, #20
 800643a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3b04      	subs	r3, #4
 8006446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f06f 0202 	mvn.w	r2, #2
 800644e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3b20      	subs	r3, #32
 8006454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	08006469 	.word	0x08006469

08006468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006472:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <prvTaskExitError+0x58>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800647a:	d00b      	beq.n	8006494 <prvTaskExitError+0x2c>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60fb      	str	r3, [r7, #12]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <prvTaskExitError+0x28>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60bb      	str	r3, [r7, #8]
}
 80064a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064a8:	bf00      	nop
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0fc      	beq.n	80064aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000090 	.word	0x20000090
	...

080064d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064d0:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <pxCurrentTCBConst2>)
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	6808      	ldr	r0, [r1, #0]
 80064d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	f380 8809 	msr	PSP, r0
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f380 8811 	msr	BASEPRI, r0
 80064ea:	4770      	bx	lr
 80064ec:	f3af 8000 	nop.w

080064f0 <pxCurrentTCBConst2>:
 80064f0:	20000614 	.word	0x20000614
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064f8:	4808      	ldr	r0, [pc, #32]	@ (800651c <prvPortStartFirstTask+0x24>)
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	6800      	ldr	r0, [r0, #0]
 80064fe:	f380 8808 	msr	MSP, r0
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8814 	msr	CONTROL, r0
 800650a:	b662      	cpsie	i
 800650c:	b661      	cpsie	f
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	df00      	svc	0
 8006518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800651a:	bf00      	nop
 800651c:	e000ed08 	.word	0xe000ed08

08006520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006526:	4b47      	ldr	r3, [pc, #284]	@ (8006644 <xPortStartScheduler+0x124>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a47      	ldr	r2, [pc, #284]	@ (8006648 <xPortStartScheduler+0x128>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10b      	bne.n	8006548 <xPortStartScheduler+0x28>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006548:	4b3e      	ldr	r3, [pc, #248]	@ (8006644 <xPortStartScheduler+0x124>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a3f      	ldr	r2, [pc, #252]	@ (800664c <xPortStartScheduler+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10b      	bne.n	800656a <xPortStartScheduler+0x4a>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60fb      	str	r3, [r7, #12]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800656a:	4b39      	ldr	r3, [pc, #228]	@ (8006650 <xPortStartScheduler+0x130>)
 800656c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	22ff      	movs	r2, #255	@ 0xff
 800657a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800658c:	b2da      	uxtb	r2, r3
 800658e:	4b31      	ldr	r3, [pc, #196]	@ (8006654 <xPortStartScheduler+0x134>)
 8006590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006592:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <xPortStartScheduler+0x138>)
 8006594:	2207      	movs	r2, #7
 8006596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006598:	e009      	b.n	80065ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800659a:	4b2f      	ldr	r3, [pc, #188]	@ (8006658 <xPortStartScheduler+0x138>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3b01      	subs	r3, #1
 80065a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006658 <xPortStartScheduler+0x138>)
 80065a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b6:	2b80      	cmp	r3, #128	@ 0x80
 80065b8:	d0ef      	beq.n	800659a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065ba:	4b27      	ldr	r3, [pc, #156]	@ (8006658 <xPortStartScheduler+0x138>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1c3 0307 	rsb	r3, r3, #7
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d00b      	beq.n	80065de <xPortStartScheduler+0xbe>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60bb      	str	r3, [r7, #8]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065de:	4b1e      	ldr	r3, [pc, #120]	@ (8006658 <xPortStartScheduler+0x138>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <xPortStartScheduler+0x138>)
 80065e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <xPortStartScheduler+0x138>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065f0:	4a19      	ldr	r2, [pc, #100]	@ (8006658 <xPortStartScheduler+0x138>)
 80065f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065fc:	4b17      	ldr	r3, [pc, #92]	@ (800665c <xPortStartScheduler+0x13c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <xPortStartScheduler+0x13c>)
 8006602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006608:	4b14      	ldr	r3, [pc, #80]	@ (800665c <xPortStartScheduler+0x13c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a13      	ldr	r2, [pc, #76]	@ (800665c <xPortStartScheduler+0x13c>)
 800660e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006614:	f000 f8da 	bl	80067cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006618:	4b11      	ldr	r3, [pc, #68]	@ (8006660 <xPortStartScheduler+0x140>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800661e:	f000 f8f9 	bl	8006814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006622:	4b10      	ldr	r3, [pc, #64]	@ (8006664 <xPortStartScheduler+0x144>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a0f      	ldr	r2, [pc, #60]	@ (8006664 <xPortStartScheduler+0x144>)
 8006628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800662c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800662e:	f7ff ff63 	bl	80064f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006632:	f7ff fd3f 	bl	80060b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006636:	f7ff ff17 	bl	8006468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	e000ed00 	.word	0xe000ed00
 8006648:	410fc271 	.word	0x410fc271
 800664c:	410fc270 	.word	0x410fc270
 8006650:	e000e400 	.word	0xe000e400
 8006654:	20000740 	.word	0x20000740
 8006658:	20000744 	.word	0x20000744
 800665c:	e000ed20 	.word	0xe000ed20
 8006660:	20000090 	.word	0x20000090
 8006664:	e000ef34 	.word	0xe000ef34

08006668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006682:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <vPortEnterCritical+0x5c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	4a0e      	ldr	r2, [pc, #56]	@ (80066c4 <vPortEnterCritical+0x5c>)
 800668a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800668c:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <vPortEnterCritical+0x5c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d110      	bne.n	80066b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006694:	4b0c      	ldr	r3, [pc, #48]	@ (80066c8 <vPortEnterCritical+0x60>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	603b      	str	r3, [r7, #0]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <vPortEnterCritical+0x4a>
	}
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000090 	.word	0x20000090
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066d2:	4b12      	ldr	r3, [pc, #72]	@ (800671c <vPortExitCritical+0x50>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <vPortExitCritical+0x26>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	607b      	str	r3, [r7, #4]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <vPortExitCritical+0x50>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	4a08      	ldr	r2, [pc, #32]	@ (800671c <vPortExitCritical+0x50>)
 80066fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066fc:	4b07      	ldr	r3, [pc, #28]	@ (800671c <vPortExitCritical+0x50>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d105      	bne.n	8006710 <vPortExitCritical+0x44>
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800670e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	20000090 	.word	0x20000090

08006720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006720:	f3ef 8009 	mrs	r0, PSP
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4b15      	ldr	r3, [pc, #84]	@ (8006780 <pxCurrentTCBConst>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f01e 0f10 	tst.w	lr, #16
 8006730:	bf08      	it	eq
 8006732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	6010      	str	r0, [r2, #0]
 800673c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006744:	f380 8811 	msr	BASEPRI, r0
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f7ff fcb0 	bl	80060b4 <vTaskSwitchContext>
 8006754:	f04f 0000 	mov.w	r0, #0
 8006758:	f380 8811 	msr	BASEPRI, r0
 800675c:	bc09      	pop	{r0, r3}
 800675e:	6819      	ldr	r1, [r3, #0]
 8006760:	6808      	ldr	r0, [r1, #0]
 8006762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006766:	f01e 0f10 	tst.w	lr, #16
 800676a:	bf08      	it	eq
 800676c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006770:	f380 8809 	msr	PSP, r0
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	f3af 8000 	nop.w

08006780 <pxCurrentTCBConst>:
 8006780:	20000614 	.word	0x20000614
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
}
 80067a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067a2:	f7ff fbcd 	bl	8005f40 <xTaskIncrementTick>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ac:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <SysTick_Handler+0x40>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f383 8811 	msr	BASEPRI, r3
}
 80067be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006800 <vPortSetupTimerInterrupt+0x34>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <vPortSetupTimerInterrupt+0x38>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <vPortSetupTimerInterrupt+0x3c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a0a      	ldr	r2, [pc, #40]	@ (800680c <vPortSetupTimerInterrupt+0x40>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	099b      	lsrs	r3, r3, #6
 80067e8:	4a09      	ldr	r2, [pc, #36]	@ (8006810 <vPortSetupTimerInterrupt+0x44>)
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ee:	4b04      	ldr	r3, [pc, #16]	@ (8006800 <vPortSetupTimerInterrupt+0x34>)
 80067f0:	2207      	movs	r2, #7
 80067f2:	601a      	str	r2, [r3, #0]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	e000e010 	.word	0xe000e010
 8006804:	e000e018 	.word	0xe000e018
 8006808:	20000000 	.word	0x20000000
 800680c:	10624dd3 	.word	0x10624dd3
 8006810:	e000e014 	.word	0xe000e014

08006814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006824 <vPortEnableVFP+0x10>
 8006818:	6801      	ldr	r1, [r0, #0]
 800681a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800681e:	6001      	str	r1, [r0, #0]
 8006820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006822:	bf00      	nop
 8006824:	e000ed88 	.word	0xe000ed88

08006828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	@ 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006834:	f7ff fad8 	bl	8005de8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006838:	4b5c      	ldr	r3, [pc, #368]	@ (80069ac <pvPortMalloc+0x184>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006840:	f000 f924 	bl	8006a8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006844:	4b5a      	ldr	r3, [pc, #360]	@ (80069b0 <pvPortMalloc+0x188>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8095 	bne.w	800697c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01e      	beq.n	8006896 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006858:	2208      	movs	r2, #8
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	2b00      	cmp	r3, #0
 8006868:	d015      	beq.n	8006896 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	3308      	adds	r3, #8
 8006872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <pvPortMalloc+0x6e>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	617b      	str	r3, [r7, #20]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d06f      	beq.n	800697c <pvPortMalloc+0x154>
 800689c:	4b45      	ldr	r3, [pc, #276]	@ (80069b4 <pvPortMalloc+0x18c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d86a      	bhi.n	800697c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068a6:	4b44      	ldr	r3, [pc, #272]	@ (80069b8 <pvPortMalloc+0x190>)
 80068a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068aa:	4b43      	ldr	r3, [pc, #268]	@ (80069b8 <pvPortMalloc+0x190>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b0:	e004      	b.n	80068bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d903      	bls.n	80068ce <pvPortMalloc+0xa6>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f1      	bne.n	80068b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068ce:	4b37      	ldr	r3, [pc, #220]	@ (80069ac <pvPortMalloc+0x184>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d051      	beq.n	800697c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2208      	movs	r2, #8
 80068de:	4413      	add	r3, r2
 80068e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	2308      	movs	r3, #8
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d920      	bls.n	800693c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <pvPortMalloc+0xfc>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	613b      	str	r3, [r7, #16]
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006936:	69b8      	ldr	r0, [r7, #24]
 8006938:	f000 f90a 	bl	8006b50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800693c:	4b1d      	ldr	r3, [pc, #116]	@ (80069b4 <pvPortMalloc+0x18c>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	4a1b      	ldr	r2, [pc, #108]	@ (80069b4 <pvPortMalloc+0x18c>)
 8006948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800694a:	4b1a      	ldr	r3, [pc, #104]	@ (80069b4 <pvPortMalloc+0x18c>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b1b      	ldr	r3, [pc, #108]	@ (80069bc <pvPortMalloc+0x194>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d203      	bcs.n	800695e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006956:	4b17      	ldr	r3, [pc, #92]	@ (80069b4 <pvPortMalloc+0x18c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <pvPortMalloc+0x194>)
 800695c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	431a      	orrs	r2, r3
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006972:	4b13      	ldr	r3, [pc, #76]	@ (80069c0 <pvPortMalloc+0x198>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a11      	ldr	r2, [pc, #68]	@ (80069c0 <pvPortMalloc+0x198>)
 800697a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800697c:	f7ff fa42 	bl	8005e04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <pvPortMalloc+0x17a>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60fb      	str	r3, [r7, #12]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <pvPortMalloc+0x176>
	return pvReturn;
 80069a2:	69fb      	ldr	r3, [r7, #28]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3728      	adds	r7, #40	@ 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20001308 	.word	0x20001308
 80069b0:	2000131c 	.word	0x2000131c
 80069b4:	2000130c 	.word	0x2000130c
 80069b8:	20001300 	.word	0x20001300
 80069bc:	20001310 	.word	0x20001310
 80069c0:	20001314 	.word	0x20001314

080069c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04f      	beq.n	8006a76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069d6:	2308      	movs	r3, #8
 80069d8:	425b      	negs	r3, r3
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	4b25      	ldr	r3, [pc, #148]	@ (8006a80 <vPortFree+0xbc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <vPortFree+0x46>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60fb      	str	r3, [r7, #12]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <vPortFree+0x66>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60bb      	str	r3, [r7, #8]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4b14      	ldr	r3, [pc, #80]	@ (8006a80 <vPortFree+0xbc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4013      	ands	r3, r2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01e      	beq.n	8006a76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11a      	bne.n	8006a76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	4b0e      	ldr	r3, [pc, #56]	@ (8006a80 <vPortFree+0xbc>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a50:	f7ff f9ca 	bl	8005de8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <vPortFree+0xc0>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	4a09      	ldr	r2, [pc, #36]	@ (8006a84 <vPortFree+0xc0>)
 8006a60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a62:	6938      	ldr	r0, [r7, #16]
 8006a64:	f000 f874 	bl	8006b50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a68:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <vPortFree+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	4a06      	ldr	r2, [pc, #24]	@ (8006a88 <vPortFree+0xc4>)
 8006a70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a72:	f7ff f9c7 	bl	8005e04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2000131c 	.word	0x2000131c
 8006a84:	2000130c 	.word	0x2000130c
 8006a88:	20001318 	.word	0x20001318

08006a8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006a96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a98:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <prvHeapInit+0xac>)
 8006a9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3307      	adds	r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0307 	bic.w	r3, r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	4a1f      	ldr	r2, [pc, #124]	@ (8006b38 <prvHeapInit+0xac>)
 8006abc:	4413      	add	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b3c <prvHeapInit+0xb0>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aca:	4b1c      	ldr	r3, [pc, #112]	@ (8006b3c <prvHeapInit+0xb0>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad8:	2208      	movs	r2, #8
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a15      	ldr	r2, [pc, #84]	@ (8006b40 <prvHeapInit+0xb4>)
 8006aec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006aee:	4b14      	ldr	r3, [pc, #80]	@ (8006b40 <prvHeapInit+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006af6:	4b12      	ldr	r3, [pc, #72]	@ (8006b40 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	1ad2      	subs	r2, r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b40 <prvHeapInit+0xb4>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a0a      	ldr	r2, [pc, #40]	@ (8006b44 <prvHeapInit+0xb8>)
 8006b1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a09      	ldr	r2, [pc, #36]	@ (8006b48 <prvHeapInit+0xbc>)
 8006b22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b24:	4b09      	ldr	r3, [pc, #36]	@ (8006b4c <prvHeapInit+0xc0>)
 8006b26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b2a:	601a      	str	r2, [r3, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	20000748 	.word	0x20000748
 8006b3c:	20001300 	.word	0x20001300
 8006b40:	20001308 	.word	0x20001308
 8006b44:	20001310 	.word	0x20001310
 8006b48:	2000130c 	.word	0x2000130c
 8006b4c:	2000131c 	.word	0x2000131c

08006b50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b58:	4b28      	ldr	r3, [pc, #160]	@ (8006bfc <prvInsertBlockIntoFreeList+0xac>)
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e002      	b.n	8006b64 <prvInsertBlockIntoFreeList+0x14>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d8f7      	bhi.n	8006b5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d108      	bne.n	8006b92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	441a      	add	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d118      	bne.n	8006bd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <prvInsertBlockIntoFreeList+0xb0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d00d      	beq.n	8006bce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e008      	b.n	8006be0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bce:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e003      	b.n	8006be0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d002      	beq.n	8006bee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bee:	bf00      	nop
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20001300 	.word	0x20001300
 8006c00:	20001308 	.word	0x20001308

08006c04 <siprintf>:
 8006c04:	b40e      	push	{r1, r2, r3}
 8006c06:	b500      	push	{lr}
 8006c08:	b09c      	sub	sp, #112	@ 0x70
 8006c0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c0c:	9002      	str	r0, [sp, #8]
 8006c0e:	9006      	str	r0, [sp, #24]
 8006c10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c14:	4809      	ldr	r0, [pc, #36]	@ (8006c3c <siprintf+0x38>)
 8006c16:	9107      	str	r1, [sp, #28]
 8006c18:	9104      	str	r1, [sp, #16]
 8006c1a:	4909      	ldr	r1, [pc, #36]	@ (8006c40 <siprintf+0x3c>)
 8006c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c20:	9105      	str	r1, [sp, #20]
 8006c22:	6800      	ldr	r0, [r0, #0]
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	a902      	add	r1, sp, #8
 8006c28:	f000 f94a 	bl	8006ec0 <_svfiprintf_r>
 8006c2c:	9b02      	ldr	r3, [sp, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	b01c      	add	sp, #112	@ 0x70
 8006c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c38:	b003      	add	sp, #12
 8006c3a:	4770      	bx	lr
 8006c3c:	20000094 	.word	0x20000094
 8006c40:	ffff0208 	.word	0xffff0208

08006c44 <memset>:
 8006c44:	4402      	add	r2, r0
 8006c46:	4603      	mov	r3, r0
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d100      	bne.n	8006c4e <memset+0xa>
 8006c4c:	4770      	bx	lr
 8006c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c52:	e7f9      	b.n	8006c48 <memset+0x4>

08006c54 <_reclaim_reent>:
 8006c54:	4b29      	ldr	r3, [pc, #164]	@ (8006cfc <_reclaim_reent+0xa8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	b570      	push	{r4, r5, r6, lr}
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	d04b      	beq.n	8006cf8 <_reclaim_reent+0xa4>
 8006c60:	69c3      	ldr	r3, [r0, #28]
 8006c62:	b1ab      	cbz	r3, 8006c90 <_reclaim_reent+0x3c>
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	b16b      	cbz	r3, 8006c84 <_reclaim_reent+0x30>
 8006c68:	2500      	movs	r5, #0
 8006c6a:	69e3      	ldr	r3, [r4, #28]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	5959      	ldr	r1, [r3, r5]
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d13b      	bne.n	8006cec <_reclaim_reent+0x98>
 8006c74:	3504      	adds	r5, #4
 8006c76:	2d80      	cmp	r5, #128	@ 0x80
 8006c78:	d1f7      	bne.n	8006c6a <_reclaim_reent+0x16>
 8006c7a:	69e3      	ldr	r3, [r4, #28]
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	68d9      	ldr	r1, [r3, #12]
 8006c80:	f000 f878 	bl	8006d74 <_free_r>
 8006c84:	69e3      	ldr	r3, [r4, #28]
 8006c86:	6819      	ldr	r1, [r3, #0]
 8006c88:	b111      	cbz	r1, 8006c90 <_reclaim_reent+0x3c>
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 f872 	bl	8006d74 <_free_r>
 8006c90:	6961      	ldr	r1, [r4, #20]
 8006c92:	b111      	cbz	r1, 8006c9a <_reclaim_reent+0x46>
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 f86d 	bl	8006d74 <_free_r>
 8006c9a:	69e1      	ldr	r1, [r4, #28]
 8006c9c:	b111      	cbz	r1, 8006ca4 <_reclaim_reent+0x50>
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 f868 	bl	8006d74 <_free_r>
 8006ca4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ca6:	b111      	cbz	r1, 8006cae <_reclaim_reent+0x5a>
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 f863 	bl	8006d74 <_free_r>
 8006cae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cb0:	b111      	cbz	r1, 8006cb8 <_reclaim_reent+0x64>
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f85e 	bl	8006d74 <_free_r>
 8006cb8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cba:	b111      	cbz	r1, 8006cc2 <_reclaim_reent+0x6e>
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 f859 	bl	8006d74 <_free_r>
 8006cc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006cc4:	b111      	cbz	r1, 8006ccc <_reclaim_reent+0x78>
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f854 	bl	8006d74 <_free_r>
 8006ccc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006cce:	b111      	cbz	r1, 8006cd6 <_reclaim_reent+0x82>
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 f84f 	bl	8006d74 <_free_r>
 8006cd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006cd8:	b111      	cbz	r1, 8006ce0 <_reclaim_reent+0x8c>
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f84a 	bl	8006d74 <_free_r>
 8006ce0:	6a23      	ldr	r3, [r4, #32]
 8006ce2:	b14b      	cbz	r3, 8006cf8 <_reclaim_reent+0xa4>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cea:	4718      	bx	r3
 8006cec:	680e      	ldr	r6, [r1, #0]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f840 	bl	8006d74 <_free_r>
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	e7bb      	b.n	8006c70 <_reclaim_reent+0x1c>
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000094 	.word	0x20000094

08006d00 <__errno>:
 8006d00:	4b01      	ldr	r3, [pc, #4]	@ (8006d08 <__errno+0x8>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000094 	.word	0x20000094

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d44 <__libc_init_array+0x38>)
 8006d10:	4c0d      	ldr	r4, [pc, #52]	@ (8006d48 <__libc_init_array+0x3c>)
 8006d12:	1b64      	subs	r4, r4, r5
 8006d14:	10a4      	asrs	r4, r4, #2
 8006d16:	2600      	movs	r6, #0
 8006d18:	42a6      	cmp	r6, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d4c <__libc_init_array+0x40>)
 8006d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006d50 <__libc_init_array+0x44>)
 8006d20:	f000 fc66 	bl	80075f0 <_init>
 8006d24:	1b64      	subs	r4, r4, r5
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	2600      	movs	r6, #0
 8006d2a:	42a6      	cmp	r6, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d34:	4798      	blx	r3
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3e:	4798      	blx	r3
 8006d40:	3601      	adds	r6, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	08007788 	.word	0x08007788
 8006d48:	08007788 	.word	0x08007788
 8006d4c:	08007788 	.word	0x08007788
 8006d50:	0800778c 	.word	0x0800778c

08006d54 <__retarget_lock_acquire_recursive>:
 8006d54:	4770      	bx	lr

08006d56 <__retarget_lock_release_recursive>:
 8006d56:	4770      	bx	lr

08006d58 <memcpy>:
 8006d58:	440a      	add	r2, r1
 8006d5a:	4291      	cmp	r1, r2
 8006d5c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d60:	d100      	bne.n	8006d64 <memcpy+0xc>
 8006d62:	4770      	bx	lr
 8006d64:	b510      	push	{r4, lr}
 8006d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d6e:	4291      	cmp	r1, r2
 8006d70:	d1f9      	bne.n	8006d66 <memcpy+0xe>
 8006d72:	bd10      	pop	{r4, pc}

08006d74 <_free_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4605      	mov	r5, r0
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	d041      	beq.n	8006e00 <_free_r+0x8c>
 8006d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d80:	1f0c      	subs	r4, r1, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfb8      	it	lt
 8006d86:	18e4      	addlt	r4, r4, r3
 8006d88:	f000 fbc6 	bl	8007518 <__malloc_lock>
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006e04 <_free_r+0x90>)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	b933      	cbnz	r3, 8006da0 <_free_r+0x2c>
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	6014      	str	r4, [r2, #0]
 8006d96:	4628      	mov	r0, r5
 8006d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d9c:	f000 bbc2 	b.w	8007524 <__malloc_unlock>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d908      	bls.n	8006db6 <_free_r+0x42>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	1821      	adds	r1, r4, r0
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1809      	addeq	r1, r1, r0
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	e7ed      	b.n	8006d92 <_free_r+0x1e>
 8006db6:	461a      	mov	r2, r3
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	b10b      	cbz	r3, 8006dc0 <_free_r+0x4c>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d9fa      	bls.n	8006db6 <_free_r+0x42>
 8006dc0:	6811      	ldr	r1, [r2, #0]
 8006dc2:	1850      	adds	r0, r2, r1
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	d10b      	bne.n	8006de0 <_free_r+0x6c>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	4401      	add	r1, r0
 8006dcc:	1850      	adds	r0, r2, r1
 8006dce:	4283      	cmp	r3, r0
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	d1e0      	bne.n	8006d96 <_free_r+0x22>
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6053      	str	r3, [r2, #4]
 8006dda:	4408      	add	r0, r1
 8006ddc:	6010      	str	r0, [r2, #0]
 8006dde:	e7da      	b.n	8006d96 <_free_r+0x22>
 8006de0:	d902      	bls.n	8006de8 <_free_r+0x74>
 8006de2:	230c      	movs	r3, #12
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	e7d6      	b.n	8006d96 <_free_r+0x22>
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	1821      	adds	r1, r4, r0
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf04      	itt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	bf04      	itt	eq
 8006df8:	1809      	addeq	r1, r1, r0
 8006dfa:	6021      	streq	r1, [r4, #0]
 8006dfc:	6054      	str	r4, [r2, #4]
 8006dfe:	e7ca      	b.n	8006d96 <_free_r+0x22>
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
 8006e02:	bf00      	nop
 8006e04:	20001464 	.word	0x20001464

08006e08 <__ssputs_r>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	688e      	ldr	r6, [r1, #8]
 8006e0e:	461f      	mov	r7, r3
 8006e10:	42be      	cmp	r6, r7
 8006e12:	680b      	ldr	r3, [r1, #0]
 8006e14:	4682      	mov	sl, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4690      	mov	r8, r2
 8006e1a:	d82d      	bhi.n	8006e78 <__ssputs_r+0x70>
 8006e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e24:	d026      	beq.n	8006e74 <__ssputs_r+0x6c>
 8006e26:	6965      	ldr	r5, [r4, #20]
 8006e28:	6909      	ldr	r1, [r1, #16]
 8006e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e2e:	eba3 0901 	sub.w	r9, r3, r1
 8006e32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e36:	1c7b      	adds	r3, r7, #1
 8006e38:	444b      	add	r3, r9
 8006e3a:	106d      	asrs	r5, r5, #1
 8006e3c:	429d      	cmp	r5, r3
 8006e3e:	bf38      	it	cc
 8006e40:	461d      	movcc	r5, r3
 8006e42:	0553      	lsls	r3, r2, #21
 8006e44:	d527      	bpl.n	8006e96 <__ssputs_r+0x8e>
 8006e46:	4629      	mov	r1, r5
 8006e48:	f000 f958 	bl	80070fc <_malloc_r>
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	b360      	cbz	r0, 8006eaa <__ssputs_r+0xa2>
 8006e50:	6921      	ldr	r1, [r4, #16]
 8006e52:	464a      	mov	r2, r9
 8006e54:	f7ff ff80 	bl	8006d58 <memcpy>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	6126      	str	r6, [r4, #16]
 8006e66:	6165      	str	r5, [r4, #20]
 8006e68:	444e      	add	r6, r9
 8006e6a:	eba5 0509 	sub.w	r5, r5, r9
 8006e6e:	6026      	str	r6, [r4, #0]
 8006e70:	60a5      	str	r5, [r4, #8]
 8006e72:	463e      	mov	r6, r7
 8006e74:	42be      	cmp	r6, r7
 8006e76:	d900      	bls.n	8006e7a <__ssputs_r+0x72>
 8006e78:	463e      	mov	r6, r7
 8006e7a:	6820      	ldr	r0, [r4, #0]
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	4641      	mov	r1, r8
 8006e80:	f000 fb84 	bl	800758c <memmove>
 8006e84:	68a3      	ldr	r3, [r4, #8]
 8006e86:	1b9b      	subs	r3, r3, r6
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	4433      	add	r3, r6
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	2000      	movs	r0, #0
 8006e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e96:	462a      	mov	r2, r5
 8006e98:	f000 fb4a 	bl	8007530 <_realloc_r>
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d1e0      	bne.n	8006e64 <__ssputs_r+0x5c>
 8006ea2:	6921      	ldr	r1, [r4, #16]
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	f7ff ff65 	bl	8006d74 <_free_r>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	f8ca 3000 	str.w	r3, [sl]
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ebc:	e7e9      	b.n	8006e92 <__ssputs_r+0x8a>
	...

08006ec0 <_svfiprintf_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4698      	mov	r8, r3
 8006ec6:	898b      	ldrh	r3, [r1, #12]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	b09d      	sub	sp, #116	@ 0x74
 8006ecc:	4607      	mov	r7, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	d510      	bpl.n	8006ef6 <_svfiprintf_r+0x36>
 8006ed4:	690b      	ldr	r3, [r1, #16]
 8006ed6:	b973      	cbnz	r3, 8006ef6 <_svfiprintf_r+0x36>
 8006ed8:	2140      	movs	r1, #64	@ 0x40
 8006eda:	f000 f90f 	bl	80070fc <_malloc_r>
 8006ede:	6028      	str	r0, [r5, #0]
 8006ee0:	6128      	str	r0, [r5, #16]
 8006ee2:	b930      	cbnz	r0, 8006ef2 <_svfiprintf_r+0x32>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eec:	b01d      	add	sp, #116	@ 0x74
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	2340      	movs	r3, #64	@ 0x40
 8006ef4:	616b      	str	r3, [r5, #20]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efa:	2320      	movs	r3, #32
 8006efc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f04:	2330      	movs	r3, #48	@ 0x30
 8006f06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070a4 <_svfiprintf_r+0x1e4>
 8006f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f0e:	f04f 0901 	mov.w	r9, #1
 8006f12:	4623      	mov	r3, r4
 8006f14:	469a      	mov	sl, r3
 8006f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f1a:	b10a      	cbz	r2, 8006f20 <_svfiprintf_r+0x60>
 8006f1c:	2a25      	cmp	r2, #37	@ 0x25
 8006f1e:	d1f9      	bne.n	8006f14 <_svfiprintf_r+0x54>
 8006f20:	ebba 0b04 	subs.w	fp, sl, r4
 8006f24:	d00b      	beq.n	8006f3e <_svfiprintf_r+0x7e>
 8006f26:	465b      	mov	r3, fp
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff ff6b 	bl	8006e08 <__ssputs_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	f000 80a7 	beq.w	8007086 <_svfiprintf_r+0x1c6>
 8006f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f3a:	445a      	add	r2, fp
 8006f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 809f 	beq.w	8007086 <_svfiprintf_r+0x1c6>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f52:	f10a 0a01 	add.w	sl, sl, #1
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f60:	4654      	mov	r4, sl
 8006f62:	2205      	movs	r2, #5
 8006f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f68:	484e      	ldr	r0, [pc, #312]	@ (80070a4 <_svfiprintf_r+0x1e4>)
 8006f6a:	f7f9 f931 	bl	80001d0 <memchr>
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	b9d8      	cbnz	r0, 8006faa <_svfiprintf_r+0xea>
 8006f72:	06d0      	lsls	r0, r2, #27
 8006f74:	bf44      	itt	mi
 8006f76:	2320      	movmi	r3, #32
 8006f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f7c:	0711      	lsls	r1, r2, #28
 8006f7e:	bf44      	itt	mi
 8006f80:	232b      	movmi	r3, #43	@ 0x2b
 8006f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f86:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f8c:	d015      	beq.n	8006fba <_svfiprintf_r+0xfa>
 8006f8e:	9a07      	ldr	r2, [sp, #28]
 8006f90:	4654      	mov	r4, sl
 8006f92:	2000      	movs	r0, #0
 8006f94:	f04f 0c0a 	mov.w	ip, #10
 8006f98:	4621      	mov	r1, r4
 8006f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9e:	3b30      	subs	r3, #48	@ 0x30
 8006fa0:	2b09      	cmp	r3, #9
 8006fa2:	d94b      	bls.n	800703c <_svfiprintf_r+0x17c>
 8006fa4:	b1b0      	cbz	r0, 8006fd4 <_svfiprintf_r+0x114>
 8006fa6:	9207      	str	r2, [sp, #28]
 8006fa8:	e014      	b.n	8006fd4 <_svfiprintf_r+0x114>
 8006faa:	eba0 0308 	sub.w	r3, r0, r8
 8006fae:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	9304      	str	r3, [sp, #16]
 8006fb6:	46a2      	mov	sl, r4
 8006fb8:	e7d2      	b.n	8006f60 <_svfiprintf_r+0xa0>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	1d19      	adds	r1, r3, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	9103      	str	r1, [sp, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfbb      	ittet	lt
 8006fc6:	425b      	neglt	r3, r3
 8006fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fcc:	9307      	strge	r3, [sp, #28]
 8006fce:	9307      	strlt	r3, [sp, #28]
 8006fd0:	bfb8      	it	lt
 8006fd2:	9204      	strlt	r2, [sp, #16]
 8006fd4:	7823      	ldrb	r3, [r4, #0]
 8006fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fd8:	d10a      	bne.n	8006ff0 <_svfiprintf_r+0x130>
 8006fda:	7863      	ldrb	r3, [r4, #1]
 8006fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fde:	d132      	bne.n	8007046 <_svfiprintf_r+0x186>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	9203      	str	r2, [sp, #12]
 8006fe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fec:	3402      	adds	r4, #2
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80070b4 <_svfiprintf_r+0x1f4>
 8006ff4:	7821      	ldrb	r1, [r4, #0]
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	f7f9 f8e9 	bl	80001d0 <memchr>
 8006ffe:	b138      	cbz	r0, 8007010 <_svfiprintf_r+0x150>
 8007000:	9b04      	ldr	r3, [sp, #16]
 8007002:	eba0 000a 	sub.w	r0, r0, sl
 8007006:	2240      	movs	r2, #64	@ 0x40
 8007008:	4082      	lsls	r2, r0
 800700a:	4313      	orrs	r3, r2
 800700c:	3401      	adds	r4, #1
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007014:	4824      	ldr	r0, [pc, #144]	@ (80070a8 <_svfiprintf_r+0x1e8>)
 8007016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800701a:	2206      	movs	r2, #6
 800701c:	f7f9 f8d8 	bl	80001d0 <memchr>
 8007020:	2800      	cmp	r0, #0
 8007022:	d036      	beq.n	8007092 <_svfiprintf_r+0x1d2>
 8007024:	4b21      	ldr	r3, [pc, #132]	@ (80070ac <_svfiprintf_r+0x1ec>)
 8007026:	bb1b      	cbnz	r3, 8007070 <_svfiprintf_r+0x1b0>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	3307      	adds	r3, #7
 800702c:	f023 0307 	bic.w	r3, r3, #7
 8007030:	3308      	adds	r3, #8
 8007032:	9303      	str	r3, [sp, #12]
 8007034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007036:	4433      	add	r3, r6
 8007038:	9309      	str	r3, [sp, #36]	@ 0x24
 800703a:	e76a      	b.n	8006f12 <_svfiprintf_r+0x52>
 800703c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007040:	460c      	mov	r4, r1
 8007042:	2001      	movs	r0, #1
 8007044:	e7a8      	b.n	8006f98 <_svfiprintf_r+0xd8>
 8007046:	2300      	movs	r3, #0
 8007048:	3401      	adds	r4, #1
 800704a:	9305      	str	r3, [sp, #20]
 800704c:	4619      	mov	r1, r3
 800704e:	f04f 0c0a 	mov.w	ip, #10
 8007052:	4620      	mov	r0, r4
 8007054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007058:	3a30      	subs	r2, #48	@ 0x30
 800705a:	2a09      	cmp	r2, #9
 800705c:	d903      	bls.n	8007066 <_svfiprintf_r+0x1a6>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c6      	beq.n	8006ff0 <_svfiprintf_r+0x130>
 8007062:	9105      	str	r1, [sp, #20]
 8007064:	e7c4      	b.n	8006ff0 <_svfiprintf_r+0x130>
 8007066:	fb0c 2101 	mla	r1, ip, r1, r2
 800706a:	4604      	mov	r4, r0
 800706c:	2301      	movs	r3, #1
 800706e:	e7f0      	b.n	8007052 <_svfiprintf_r+0x192>
 8007070:	ab03      	add	r3, sp, #12
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	462a      	mov	r2, r5
 8007076:	4b0e      	ldr	r3, [pc, #56]	@ (80070b0 <_svfiprintf_r+0x1f0>)
 8007078:	a904      	add	r1, sp, #16
 800707a:	4638      	mov	r0, r7
 800707c:	f3af 8000 	nop.w
 8007080:	1c42      	adds	r2, r0, #1
 8007082:	4606      	mov	r6, r0
 8007084:	d1d6      	bne.n	8007034 <_svfiprintf_r+0x174>
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	065b      	lsls	r3, r3, #25
 800708a:	f53f af2d 	bmi.w	8006ee8 <_svfiprintf_r+0x28>
 800708e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007090:	e72c      	b.n	8006eec <_svfiprintf_r+0x2c>
 8007092:	ab03      	add	r3, sp, #12
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	462a      	mov	r2, r5
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <_svfiprintf_r+0x1f0>)
 800709a:	a904      	add	r1, sp, #16
 800709c:	4638      	mov	r0, r7
 800709e:	f000 f91b 	bl	80072d8 <_printf_i>
 80070a2:	e7ed      	b.n	8007080 <_svfiprintf_r+0x1c0>
 80070a4:	0800774c 	.word	0x0800774c
 80070a8:	08007756 	.word	0x08007756
 80070ac:	00000000 	.word	0x00000000
 80070b0:	08006e09 	.word	0x08006e09
 80070b4:	08007752 	.word	0x08007752

080070b8 <sbrk_aligned>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4e0f      	ldr	r6, [pc, #60]	@ (80070f8 <sbrk_aligned+0x40>)
 80070bc:	460c      	mov	r4, r1
 80070be:	6831      	ldr	r1, [r6, #0]
 80070c0:	4605      	mov	r5, r0
 80070c2:	b911      	cbnz	r1, 80070ca <sbrk_aligned+0x12>
 80070c4:	f000 fa7c 	bl	80075c0 <_sbrk_r>
 80070c8:	6030      	str	r0, [r6, #0]
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 fa77 	bl	80075c0 <_sbrk_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d103      	bne.n	80070de <sbrk_aligned+0x26>
 80070d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070da:	4620      	mov	r0, r4
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	1cc4      	adds	r4, r0, #3
 80070e0:	f024 0403 	bic.w	r4, r4, #3
 80070e4:	42a0      	cmp	r0, r4
 80070e6:	d0f8      	beq.n	80070da <sbrk_aligned+0x22>
 80070e8:	1a21      	subs	r1, r4, r0
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 fa68 	bl	80075c0 <_sbrk_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d1f2      	bne.n	80070da <sbrk_aligned+0x22>
 80070f4:	e7ef      	b.n	80070d6 <sbrk_aligned+0x1e>
 80070f6:	bf00      	nop
 80070f8:	20001460 	.word	0x20001460

080070fc <_malloc_r>:
 80070fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007100:	1ccd      	adds	r5, r1, #3
 8007102:	f025 0503 	bic.w	r5, r5, #3
 8007106:	3508      	adds	r5, #8
 8007108:	2d0c      	cmp	r5, #12
 800710a:	bf38      	it	cc
 800710c:	250c      	movcc	r5, #12
 800710e:	2d00      	cmp	r5, #0
 8007110:	4606      	mov	r6, r0
 8007112:	db01      	blt.n	8007118 <_malloc_r+0x1c>
 8007114:	42a9      	cmp	r1, r5
 8007116:	d904      	bls.n	8007122 <_malloc_r+0x26>
 8007118:	230c      	movs	r3, #12
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	2000      	movs	r0, #0
 800711e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071f8 <_malloc_r+0xfc>
 8007126:	f000 f9f7 	bl	8007518 <__malloc_lock>
 800712a:	f8d8 3000 	ldr.w	r3, [r8]
 800712e:	461c      	mov	r4, r3
 8007130:	bb44      	cbnz	r4, 8007184 <_malloc_r+0x88>
 8007132:	4629      	mov	r1, r5
 8007134:	4630      	mov	r0, r6
 8007136:	f7ff ffbf 	bl	80070b8 <sbrk_aligned>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	4604      	mov	r4, r0
 800713e:	d158      	bne.n	80071f2 <_malloc_r+0xf6>
 8007140:	f8d8 4000 	ldr.w	r4, [r8]
 8007144:	4627      	mov	r7, r4
 8007146:	2f00      	cmp	r7, #0
 8007148:	d143      	bne.n	80071d2 <_malloc_r+0xd6>
 800714a:	2c00      	cmp	r4, #0
 800714c:	d04b      	beq.n	80071e6 <_malloc_r+0xea>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	4639      	mov	r1, r7
 8007152:	4630      	mov	r0, r6
 8007154:	eb04 0903 	add.w	r9, r4, r3
 8007158:	f000 fa32 	bl	80075c0 <_sbrk_r>
 800715c:	4581      	cmp	r9, r0
 800715e:	d142      	bne.n	80071e6 <_malloc_r+0xea>
 8007160:	6821      	ldr	r1, [r4, #0]
 8007162:	1a6d      	subs	r5, r5, r1
 8007164:	4629      	mov	r1, r5
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff ffa6 	bl	80070b8 <sbrk_aligned>
 800716c:	3001      	adds	r0, #1
 800716e:	d03a      	beq.n	80071e6 <_malloc_r+0xea>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	442b      	add	r3, r5
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	f8d8 3000 	ldr.w	r3, [r8]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	bb62      	cbnz	r2, 80071d8 <_malloc_r+0xdc>
 800717e:	f8c8 7000 	str.w	r7, [r8]
 8007182:	e00f      	b.n	80071a4 <_malloc_r+0xa8>
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	1b52      	subs	r2, r2, r5
 8007188:	d420      	bmi.n	80071cc <_malloc_r+0xd0>
 800718a:	2a0b      	cmp	r2, #11
 800718c:	d917      	bls.n	80071be <_malloc_r+0xc2>
 800718e:	1961      	adds	r1, r4, r5
 8007190:	42a3      	cmp	r3, r4
 8007192:	6025      	str	r5, [r4, #0]
 8007194:	bf18      	it	ne
 8007196:	6059      	strne	r1, [r3, #4]
 8007198:	6863      	ldr	r3, [r4, #4]
 800719a:	bf08      	it	eq
 800719c:	f8c8 1000 	streq.w	r1, [r8]
 80071a0:	5162      	str	r2, [r4, r5]
 80071a2:	604b      	str	r3, [r1, #4]
 80071a4:	4630      	mov	r0, r6
 80071a6:	f000 f9bd 	bl	8007524 <__malloc_unlock>
 80071aa:	f104 000b 	add.w	r0, r4, #11
 80071ae:	1d23      	adds	r3, r4, #4
 80071b0:	f020 0007 	bic.w	r0, r0, #7
 80071b4:	1ac2      	subs	r2, r0, r3
 80071b6:	bf1c      	itt	ne
 80071b8:	1a1b      	subne	r3, r3, r0
 80071ba:	50a3      	strne	r3, [r4, r2]
 80071bc:	e7af      	b.n	800711e <_malloc_r+0x22>
 80071be:	6862      	ldr	r2, [r4, #4]
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	bf0c      	ite	eq
 80071c4:	f8c8 2000 	streq.w	r2, [r8]
 80071c8:	605a      	strne	r2, [r3, #4]
 80071ca:	e7eb      	b.n	80071a4 <_malloc_r+0xa8>
 80071cc:	4623      	mov	r3, r4
 80071ce:	6864      	ldr	r4, [r4, #4]
 80071d0:	e7ae      	b.n	8007130 <_malloc_r+0x34>
 80071d2:	463c      	mov	r4, r7
 80071d4:	687f      	ldr	r7, [r7, #4]
 80071d6:	e7b6      	b.n	8007146 <_malloc_r+0x4a>
 80071d8:	461a      	mov	r2, r3
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	42a3      	cmp	r3, r4
 80071de:	d1fb      	bne.n	80071d8 <_malloc_r+0xdc>
 80071e0:	2300      	movs	r3, #0
 80071e2:	6053      	str	r3, [r2, #4]
 80071e4:	e7de      	b.n	80071a4 <_malloc_r+0xa8>
 80071e6:	230c      	movs	r3, #12
 80071e8:	6033      	str	r3, [r6, #0]
 80071ea:	4630      	mov	r0, r6
 80071ec:	f000 f99a 	bl	8007524 <__malloc_unlock>
 80071f0:	e794      	b.n	800711c <_malloc_r+0x20>
 80071f2:	6005      	str	r5, [r0, #0]
 80071f4:	e7d6      	b.n	80071a4 <_malloc_r+0xa8>
 80071f6:	bf00      	nop
 80071f8:	20001464 	.word	0x20001464

080071fc <_printf_common>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	4616      	mov	r6, r2
 8007202:	4698      	mov	r8, r3
 8007204:	688a      	ldr	r2, [r1, #8]
 8007206:	690b      	ldr	r3, [r1, #16]
 8007208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800720c:	4293      	cmp	r3, r2
 800720e:	bfb8      	it	lt
 8007210:	4613      	movlt	r3, r2
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007218:	4607      	mov	r7, r0
 800721a:	460c      	mov	r4, r1
 800721c:	b10a      	cbz	r2, 8007222 <_printf_common+0x26>
 800721e:	3301      	adds	r3, #1
 8007220:	6033      	str	r3, [r6, #0]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	0699      	lsls	r1, r3, #26
 8007226:	bf42      	ittt	mi
 8007228:	6833      	ldrmi	r3, [r6, #0]
 800722a:	3302      	addmi	r3, #2
 800722c:	6033      	strmi	r3, [r6, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	f015 0506 	ands.w	r5, r5, #6
 8007234:	d106      	bne.n	8007244 <_printf_common+0x48>
 8007236:	f104 0a19 	add.w	sl, r4, #25
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	6832      	ldr	r2, [r6, #0]
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	42ab      	cmp	r3, r5
 8007242:	dc26      	bgt.n	8007292 <_printf_common+0x96>
 8007244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	3b00      	subs	r3, #0
 800724c:	bf18      	it	ne
 800724e:	2301      	movne	r3, #1
 8007250:	0692      	lsls	r2, r2, #26
 8007252:	d42b      	bmi.n	80072ac <_printf_common+0xb0>
 8007254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007258:	4641      	mov	r1, r8
 800725a:	4638      	mov	r0, r7
 800725c:	47c8      	blx	r9
 800725e:	3001      	adds	r0, #1
 8007260:	d01e      	beq.n	80072a0 <_printf_common+0xa4>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	6922      	ldr	r2, [r4, #16]
 8007266:	f003 0306 	and.w	r3, r3, #6
 800726a:	2b04      	cmp	r3, #4
 800726c:	bf02      	ittt	eq
 800726e:	68e5      	ldreq	r5, [r4, #12]
 8007270:	6833      	ldreq	r3, [r6, #0]
 8007272:	1aed      	subeq	r5, r5, r3
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	bf0c      	ite	eq
 8007278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800727c:	2500      	movne	r5, #0
 800727e:	4293      	cmp	r3, r2
 8007280:	bfc4      	itt	gt
 8007282:	1a9b      	subgt	r3, r3, r2
 8007284:	18ed      	addgt	r5, r5, r3
 8007286:	2600      	movs	r6, #0
 8007288:	341a      	adds	r4, #26
 800728a:	42b5      	cmp	r5, r6
 800728c:	d11a      	bne.n	80072c4 <_printf_common+0xc8>
 800728e:	2000      	movs	r0, #0
 8007290:	e008      	b.n	80072a4 <_printf_common+0xa8>
 8007292:	2301      	movs	r3, #1
 8007294:	4652      	mov	r2, sl
 8007296:	4641      	mov	r1, r8
 8007298:	4638      	mov	r0, r7
 800729a:	47c8      	blx	r9
 800729c:	3001      	adds	r0, #1
 800729e:	d103      	bne.n	80072a8 <_printf_common+0xac>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	3501      	adds	r5, #1
 80072aa:	e7c6      	b.n	800723a <_printf_common+0x3e>
 80072ac:	18e1      	adds	r1, r4, r3
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	2030      	movs	r0, #48	@ 0x30
 80072b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072b6:	4422      	add	r2, r4
 80072b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072c0:	3302      	adds	r3, #2
 80072c2:	e7c7      	b.n	8007254 <_printf_common+0x58>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4622      	mov	r2, r4
 80072c8:	4641      	mov	r1, r8
 80072ca:	4638      	mov	r0, r7
 80072cc:	47c8      	blx	r9
 80072ce:	3001      	adds	r0, #1
 80072d0:	d0e6      	beq.n	80072a0 <_printf_common+0xa4>
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7d9      	b.n	800728a <_printf_common+0x8e>
	...

080072d8 <_printf_i>:
 80072d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	7e0f      	ldrb	r7, [r1, #24]
 80072de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072e0:	2f78      	cmp	r7, #120	@ 0x78
 80072e2:	4691      	mov	r9, r2
 80072e4:	4680      	mov	r8, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	469a      	mov	sl, r3
 80072ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072ee:	d807      	bhi.n	8007300 <_printf_i+0x28>
 80072f0:	2f62      	cmp	r7, #98	@ 0x62
 80072f2:	d80a      	bhi.n	800730a <_printf_i+0x32>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	f000 80d2 	beq.w	800749e <_printf_i+0x1c6>
 80072fa:	2f58      	cmp	r7, #88	@ 0x58
 80072fc:	f000 80b9 	beq.w	8007472 <_printf_i+0x19a>
 8007300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007308:	e03a      	b.n	8007380 <_printf_i+0xa8>
 800730a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800730e:	2b15      	cmp	r3, #21
 8007310:	d8f6      	bhi.n	8007300 <_printf_i+0x28>
 8007312:	a101      	add	r1, pc, #4	@ (adr r1, 8007318 <_printf_i+0x40>)
 8007314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007318:	08007371 	.word	0x08007371
 800731c:	08007385 	.word	0x08007385
 8007320:	08007301 	.word	0x08007301
 8007324:	08007301 	.word	0x08007301
 8007328:	08007301 	.word	0x08007301
 800732c:	08007301 	.word	0x08007301
 8007330:	08007385 	.word	0x08007385
 8007334:	08007301 	.word	0x08007301
 8007338:	08007301 	.word	0x08007301
 800733c:	08007301 	.word	0x08007301
 8007340:	08007301 	.word	0x08007301
 8007344:	08007485 	.word	0x08007485
 8007348:	080073af 	.word	0x080073af
 800734c:	0800743f 	.word	0x0800743f
 8007350:	08007301 	.word	0x08007301
 8007354:	08007301 	.word	0x08007301
 8007358:	080074a7 	.word	0x080074a7
 800735c:	08007301 	.word	0x08007301
 8007360:	080073af 	.word	0x080073af
 8007364:	08007301 	.word	0x08007301
 8007368:	08007301 	.word	0x08007301
 800736c:	08007447 	.word	0x08007447
 8007370:	6833      	ldr	r3, [r6, #0]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6032      	str	r2, [r6, #0]
 8007378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800737c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007380:	2301      	movs	r3, #1
 8007382:	e09d      	b.n	80074c0 <_printf_i+0x1e8>
 8007384:	6833      	ldr	r3, [r6, #0]
 8007386:	6820      	ldr	r0, [r4, #0]
 8007388:	1d19      	adds	r1, r3, #4
 800738a:	6031      	str	r1, [r6, #0]
 800738c:	0606      	lsls	r6, r0, #24
 800738e:	d501      	bpl.n	8007394 <_printf_i+0xbc>
 8007390:	681d      	ldr	r5, [r3, #0]
 8007392:	e003      	b.n	800739c <_printf_i+0xc4>
 8007394:	0645      	lsls	r5, r0, #25
 8007396:	d5fb      	bpl.n	8007390 <_printf_i+0xb8>
 8007398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800739c:	2d00      	cmp	r5, #0
 800739e:	da03      	bge.n	80073a8 <_printf_i+0xd0>
 80073a0:	232d      	movs	r3, #45	@ 0x2d
 80073a2:	426d      	negs	r5, r5
 80073a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a8:	4859      	ldr	r0, [pc, #356]	@ (8007510 <_printf_i+0x238>)
 80073aa:	230a      	movs	r3, #10
 80073ac:	e011      	b.n	80073d2 <_printf_i+0xfa>
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	6833      	ldr	r3, [r6, #0]
 80073b2:	0608      	lsls	r0, r1, #24
 80073b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80073b8:	d402      	bmi.n	80073c0 <_printf_i+0xe8>
 80073ba:	0649      	lsls	r1, r1, #25
 80073bc:	bf48      	it	mi
 80073be:	b2ad      	uxthmi	r5, r5
 80073c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80073c2:	4853      	ldr	r0, [pc, #332]	@ (8007510 <_printf_i+0x238>)
 80073c4:	6033      	str	r3, [r6, #0]
 80073c6:	bf14      	ite	ne
 80073c8:	230a      	movne	r3, #10
 80073ca:	2308      	moveq	r3, #8
 80073cc:	2100      	movs	r1, #0
 80073ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073d2:	6866      	ldr	r6, [r4, #4]
 80073d4:	60a6      	str	r6, [r4, #8]
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	bfa2      	ittt	ge
 80073da:	6821      	ldrge	r1, [r4, #0]
 80073dc:	f021 0104 	bicge.w	r1, r1, #4
 80073e0:	6021      	strge	r1, [r4, #0]
 80073e2:	b90d      	cbnz	r5, 80073e8 <_printf_i+0x110>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	d04b      	beq.n	8007480 <_printf_i+0x1a8>
 80073e8:	4616      	mov	r6, r2
 80073ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ee:	fb03 5711 	mls	r7, r3, r1, r5
 80073f2:	5dc7      	ldrb	r7, [r0, r7]
 80073f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073f8:	462f      	mov	r7, r5
 80073fa:	42bb      	cmp	r3, r7
 80073fc:	460d      	mov	r5, r1
 80073fe:	d9f4      	bls.n	80073ea <_printf_i+0x112>
 8007400:	2b08      	cmp	r3, #8
 8007402:	d10b      	bne.n	800741c <_printf_i+0x144>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07df      	lsls	r7, r3, #31
 8007408:	d508      	bpl.n	800741c <_printf_i+0x144>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6861      	ldr	r1, [r4, #4]
 800740e:	4299      	cmp	r1, r3
 8007410:	bfde      	ittt	le
 8007412:	2330      	movle	r3, #48	@ 0x30
 8007414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007418:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800741c:	1b92      	subs	r2, r2, r6
 800741e:	6122      	str	r2, [r4, #16]
 8007420:	f8cd a000 	str.w	sl, [sp]
 8007424:	464b      	mov	r3, r9
 8007426:	aa03      	add	r2, sp, #12
 8007428:	4621      	mov	r1, r4
 800742a:	4640      	mov	r0, r8
 800742c:	f7ff fee6 	bl	80071fc <_printf_common>
 8007430:	3001      	adds	r0, #1
 8007432:	d14a      	bne.n	80074ca <_printf_i+0x1f2>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007438:	b004      	add	sp, #16
 800743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	f043 0320 	orr.w	r3, r3, #32
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	4833      	ldr	r0, [pc, #204]	@ (8007514 <_printf_i+0x23c>)
 8007448:	2778      	movs	r7, #120	@ 0x78
 800744a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	6831      	ldr	r1, [r6, #0]
 8007452:	061f      	lsls	r7, r3, #24
 8007454:	f851 5b04 	ldr.w	r5, [r1], #4
 8007458:	d402      	bmi.n	8007460 <_printf_i+0x188>
 800745a:	065f      	lsls	r7, r3, #25
 800745c:	bf48      	it	mi
 800745e:	b2ad      	uxthmi	r5, r5
 8007460:	6031      	str	r1, [r6, #0]
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	bf44      	itt	mi
 8007466:	f043 0320 	orrmi.w	r3, r3, #32
 800746a:	6023      	strmi	r3, [r4, #0]
 800746c:	b11d      	cbz	r5, 8007476 <_printf_i+0x19e>
 800746e:	2310      	movs	r3, #16
 8007470:	e7ac      	b.n	80073cc <_printf_i+0xf4>
 8007472:	4827      	ldr	r0, [pc, #156]	@ (8007510 <_printf_i+0x238>)
 8007474:	e7e9      	b.n	800744a <_printf_i+0x172>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f023 0320 	bic.w	r3, r3, #32
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	e7f6      	b.n	800746e <_printf_i+0x196>
 8007480:	4616      	mov	r6, r2
 8007482:	e7bd      	b.n	8007400 <_printf_i+0x128>
 8007484:	6833      	ldr	r3, [r6, #0]
 8007486:	6825      	ldr	r5, [r4, #0]
 8007488:	6961      	ldr	r1, [r4, #20]
 800748a:	1d18      	adds	r0, r3, #4
 800748c:	6030      	str	r0, [r6, #0]
 800748e:	062e      	lsls	r6, r5, #24
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	d501      	bpl.n	8007498 <_printf_i+0x1c0>
 8007494:	6019      	str	r1, [r3, #0]
 8007496:	e002      	b.n	800749e <_printf_i+0x1c6>
 8007498:	0668      	lsls	r0, r5, #25
 800749a:	d5fb      	bpl.n	8007494 <_printf_i+0x1bc>
 800749c:	8019      	strh	r1, [r3, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	4616      	mov	r6, r2
 80074a4:	e7bc      	b.n	8007420 <_printf_i+0x148>
 80074a6:	6833      	ldr	r3, [r6, #0]
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	6032      	str	r2, [r6, #0]
 80074ac:	681e      	ldr	r6, [r3, #0]
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	2100      	movs	r1, #0
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7f8 fe8c 	bl	80001d0 <memchr>
 80074b8:	b108      	cbz	r0, 80074be <_printf_i+0x1e6>
 80074ba:	1b80      	subs	r0, r0, r6
 80074bc:	6060      	str	r0, [r4, #4]
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	6123      	str	r3, [r4, #16]
 80074c2:	2300      	movs	r3, #0
 80074c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c8:	e7aa      	b.n	8007420 <_printf_i+0x148>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	4632      	mov	r2, r6
 80074ce:	4649      	mov	r1, r9
 80074d0:	4640      	mov	r0, r8
 80074d2:	47d0      	blx	sl
 80074d4:	3001      	adds	r0, #1
 80074d6:	d0ad      	beq.n	8007434 <_printf_i+0x15c>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	079b      	lsls	r3, r3, #30
 80074dc:	d413      	bmi.n	8007506 <_printf_i+0x22e>
 80074de:	68e0      	ldr	r0, [r4, #12]
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	4298      	cmp	r0, r3
 80074e4:	bfb8      	it	lt
 80074e6:	4618      	movlt	r0, r3
 80074e8:	e7a6      	b.n	8007438 <_printf_i+0x160>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4632      	mov	r2, r6
 80074ee:	4649      	mov	r1, r9
 80074f0:	4640      	mov	r0, r8
 80074f2:	47d0      	blx	sl
 80074f4:	3001      	adds	r0, #1
 80074f6:	d09d      	beq.n	8007434 <_printf_i+0x15c>
 80074f8:	3501      	adds	r5, #1
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	9903      	ldr	r1, [sp, #12]
 80074fe:	1a5b      	subs	r3, r3, r1
 8007500:	42ab      	cmp	r3, r5
 8007502:	dcf2      	bgt.n	80074ea <_printf_i+0x212>
 8007504:	e7eb      	b.n	80074de <_printf_i+0x206>
 8007506:	2500      	movs	r5, #0
 8007508:	f104 0619 	add.w	r6, r4, #25
 800750c:	e7f5      	b.n	80074fa <_printf_i+0x222>
 800750e:	bf00      	nop
 8007510:	0800775d 	.word	0x0800775d
 8007514:	0800776e 	.word	0x0800776e

08007518 <__malloc_lock>:
 8007518:	4801      	ldr	r0, [pc, #4]	@ (8007520 <__malloc_lock+0x8>)
 800751a:	f7ff bc1b 	b.w	8006d54 <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	2000145c 	.word	0x2000145c

08007524 <__malloc_unlock>:
 8007524:	4801      	ldr	r0, [pc, #4]	@ (800752c <__malloc_unlock+0x8>)
 8007526:	f7ff bc16 	b.w	8006d56 <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	2000145c 	.word	0x2000145c

08007530 <_realloc_r>:
 8007530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007534:	4680      	mov	r8, r0
 8007536:	4615      	mov	r5, r2
 8007538:	460c      	mov	r4, r1
 800753a:	b921      	cbnz	r1, 8007546 <_realloc_r+0x16>
 800753c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007540:	4611      	mov	r1, r2
 8007542:	f7ff bddb 	b.w	80070fc <_malloc_r>
 8007546:	b92a      	cbnz	r2, 8007554 <_realloc_r+0x24>
 8007548:	f7ff fc14 	bl	8006d74 <_free_r>
 800754c:	2400      	movs	r4, #0
 800754e:	4620      	mov	r0, r4
 8007550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007554:	f000 f844 	bl	80075e0 <_malloc_usable_size_r>
 8007558:	4285      	cmp	r5, r0
 800755a:	4606      	mov	r6, r0
 800755c:	d802      	bhi.n	8007564 <_realloc_r+0x34>
 800755e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007562:	d8f4      	bhi.n	800754e <_realloc_r+0x1e>
 8007564:	4629      	mov	r1, r5
 8007566:	4640      	mov	r0, r8
 8007568:	f7ff fdc8 	bl	80070fc <_malloc_r>
 800756c:	4607      	mov	r7, r0
 800756e:	2800      	cmp	r0, #0
 8007570:	d0ec      	beq.n	800754c <_realloc_r+0x1c>
 8007572:	42b5      	cmp	r5, r6
 8007574:	462a      	mov	r2, r5
 8007576:	4621      	mov	r1, r4
 8007578:	bf28      	it	cs
 800757a:	4632      	movcs	r2, r6
 800757c:	f7ff fbec 	bl	8006d58 <memcpy>
 8007580:	4621      	mov	r1, r4
 8007582:	4640      	mov	r0, r8
 8007584:	f7ff fbf6 	bl	8006d74 <_free_r>
 8007588:	463c      	mov	r4, r7
 800758a:	e7e0      	b.n	800754e <_realloc_r+0x1e>

0800758c <memmove>:
 800758c:	4288      	cmp	r0, r1
 800758e:	b510      	push	{r4, lr}
 8007590:	eb01 0402 	add.w	r4, r1, r2
 8007594:	d902      	bls.n	800759c <memmove+0x10>
 8007596:	4284      	cmp	r4, r0
 8007598:	4623      	mov	r3, r4
 800759a:	d807      	bhi.n	80075ac <memmove+0x20>
 800759c:	1e43      	subs	r3, r0, #1
 800759e:	42a1      	cmp	r1, r4
 80075a0:	d008      	beq.n	80075b4 <memmove+0x28>
 80075a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075aa:	e7f8      	b.n	800759e <memmove+0x12>
 80075ac:	4402      	add	r2, r0
 80075ae:	4601      	mov	r1, r0
 80075b0:	428a      	cmp	r2, r1
 80075b2:	d100      	bne.n	80075b6 <memmove+0x2a>
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075be:	e7f7      	b.n	80075b0 <memmove+0x24>

080075c0 <_sbrk_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d06      	ldr	r5, [pc, #24]	@ (80075dc <_sbrk_r+0x1c>)
 80075c4:	2300      	movs	r3, #0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4608      	mov	r0, r1
 80075ca:	602b      	str	r3, [r5, #0]
 80075cc:	f7f9 fe9e 	bl	800130c <_sbrk>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_sbrk_r+0x1a>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_sbrk_r+0x1a>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	20001458 	.word	0x20001458

080075e0 <_malloc_usable_size_r>:
 80075e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e4:	1f18      	subs	r0, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bfbc      	itt	lt
 80075ea:	580b      	ldrlt	r3, [r1, r0]
 80075ec:	18c0      	addlt	r0, r0, r3
 80075ee:	4770      	bx	lr

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
