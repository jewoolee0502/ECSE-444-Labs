
Lab3_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003f48  08003f48  00004f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  0800478c  0800478c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800478c  0800478c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004794  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000010  080047a4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080047a4  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102f0  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e4  00000000  00000000  00016330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00018618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a47  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5eb  00000000  00000000  00019df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f2  00000000  00000000  000443e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106bbf  00000000  00000000  00052ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00159693  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  0015974c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0015d073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0015d16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003f30 	.word	0x08003f30

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08003f30 	.word	0x08003f30

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fbf8 	bl	8001236 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f827 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f923 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4e:	f000 f8f7 	bl	8000c40 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a52:	f000 f873 	bl	8000b3c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000a56:	f000 f8a5 	bl	8000ba4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  generate_sineWave();
 8000a5a:	f000 f981 	bl	8000d60 <generate_sineWave>

  //Multiple tone audio generation
  if(HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 43, DAC_ALIGN_8B_R) != HAL_OK
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <main+0x50>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	2308      	movs	r3, #8
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	232b      	movs	r3, #43	@ 0x2b
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <main+0x54>)
 8000a6c:	f000 fdb0 	bl	80015d0 <HAL_DAC_Start_DMA>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <main+0x46>
		  || HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000a76:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <main+0x58>)
 8000a78:	f002 fd90 	bl	800359c <HAL_TIM_Base_Start_IT>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <main+0x4c>
	  Error_Handler();
 8000a82:	f000 fa85 	bl	8000f90 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <main+0x4c>
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	200000a0 	.word	0x200000a0

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b096      	sub	sp, #88	@ 0x58
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2244      	movs	r2, #68	@ 0x44
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 fa16 	bl	8003ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000aba:	2000      	movs	r0, #0
 8000abc:	f001 fdc6 	bl	800264c <HAL_PWREx_ControlVoltageScaling>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ac6:	f000 fa63 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aca:	2310      	movs	r3, #16
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad6:	2360      	movs	r3, #96	@ 0x60
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ae6:	233c      	movs	r3, #60	@ 0x3c
 8000ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fe4a 	bl	8002794 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b06:	f000 fa43 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fa50 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b2e:	f000 fa2f 	bl	8000f90 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3758      	adds	r7, #88	@ 0x58
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2228      	movs	r2, #40	@ 0x28
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 f9c5 	bl	8003ed8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_DAC1_Init+0x60>)
 8000b50:	4a13      	ldr	r2, [pc, #76]	@ (8000ba0 <MX_DAC1_Init+0x64>)
 8000b52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <MX_DAC1_Init+0x60>)
 8000b56:	f000 fd18 	bl	800158a <HAL_DAC_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b60:	f000 fa16 	bl	8000f90 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b68:	230a      	movs	r3, #10
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b70:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_DAC1_Init+0x60>)
 8000b86:	f000 feb7 	bl	80018f8 <HAL_DAC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000b90:	f000 f9fe 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000002c 	.word	0x2000002c
 8000ba0:	40007400 	.word	0x40007400

08000ba4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bd8:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bea:	4814      	ldr	r0, [pc, #80]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000bec:	f002 fc7e 	bl	80034ec <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bf6:	f000 f9cb 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000c08:	f002 fe3f 	bl	800388a <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c12:	f000 f9bd 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c16:	2320      	movs	r3, #32
 8000c18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <MX_TIM2_Init+0x98>)
 8000c24:	f003 f86c 	bl	8003d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c2e:	f000 f9af 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000a0 	.word	0x200000a0

08000c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_DMA_Init+0x50>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4a:	4a11      	ldr	r2, [pc, #68]	@ (8000c90 <MX_DMA_Init+0x50>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_DMA_Init+0x50>)
 8000c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_DMA_Init+0x50>)
 8000c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c62:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <MX_DMA_Init+0x50>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_DMA_Init+0x50>)
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	200b      	movs	r0, #11
 8000c7c:	f000 fc4f 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c80:	200b      	movs	r0, #11
 8000c82:	f000 fc68 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a28      	ldr	r2, [pc, #160]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_GPIO_Init+0xbc>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cf8:	4816      	ldr	r0, [pc, #88]	@ (8000d54 <MX_GPIO_Init+0xc0>)
 8000cfa:	f001 fc3d 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <MX_GPIO_Init+0xc4>)
 8000d16:	f001 fa9d 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <MX_GPIO_Init+0xc0>)
 8000d34:	f001 fa8e 	bl	8002254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2028      	movs	r0, #40	@ 0x28
 8000d3e:	f000 fbee 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d42:	2028      	movs	r0, #40	@ 0x28
 8000d44:	f000 fc07 	bl	8001556 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	00000000 	.word	0x00000000

08000d60 <generate_sineWave>:

/* USER CODE BEGIN 4 */

void generate_sineWave(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0

	// C6
	for(int i = 0; i < 43; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e033      	b.n	8000dd4 <generate_sineWave+0x74>
		sine_C6[i] = (uint8_t) ((arm_sin_f32((2*M_PI*i)/43) + 1)*(170.0f / 2.0f)) ;
 8000d6c:	6978      	ldr	r0, [r7, #20]
 8000d6e:	f7ff fb99 	bl	80004a4 <__aeabi_i2d>
 8000d72:	a357      	add	r3, pc, #348	@ (adr r3, 8000ed0 <generate_sineWave+0x170>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f7ff fbfe 	bl	8000578 <__aeabi_dmul>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	4b53      	ldr	r3, [pc, #332]	@ (8000ed8 <generate_sineWave+0x178>)
 8000d8a:	f7ff fd1f 	bl	80007cc <__aeabi_ddiv>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fe01 	bl	800099c <__aeabi_d2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	ee00 3a10 	vmov	s0, r3
 8000da0:	f003 f854 	bl	8003e4c <arm_sin_f32>
 8000da4:	eef0 7a40 	vmov.f32	s15, s0
 8000da8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000db0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000edc <generate_sineWave+0x17c>
 8000db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dc0:	793b      	ldrb	r3, [r7, #4]
 8000dc2:	b2d9      	uxtb	r1, r3
 8000dc4:	4a46      	ldr	r2, [pc, #280]	@ (8000ee0 <generate_sineWave+0x180>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4413      	add	r3, r2
 8000dca:	460a      	mov	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 43; i++) {
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dd8:	ddc8      	ble.n	8000d6c <generate_sineWave+0xc>
	}
	// G6
	for(int i=0; i < 29; i++) {
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	e033      	b.n	8000e48 <generate_sineWave+0xe8>
		sine_G6[i] = (uint8_t) ((arm_sin_f32((2*M_PI*i)/29) + 1)*(170.0f / 2.0f)) ;
 8000de0:	6938      	ldr	r0, [r7, #16]
 8000de2:	f7ff fb5f 	bl	80004a4 <__aeabi_i2d>
 8000de6:	a33a      	add	r3, pc, #232	@ (adr r3, 8000ed0 <generate_sineWave+0x170>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fbc4 	bl	8000578 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	4b39      	ldr	r3, [pc, #228]	@ (8000ee4 <generate_sineWave+0x184>)
 8000dfe:	f7ff fce5 	bl	80007cc <__aeabi_ddiv>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff fdc7 	bl	800099c <__aeabi_d2f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	ee00 3a10 	vmov	s0, r3
 8000e14:	f003 f81a 	bl	8003e4c <arm_sin_f32>
 8000e18:	eef0 7a40 	vmov.f32	s15, s0
 8000e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e24:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000edc <generate_sineWave+0x17c>
 8000e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e30:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	b2d9      	uxtb	r1, r3
 8000e38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee8 <generate_sineWave+0x188>)
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	460a      	mov	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 29; i++) {
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	3301      	adds	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2b1c      	cmp	r3, #28
 8000e4c:	ddc8      	ble.n	8000de0 <generate_sineWave+0x80>
	}
	// E6
	for(int i = 0; i < 34; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	e033      	b.n	8000ebc <generate_sineWave+0x15c>
		sine_E6[i] = (uint8_t) ((arm_sin_f32((2*M_PI*i)/34) + 1)*(170.0f / 2.0f)) ;
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fb25 	bl	80004a4 <__aeabi_i2d>
 8000e5a:	a31d      	add	r3, pc, #116	@ (adr r3, 8000ed0 <generate_sineWave+0x170>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fb8a 	bl	8000578 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <generate_sineWave+0x18c>)
 8000e72:	f7ff fcab 	bl	80007cc <__aeabi_ddiv>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fd8d 	bl	800099c <__aeabi_d2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	ee00 3a10 	vmov	s0, r3
 8000e88:	f002 ffe0 	bl	8003e4c <arm_sin_f32>
 8000e8c:	eef0 7a40 	vmov.f32	s15, s0
 8000e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e98:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000edc <generate_sineWave+0x17c>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ea8:	793b      	ldrb	r3, [r7, #4]
 8000eaa:	b2d9      	uxtb	r1, r3
 8000eac:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <generate_sineWave+0x190>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	460a      	mov	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++) {
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b21      	cmp	r3, #33	@ 0x21
 8000ec0:	ddc8      	ble.n	8000e54 <generate_sineWave+0xf4>
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	54442d18 	.word	0x54442d18
 8000ed4:	401921fb 	.word	0x401921fb
 8000ed8:	40458000 	.word	0x40458000
 8000edc:	42aa0000 	.word	0x42aa0000
 8000ee0:	200000ec 	.word	0x200000ec
 8000ee4:	403d0000 	.word	0x403d0000
 8000ee8:	20000118 	.word	0x20000118
 8000eec:	40410000 	.word	0x40410000
 8000ef0:	20000138 	.word	0x20000138

08000ef4 <HAL_GPIO_EXTI_Callback>:
//			steps = 0; //reset to 0
//		}
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000efe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f02:	481d      	ldr	r0, [pc, #116]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x84>)
 8000f04:	f001 fb50 	bl	80025a8 <HAL_GPIO_TogglePin>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	481c      	ldr	r0, [pc, #112]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x88>)
 8000f0c:	f000 fc2c 	bl	8001768 <HAL_DAC_Stop_DMA>

	if(currentNote == sine_C6){
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x90>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10c      	bne.n	8000f34 <HAL_GPIO_EXTI_Callback+0x40>
		currentNote = sine_E6;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f1e:	601a      	str	r2, [r3, #0]
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 34, DAC_ALIGN_8B_R);
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2308      	movs	r3, #8
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2322      	movs	r3, #34	@ 0x22
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x88>)
 8000f2e:	f000 fb4f 	bl	80015d0 <HAL_DAC_Start_DMA>
		currentNote = sine_C6;
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 43, DAC_ALIGN_8B_R);
	}


}
 8000f32:	e01d      	b.n	8000f70 <HAL_GPIO_EXTI_Callback+0x7c>
	} else if(currentNote == sine_E6){
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a13      	ldr	r2, [pc, #76]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10c      	bne.n	8000f58 <HAL_GPIO_EXTI_Callback+0x64>
		currentNote = sine_G6;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f40:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <HAL_GPIO_EXTI_Callback+0x98>)
 8000f42:	601a      	str	r2, [r3, #0]
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 29, DAC_ALIGN_8B_R);
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2308      	movs	r3, #8
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	231d      	movs	r3, #29
 8000f4e:	2100      	movs	r1, #0
 8000f50:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x88>)
 8000f52:	f000 fb3d 	bl	80015d0 <HAL_DAC_Start_DMA>
}
 8000f56:	e00b      	b.n	8000f70 <HAL_GPIO_EXTI_Callback+0x7c>
		currentNote = sine_C6;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x90>)
 8000f5c:	601a      	str	r2, [r3, #0]
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 43, DAC_ALIGN_8B_R);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	2308      	movs	r3, #8
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	232b      	movs	r3, #43	@ 0x2b
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x88>)
 8000f6c:	f000 fb30 	bl	80015d0 <HAL_DAC_Start_DMA>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	2000002c 	.word	0x2000002c
 8000f80:	20000000 	.word	0x20000000
 8000f84:	200000ec 	.word	0x200000ec
 8000f88:	20000138 	.word	0x20000138
 8000f8c:	20000118 	.word	0x20000118

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	4a08      	ldr	r2, [pc, #32]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_MspInit+0x44>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <HAL_DAC_MspInit+0xd8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d155      	bne.n	80010b2 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <HAL_DAC_MspInit+0xdc>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	4a2d      	ldr	r2, [pc, #180]	@ (80010c0 <HAL_DAC_MspInit+0xdc>)
 800100c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001010:	6593      	str	r3, [r2, #88]	@ 0x58
 8001012:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_DAC_MspInit+0xdc>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <HAL_DAC_MspInit+0xdc>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <HAL_DAC_MspInit+0xdc>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <HAL_DAC_MspInit+0xdc>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001036:	2310      	movs	r3, #16
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	2303      	movs	r3, #3
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f001 f902 	bl	8002254 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001052:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <HAL_DAC_MspInit+0xe4>)
 8001054:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001058:	2206      	movs	r2, #6
 800105a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 800105e:	2210      	movs	r2, #16
 8001060:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 800106a:	2280      	movs	r2, #128	@ 0x80
 800106c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 800107c:	2220      	movs	r2, #32
 800107e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001086:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 8001088:	f000 fe16 	bl	8001cb8 <HAL_DMA_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001092:	f7ff ff7d 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_DAC_MspInit+0xe0>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2036      	movs	r0, #54	@ 0x36
 80010a8:	f000 fa39 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ac:	2036      	movs	r0, #54	@ 0x36
 80010ae:	f000 fa52 	bl	8001556 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	@ 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40007400 	.word	0x40007400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	20000040 	.word	0x20000040
 80010c8:	40020008 	.word	0x40020008

080010cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010dc:	d113      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_TIM_Base_MspInit+0x44>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	201c      	movs	r0, #28
 80010fc:	f000 fa0f 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001100:	201c      	movs	r0, #28
 8001102:	f000 fa28 	bl	8001556 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116a:	f000 f8b9 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <DMA1_Channel1_IRQHandler+0x10>)
 800117a:	f000 ff1c 	bl	8001fb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000040 	.word	0x20000040

08001188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <TIM2_IRQHandler+0x10>)
 800118e:	f002 fa75 	bl	800367c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000a0 	.word	0x200000a0

0800119c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80011a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011a4:	f001 fa1a 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <TIM6_DAC_IRQHandler+0x10>)
 80011b2:	f000 fb1e 	bl	80017f2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000002c 	.word	0x2000002c

080011c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800121c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff ffea 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f002 fe69 	bl	8003ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001216:	f7ff fc11 	bl	8000a3c <main>

0800121a <LoopForever>:

LoopForever:
    b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800121c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001228:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 800122c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001230:	20000160 	.word	0x20000160

08001234 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_IRQHandler>

08001236 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f961 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f80e 	bl	8001268 <HAL_InitTick>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e001      	b.n	800125c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001258:	f7ff fea0 	bl	8000f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125c:	79fb      	ldrb	r3, [r7, #7]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d023      	beq.n	80012c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_InitTick+0x70>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f96d 	bl	8001572 <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d809      	bhi.n	80012b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	f000 f937 	bl	800151e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_InitTick+0x74>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e007      	b.n	80012c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e004      	b.n	80012c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e001      	b.n	80012c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c
 8001304:	2000015c 	.word	0x2000015c

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000015c 	.word	0x2000015c

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e014      	b.n	80015c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	791b      	ldrb	r3, [r3, #4]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fd19 	bl	8000fe4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	795b      	ldrb	r3, [r3, #5]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_DAC_Start_DMA+0x1e>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e0ab      	b.n	8001746 <HAL_DAC_Start_DMA+0x176>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2202      	movs	r2, #2
 80015f8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d12f      	bne.n	8001660 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	@ (8001750 <HAL_DAC_Start_DMA+0x180>)
 8001606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a51      	ldr	r2, [pc, #324]	@ (8001754 <HAL_DAC_Start_DMA+0x184>)
 800160e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a50      	ldr	r2, [pc, #320]	@ (8001758 <HAL_DAC_Start_DMA+0x188>)
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001626:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d013      	beq.n	8001656 <HAL_DAC_Start_DMA+0x86>
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2b08      	cmp	r3, #8
 8001632:	d845      	bhi.n	80016c0 <HAL_DAC_Start_DMA+0xf0>
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_DAC_Start_DMA+0x72>
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d005      	beq.n	800164c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001640:	e03e      	b.n	80016c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3308      	adds	r3, #8
 8001648:	613b      	str	r3, [r7, #16]
        break;
 800164a:	e03c      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	330c      	adds	r3, #12
 8001652:	613b      	str	r3, [r7, #16]
        break;
 8001654:	e037      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3310      	adds	r3, #16
 800165c:	613b      	str	r3, [r7, #16]
        break;
 800165e:	e032      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a3d      	ldr	r2, [pc, #244]	@ (800175c <HAL_DAC_Start_DMA+0x18c>)
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <HAL_DAC_Start_DMA+0x190>)
 800166e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a3b      	ldr	r2, [pc, #236]	@ (8001764 <HAL_DAC_Start_DMA+0x194>)
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001686:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d013      	beq.n	80016b6 <HAL_DAC_Start_DMA+0xe6>
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d817      	bhi.n	80016c4 <HAL_DAC_Start_DMA+0xf4>
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_DAC_Start_DMA+0xd2>
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d005      	beq.n	80016ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80016a0:	e010      	b.n	80016c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3314      	adds	r3, #20
 80016a8:	613b      	str	r3, [r7, #16]
        break;
 80016aa:	e00c      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3318      	adds	r3, #24
 80016b2:	613b      	str	r3, [r7, #16]
        break;
 80016b4:	e007      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	331c      	adds	r3, #28
 80016bc:	613b      	str	r3, [r7, #16]
        break;
 80016be:	e002      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80016c0:	bf00      	nop
 80016c2:	e000      	b.n	80016c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80016c4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6898      	ldr	r0, [r3, #8]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	f000 fb8f 	bl	8001e08 <HAL_DMA_Start_IT>
 80016ea:	4603      	mov	r3, r0
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	e010      	b.n	8001712 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80016fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	68d8      	ldr	r0, [r3, #12]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	f000 fb7d 	bl	8001e08 <HAL_DMA_Start_IT>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2201      	movs	r2, #1
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e005      	b.n	8001744 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f043 0204 	orr.w	r2, r3, #4
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08001b91 	.word	0x08001b91
 8001754:	08001bb3 	.word	0x08001bb3
 8001758:	08001bcf 	.word	0x08001bcf
 800175c:	08001c4d 	.word	0x08001c4d
 8001760:	08001c6f 	.word	0x08001c6f
 8001764:	08001c8b 	.word	0x08001c8b

08001768 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	400a      	ands	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2201      	movs	r2, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fba1 	bl	8001efe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e00c      	b.n	80017e8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fb93 	bl	8001efe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80017e6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001808:	d120      	bne.n	800184c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001818:	d118      	bne.n	800184c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2204      	movs	r2, #4
 800181e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001844:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f84b 	bl	80018e2 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800185a:	d120      	bne.n	800189e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800186a:	d118      	bne.n	800189e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f043 0202 	orr.w	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001896:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9cd 	bl	8001c38 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	795b      	ldrb	r3, [r3, #5]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_DAC_ConfigChannel+0x1c>
 8001910:	2302      	movs	r3, #2
 8001912:	e137      	b.n	8001b84 <HAL_DAC_ConfigChannel+0x28c>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2202      	movs	r2, #2
 800191e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b04      	cmp	r3, #4
 8001926:	f040 8081 	bne.w	8001a2c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800192a:	f7ff fced 	bl	8001308 <HAL_GetTick>
 800192e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d140      	bne.n	80019b8 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001936:	e018      	b.n	800196a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001938:	f7ff fce6 	bl	8001308 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d911      	bls.n	800196a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f043 0208 	orr.w	r2, r3, #8
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2203      	movs	r2, #3
 8001964:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e10c      	b.n	8001b84 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1df      	bne.n	8001938 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fcd1 	bl	8001320 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	69d2      	ldr	r2, [r2, #28]
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40
 8001988:	e023      	b.n	80019d2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800198a:	f7ff fcbd 	bl	8001308 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d90f      	bls.n	80019b8 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da0a      	bge.n	80019b8 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f043 0208 	orr.w	r2, r3, #8
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2203      	movs	r2, #3
 80019b2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0e5      	b.n	8001b84 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dbe3      	blt.n	800198a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fcac 	bl	8001320 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	69d2      	ldr	r2, [r2, #28]
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	ea02 0103 	and.w	r1, r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	21ff      	movs	r1, #255	@ 0xff
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	ea02 0103 	and.w	r1, r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d11d      	bne.n	8001a70 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	221f      	movs	r2, #31
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a76:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2207      	movs	r2, #7
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43da      	mvns	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b14:	d104      	bne.n	8001b20 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e018      	b.n	8001b52 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	e00f      	b.n	8001b52 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001b32:	f001 fc0f 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8001b36:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <HAL_DAC_ConfigChannel+0x294>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d904      	bls.n	8001b4a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	e003      	b.n	8001b52 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001b50:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	22c0      	movs	r2, #192	@ 0xc0
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	400a      	ands	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	04c4b400 	.word	0x04c4b400

08001b90 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fe81 	bl	80018a6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	711a      	strb	r2, [r3, #4]
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fe7a 	bl	80018ba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fe70 	bl	80018ce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	711a      	strb	r2, [r3, #4]
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7ff ffce 	bl	8001bfc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2201      	movs	r2, #1
 8001c64:	711a      	strb	r2, [r3, #4]
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff ffc7 	bl	8001c10 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff ffbd 	bl	8001c24 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	711a      	strb	r2, [r3, #4]
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e08d      	b.n	8001de6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b47      	ldr	r3, [pc, #284]	@ (8001df0 <HAL_DMA_Init+0x138>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d80f      	bhi.n	8001cf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b45      	ldr	r3, [pc, #276]	@ (8001df4 <HAL_DMA_Init+0x13c>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a45      	ldr	r2, [pc, #276]	@ (8001df8 <HAL_DMA_Init+0x140>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a42      	ldr	r2, [pc, #264]	@ (8001dfc <HAL_DMA_Init+0x144>)
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cf4:	e00e      	b.n	8001d14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_DMA_Init+0x148>)
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a3d      	ldr	r2, [pc, #244]	@ (8001df8 <HAL_DMA_Init+0x140>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	009a      	lsls	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a3c      	ldr	r2, [pc, #240]	@ (8001e04 <HAL_DMA_Init+0x14c>)
 8001d12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fa12 	bl	8002190 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d74:	d102      	bne.n	8001d7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <HAL_DMA_Init+0x104>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d80c      	bhi.n	8001dbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa32 	bl	800220c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	e008      	b.n	8001dce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020407 	.word	0x40020407
 8001df4:	bffdfff8 	.word	0xbffdfff8
 8001df8:	cccccccd 	.word	0xcccccccd
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	bffdfbf8 	.word	0xbffdfbf8
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Start_IT+0x20>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e066      	b.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d155      	bne.n	8001ee8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f957 	bl	8002114 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 020e 	orr.w	r2, r2, #14
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e00f      	b.n	8001ea0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 020a 	orr.w	r2, r2, #10
 8001e9e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ebc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e005      	b.n	8001ef4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d008      	beq.n	8001f28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e040      	b.n	8001faa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 020e 	bic.w	r2, r2, #14
 8001f36:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f46:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5c:	f003 021c 	and.w	r2, r3, #28
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f003 031c 	and.w	r3, r3, #28
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d026      	beq.n	8002030 <HAL_DMA_IRQHandler+0x7a>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d021      	beq.n	8002030 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0204 	bic.w	r2, r2, #4
 8002008:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f003 021c 	and.w	r2, r3, #28
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	2104      	movs	r1, #4
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	2b00      	cmp	r3, #0
 8002024:	d071      	beq.n	800210a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800202e:	e06c      	b.n	800210a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	f003 031c 	and.w	r3, r3, #28
 8002038:	2202      	movs	r2, #2
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02e      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xec>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d029      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 020a 	bic.w	r2, r2, #10
 800206a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f003 021c 	and.w	r2, r3, #28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	2102      	movs	r1, #2
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d038      	beq.n	800210a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020a0:	e033      	b.n	800210a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f003 031c 	and.w	r3, r3, #28
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02a      	beq.n	800210c <HAL_DMA_IRQHandler+0x156>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d025      	beq.n	800210c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 020e 	bic.w	r2, r2, #14
 80020ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	f003 021c 	and.w	r2, r3, #28
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800210a:	bf00      	nop
 800210c:	bf00      	nop
}
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800212a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800213c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f003 021c 	and.w	r2, r3, #28
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b10      	cmp	r3, #16
 8002160:	d108      	bne.n	8002174 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002172:	e007      	b.n	8002184 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d80a      	bhi.n	80021ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021b0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6493      	str	r3, [r2, #72]	@ 0x48
 80021b8:	e007      	b.n	80021ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	009a      	lsls	r2, r3, #2
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021c4:	4413      	add	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3b08      	subs	r3, #8
 80021d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002204 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80021e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40020407 	.word	0x40020407
 8002200:	4002081c 	.word	0x4002081c
 8002204:	cccccccd 	.word	0xcccccccd
 8002208:	40020880 	.word	0x40020880

0800220c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800222e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3b01      	subs	r3, #1
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2201      	movs	r2, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	1000823f 	.word	0x1000823f
 8002250:	40020940 	.word	0x40020940

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e166      	b.n	8002532 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8158 	beq.w	800252c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d005      	beq.n	8002294 <HAL_GPIO_Init+0x40>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d130      	bne.n	80022f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ca:	2201      	movs	r2, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 0201 	and.w	r2, r3, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d123      	bne.n	8002386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0203 	and.w	r2, r3, #3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80b2 	beq.w	800252c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c8:	4b61      	ldr	r3, [pc, #388]	@ (8002550 <HAL_GPIO_Init+0x2fc>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023cc:	4a60      	ldr	r2, [pc, #384]	@ (8002550 <HAL_GPIO_Init+0x2fc>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002550 <HAL_GPIO_Init+0x2fc>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002554 <HAL_GPIO_Init+0x300>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800240a:	d02b      	beq.n	8002464 <HAL_GPIO_Init+0x210>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a52      	ldr	r2, [pc, #328]	@ (8002558 <HAL_GPIO_Init+0x304>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d025      	beq.n	8002460 <HAL_GPIO_Init+0x20c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a51      	ldr	r2, [pc, #324]	@ (800255c <HAL_GPIO_Init+0x308>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d01f      	beq.n	800245c <HAL_GPIO_Init+0x208>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a50      	ldr	r2, [pc, #320]	@ (8002560 <HAL_GPIO_Init+0x30c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d019      	beq.n	8002458 <HAL_GPIO_Init+0x204>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4f      	ldr	r2, [pc, #316]	@ (8002564 <HAL_GPIO_Init+0x310>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d013      	beq.n	8002454 <HAL_GPIO_Init+0x200>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4e      	ldr	r2, [pc, #312]	@ (8002568 <HAL_GPIO_Init+0x314>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00d      	beq.n	8002450 <HAL_GPIO_Init+0x1fc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a4d      	ldr	r2, [pc, #308]	@ (800256c <HAL_GPIO_Init+0x318>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x1f8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a4c      	ldr	r2, [pc, #304]	@ (8002570 <HAL_GPIO_Init+0x31c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_GPIO_Init+0x1f4>
 8002444:	2307      	movs	r3, #7
 8002446:	e00e      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002448:	2308      	movs	r3, #8
 800244a:	e00c      	b.n	8002466 <HAL_GPIO_Init+0x212>
 800244c:	2306      	movs	r3, #6
 800244e:	e00a      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002450:	2305      	movs	r3, #5
 8002452:	e008      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002454:	2304      	movs	r3, #4
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002458:	2303      	movs	r3, #3
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x212>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x212>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002476:	4937      	ldr	r1, [pc, #220]	@ (8002554 <HAL_GPIO_Init+0x300>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002484:	4b3b      	ldr	r3, [pc, #236]	@ (8002574 <HAL_GPIO_Init+0x320>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a8:	4a32      	ldr	r2, [pc, #200]	@ (8002574 <HAL_GPIO_Init+0x320>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ae:	4b31      	ldr	r3, [pc, #196]	@ (8002574 <HAL_GPIO_Init+0x320>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d2:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <HAL_GPIO_Init+0x320>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024d8:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <HAL_GPIO_Init+0x320>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002574 <HAL_GPIO_Init+0x320>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002502:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <HAL_GPIO_Init+0x320>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002526:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <HAL_GPIO_Init+0x320>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae91 	bne.w	8002264 <HAL_GPIO_Init+0x10>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	48000400 	.word	0x48000400
 800255c:	48000800 	.word	0x48000800
 8002560:	48000c00 	.word	0x48000c00
 8002564:	48001000 	.word	0x48001000
 8002568:	48001400 	.word	0x48001400
 800256c:	48001800 	.word	0x48001800
 8002570:	48001c00 	.word	0x48001c00
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002594:	e002      	b.n	800259c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43d9      	mvns	r1, r3
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	400b      	ands	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025e6:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fc7a 	bl	8000ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002610:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261c:	d102      	bne.n	8002624 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800261e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002622:	e00b      	b.n	800263c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002632:	d102      	bne.n	800263a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002638:	e000      	b.n	800263c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800263a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40007000 	.word	0x40007000

0800264c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d141      	bne.n	80026de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800265a:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002666:	d131      	bne.n	80026cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002668:	4b47      	ldr	r3, [pc, #284]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800266e:	4a46      	ldr	r2, [pc, #280]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002678:	4b43      	ldr	r3, [pc, #268]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002680:	4a41      	ldr	r2, [pc, #260]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002688:	4b40      	ldr	r3, [pc, #256]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2232      	movs	r2, #50	@ 0x32
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4a3f      	ldr	r2, [pc, #252]	@ (8002790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	0c9b      	lsrs	r3, r3, #18
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269e:	e002      	b.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a6:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b2:	d102      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f2      	bne.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ba:	4b33      	ldr	r3, [pc, #204]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c6:	d158      	bne.n	800277a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e057      	b.n	800277c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026dc:	e04d      	b.n	800277a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026e4:	d141      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026e6:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f2:	d131      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f4:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026fa:	4a23      	ldr	r2, [pc, #140]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002704:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800270c:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2232      	movs	r2, #50	@ 0x32
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	3301      	adds	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272a:	e002      	b.n	8002732 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3b01      	subs	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d102      	bne.n	8002746 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f2      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002752:	d112      	bne.n	800277a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e011      	b.n	800277c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800275e:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002768:	e007      	b.n	800277a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002778:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40007000 	.word	0x40007000
 800278c:	20000004 	.word	0x20000004
 8002790:	431bde83 	.word	0x431bde83

08002794 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f000 bc08 	b.w	8002fb8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a8:	4b96      	ldr	r3, [pc, #600]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b2:	4b94      	ldr	r3, [pc, #592]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80e4 	beq.w	8002992 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4c>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	f040 808b 	bne.w	80028ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 8087 	bne.w	80028ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e0:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_OscConfig+0x64>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e3df      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1a      	ldr	r2, [r3, #32]
 80027fc:	4b81      	ldr	r3, [pc, #516]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d004      	beq.n	8002812 <HAL_RCC_OscConfig+0x7e>
 8002808:	4b7e      	ldr	r3, [pc, #504]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002810:	e005      	b.n	800281e <HAL_RCC_OscConfig+0x8a>
 8002812:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800281e:	4293      	cmp	r3, r2
 8002820:	d223      	bcs.n	800286a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fda0 	bl	800336c <RCC_SetFlashLatencyFromMSIRange>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e3c0      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002836:	4b73      	ldr	r3, [pc, #460]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a72      	ldr	r2, [pc, #456]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b70      	ldr	r3, [pc, #448]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	496d      	ldr	r1, [pc, #436]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002854:	4b6b      	ldr	r3, [pc, #428]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	4968      	ldr	r1, [pc, #416]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e025      	b.n	80028b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800286a:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a65      	ldr	r2, [pc, #404]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4960      	ldr	r1, [pc, #384]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002888:	4b5e      	ldr	r3, [pc, #376]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	495b      	ldr	r1, [pc, #364]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fd60 	bl	800336c <RCC_SetFlashLatencyFromMSIRange>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e380      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b6:	f000 fcc1 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b51      	ldr	r3, [pc, #324]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4950      	ldr	r1, [pc, #320]	@ (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a4e      	ldr	r2, [pc, #312]	@ (8002a0c <HAL_RCC_OscConfig+0x278>)
 80028d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fcc4 	bl	8001268 <HAL_InitTick>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d052      	beq.n	8002990 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	e364      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d032      	beq.n	800295c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028f6:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a42      	ldr	r2, [pc, #264]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002902:	f7fe fd01 	bl	8001308 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800290a:	f7fe fcfd 	bl	8001308 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e34d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291c:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002928:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a35      	ldr	r2, [pc, #212]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4930      	ldr	r1, [pc, #192]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	492b      	ldr	r1, [pc, #172]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
 800295a:	e01a      	b.n	8002992 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002968:	f7fe fcce 	bl	8001308 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002970:	f7fe fcca 	bl	8001308 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e31a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x1dc>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d073      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_OscConfig+0x21c>
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d10e      	bne.n	80029c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d063      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d15f      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e2f7      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x24c>
 80029d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e025      	b.n	8002a2c <HAL_RCC_OscConfig+0x298>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029e8:	d114      	bne.n	8002a14 <HAL_RCC_OscConfig+0x280>
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a02      	ldr	r2, [pc, #8]	@ (8002a04 <HAL_RCC_OscConfig+0x270>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e013      	b.n	8002a2c <HAL_RCC_OscConfig+0x298>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08003f48 	.word	0x08003f48
 8002a0c:	20000004 	.word	0x20000004
 8002a10:	20000008 	.word	0x20000008
 8002a14:	4ba0      	ldr	r3, [pc, #640]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a9f      	ldr	r2, [pc, #636]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b9d      	ldr	r3, [pc, #628]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a9c      	ldr	r2, [pc, #624]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fc68 	bl	8001308 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fc64 	bl	8001308 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e2b4      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	4b92      	ldr	r3, [pc, #584]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2a8>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fc54 	bl	8001308 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fc50 	bl	8001308 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e2a0      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a76:	4b88      	ldr	r3, [pc, #544]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x2d0>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d060      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x310>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d119      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d116      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	4b7c      	ldr	r3, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_OscConfig+0x328>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e27d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	4b76      	ldr	r3, [pc, #472]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	4973      	ldr	r1, [pc, #460]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad0:	e040      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d023      	beq.n	8002b22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ada:	4b6f      	ldr	r3, [pc, #444]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fc0f 	bl	8001308 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe fc0b 	bl	8001308 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e25b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	4b65      	ldr	r3, [pc, #404]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b62      	ldr	r3, [pc, #392]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	495f      	ldr	r1, [pc, #380]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
 8002b20:	e018      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	4b5d      	ldr	r3, [pc, #372]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a5c      	ldr	r2, [pc, #368]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fbeb 	bl	8001308 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe fbe7 	bl	8001308 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e237      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b48:	4b53      	ldr	r3, [pc, #332]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d03c      	beq.n	8002bda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b68:	4b4b      	ldr	r3, [pc, #300]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fbc6 	bl	8001308 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fe fbc2 	bl	8001308 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e212      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b92:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3ec>
 8002ba0:	e01b      	b.n	8002bda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fba9 	bl	8001308 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fe fba5 	bl	8001308 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1f5      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bcc:	4b32      	ldr	r3, [pc, #200]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ef      	bne.n	8002bba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80a6 	beq.w	8002d34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be8:	2300      	movs	r3, #0
 8002bea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bec:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	4a26      	ldr	r2, [pc, #152]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c04:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c14:	4b21      	ldr	r3, [pc, #132]	@ (8002c9c <HAL_RCC_OscConfig+0x508>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d118      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c20:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <HAL_RCC_OscConfig+0x508>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <HAL_RCC_OscConfig+0x508>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fb6c 	bl	8001308 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7fe fb68 	bl	8001308 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1b8      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <HAL_RCC_OscConfig+0x508>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4d8>
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c60:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6a:	e029      	b.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d115      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x50c>
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c84:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	4a03      	ldr	r2, [pc, #12]	@ (8002c98 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c94:	e014      	b.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	4b9d      	ldr	r3, [pc, #628]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	4a9c      	ldr	r2, [pc, #624]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cb0:	4b99      	ldr	r3, [pc, #612]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	4a98      	ldr	r2, [pc, #608]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d016      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fb1e 	bl	8001308 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fb1a 	bl	8001308 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e168      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce6:	4b8c      	ldr	r3, [pc, #560]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ed      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x53c>
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fb07 	bl	8001308 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe fb03 	bl	8001308 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e151      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d14:	4b80      	ldr	r3, [pc, #512]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ed      	bne.n	8002cfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b7b      	ldr	r3, [pc, #492]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d03c      	beq.n	8002dba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d48:	4b73      	ldr	r3, [pc, #460]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d4e:	4a72      	ldr	r2, [pc, #456]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fad6 	bl	8001308 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d60:	f7fe fad2 	bl	8001308 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e122      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d72:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ef      	beq.n	8002d60 <HAL_RCC_OscConfig+0x5cc>
 8002d80:	e01b      	b.n	8002dba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d82:	4b65      	ldr	r3, [pc, #404]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d88:	4a63      	ldr	r2, [pc, #396]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe fab9 	bl	8001308 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d9a:	f7fe fab5 	bl	8001308 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e105      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dac:	4b5a      	ldr	r3, [pc, #360]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ef      	bne.n	8002d9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80f9 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	f040 80cf 	bne.w	8002f6c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dce:	4b52      	ldr	r3, [pc, #328]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0203 	and.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d12c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	3b01      	subs	r3, #1
 8002dee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d123      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d11b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d113      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d109      	bne.n	8002e3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	3b01      	subs	r3, #1
 8002e36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d071      	beq.n	8002f20 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d068      	beq.n	8002f14 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e42:	4b35      	ldr	r3, [pc, #212]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e4e:	4b32      	ldr	r3, [pc, #200]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0ac      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e6a:	f7fe fa4d 	bl	8001308 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fa49 	bl	8001308 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e099      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e84:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <HAL_RCC_OscConfig+0x788>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002eaa:	0212      	lsls	r2, r2, #8
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eb2:	0852      	lsrs	r2, r2, #1
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0552      	lsls	r2, r2, #21
 8002eb8:	4311      	orrs	r1, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ebe:	0852      	lsrs	r2, r2, #1
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0652      	lsls	r2, r2, #25
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eca:	06d2      	lsls	r2, r2, #27
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	4912      	ldr	r1, [pc, #72]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ede:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eec:	f7fe fa0c 	bl	8001308 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fa08 	bl	8001308 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e058      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <HAL_RCC_OscConfig+0x784>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f12:	e050      	b.n	8002fb6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e04f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f20:	4b27      	ldr	r3, [pc, #156]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d144      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f38:	4b21      	ldr	r3, [pc, #132]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a20      	ldr	r2, [pc, #128]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f44:	f7fe f9e0 	bl	8001308 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe f9dc 	bl	8001308 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e02c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x7b8>
 8002f6a:	e024      	b.n	8002fb6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d01f      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a12      	ldr	r2, [pc, #72]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f9c3 	bl	8001308 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe f9bf 	bl	8001308 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4905      	ldr	r1, [pc, #20]	@ (8002fc0 <HAL_RCC_OscConfig+0x82c>)
 8002faa:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <HAL_RCC_OscConfig+0x830>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
 8002fb0:	e001      	b.n	8002fb6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	feeefffc 	.word	0xfeeefffc

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e11d      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b90      	ldr	r3, [pc, #576]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d910      	bls.n	8003010 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b8d      	ldr	r3, [pc, #564]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 020f 	bic.w	r2, r3, #15
 8002ff6:	498b      	ldr	r1, [pc, #556]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b89      	ldr	r3, [pc, #548]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e105      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b81      	ldr	r3, [pc, #516]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003028:	429a      	cmp	r2, r3
 800302a:	d908      	bls.n	800303e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b7e      	ldr	r3, [pc, #504]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	497b      	ldr	r1, [pc, #492]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d079      	beq.n	800313e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d11e      	bne.n	8003090 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	4b75      	ldr	r3, [pc, #468]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0dc      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003062:	f000 f9dd 	bl	8003420 <RCC_GetSysClockFreqFromPLLSource>
 8003066:	4603      	mov	r3, r0
 8003068:	4a70      	ldr	r2, [pc, #448]	@ (800322c <HAL_RCC_ClockConfig+0x264>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d946      	bls.n	80030fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800306e:	4b6e      	ldr	r3, [pc, #440]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d140      	bne.n	80030fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800307a:	4b6b      	ldr	r3, [pc, #428]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003082:	4a69      	ldr	r2, [pc, #420]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003088:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e035      	b.n	80030fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003098:	4b63      	ldr	r3, [pc, #396]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d115      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b9      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0ad      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c0:	4b59      	ldr	r3, [pc, #356]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0a5      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80030d0:	f000 f8b4 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4a55      	ldr	r2, [pc, #340]	@ (800322c <HAL_RCC_ClockConfig+0x264>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d90f      	bls.n	80030fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030dc:	4b52      	ldr	r3, [pc, #328]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 0203 	bic.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4947      	ldr	r1, [pc, #284]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fe f8fb 	bl	8001308 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003114:	e00a      	b.n	800312c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fe f8f7 	bl	8001308 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e077      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 020c 	and.w	r2, r3, #12
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	429a      	cmp	r2, r3
 800313c:	d1eb      	bne.n	8003116 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b80      	cmp	r3, #128	@ 0x80
 8003142:	d105      	bne.n	8003150 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003144:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a37      	ldr	r2, [pc, #220]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800314a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800314e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b31      	ldr	r3, [pc, #196]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003168:	429a      	cmp	r2, r3
 800316a:	d208      	bcs.n	800317e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b2e      	ldr	r3, [pc, #184]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	492b      	ldr	r1, [pc, #172]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317e:	4b29      	ldr	r3, [pc, #164]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d210      	bcs.n	80031ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318c:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 020f 	bic.w	r2, r3, #15
 8003194:	4923      	ldr	r1, [pc, #140]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319c:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <HAL_RCC_ClockConfig+0x25c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e036      	b.n	800321c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4918      	ldr	r1, [pc, #96]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4910      	ldr	r1, [pc, #64]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ec:	f000 f826 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	490c      	ldr	r1, [pc, #48]	@ (8003230 <HAL_RCC_ClockConfig+0x268>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <HAL_RCC_ClockConfig+0x26c>)
 800320a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800320c:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe f829 	bl	8001268 <HAL_InitTick>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]

  return status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40022000 	.word	0x40022000
 8003228:	40021000 	.word	0x40021000
 800322c:	04c4b400 	.word	0x04c4b400
 8003230:	08003f48 	.word	0x08003f48
 8003234:	20000004 	.word	0x20000004
 8003238:	20000008 	.word	0x20000008

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b3e      	ldr	r3, [pc, #248]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b3b      	ldr	r3, [pc, #236]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x34>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d121      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d11e      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003270:	4b34      	ldr	r3, [pc, #208]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800327c:	4b31      	ldr	r3, [pc, #196]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e005      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800328c:	4b2d      	ldr	r3, [pc, #180]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003298:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x10c>)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_GetSysClockFreq+0x110>)
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e004      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x114>)
 80032c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d134      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d003      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0xac>
 80032e0:	e005      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <HAL_RCC_GetSysClockFreq+0x110>)
 80032e4:	617b      	str	r3, [r7, #20]
      break;
 80032e6:	e005      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ea:	617b      	str	r3, [r7, #20]
      break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	617b      	str	r3, [r7, #20]
      break;
 80032f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f4:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3301      	adds	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003302:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	fb03 f202 	mul.w	r2, r3, r2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	0e5b      	lsrs	r3, r3, #25
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	3301      	adds	r3, #1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003334:	69bb      	ldr	r3, [r7, #24]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	@ 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	08003f58 	.word	0x08003f58
 800334c:	00f42400 	.word	0x00f42400
 8003350:	007a1200 	.word	0x007a1200

08003354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000004 	.word	0x20000004

0800336c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003384:	f7ff f942 	bl	800260c <HAL_PWREx_GetVoltageRange>
 8003388:	6178      	str	r0, [r7, #20]
 800338a:	e014      	b.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800338c:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003396:	6593      	str	r3, [r2, #88]	@ 0x58
 8003398:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a4:	f7ff f932 	bl	800260c <HAL_PWREx_GetVoltageRange>
 80033a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003418 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033bc:	d10b      	bne.n	80033d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b80      	cmp	r3, #128	@ 0x80
 80033c2:	d913      	bls.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80033c8:	d902      	bls.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ca:	2302      	movs	r3, #2
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e00d      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	e00a      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80033da:	d902      	bls.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033dc:	2302      	movs	r3, #2
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	e004      	b.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b70      	cmp	r3, #112	@ 0x70
 80033e6:	d101      	bne.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e8:	2301      	movs	r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 020f 	bic.w	r2, r3, #15
 80033f4:	4909      	ldr	r1, [pc, #36]	@ (800341c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033fc:	4b07      	ldr	r3, [pc, #28]	@ (800341c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	429a      	cmp	r2, r3
 8003408:	d001      	beq.n	800340e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	40022000 	.word	0x40022000

08003420 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d00b      	beq.n	800344e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d825      	bhi.n	8003488 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d008      	beq.n	8003454 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d11f      	bne.n	8003488 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800344a:	613b      	str	r3, [r7, #16]
    break;
 800344c:	e01f      	b.n	800348e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800344e:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003450:	613b      	str	r3, [r7, #16]
    break;
 8003452:	e01c      	b.n	800348e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003454:	4b21      	ldr	r3, [pc, #132]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003460:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e005      	b.n	800347c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003470:	4b1a      	ldr	r3, [pc, #104]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800347c:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	613b      	str	r3, [r7, #16]
    break;
 8003486:	e002      	b.n	800348e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
    break;
 800348c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800348e:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	3301      	adds	r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800349c:	4b0f      	ldr	r3, [pc, #60]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	fb03 f202 	mul.w	r2, r3, r2
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b4:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0e5b      	lsrs	r3, r3, #25
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034ce:	683b      	ldr	r3, [r7, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40021000 	.word	0x40021000
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	007a1200 	.word	0x007a1200
 80034e8:	08003f58 	.word	0x08003f58

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e049      	b.n	8003592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fdda 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 faa8 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e04f      	b.n	8003654 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a23      	ldr	r2, [pc, #140]	@ (8003660 <HAL_TIM_Base_Start_IT+0xc4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d018      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <HAL_TIM_Base_Start_IT+0xc8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003668 <HAL_TIM_Base_Start_IT+0xcc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	@ (800366c <HAL_TIM_Base_Start_IT+0xd0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1b      	ldr	r2, [pc, #108]	@ (8003670 <HAL_TIM_Base_Start_IT+0xd4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0x76>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a19      	ldr	r2, [pc, #100]	@ (8003674 <HAL_TIM_Base_Start_IT+0xd8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d115      	bne.n	800363e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <HAL_TIM_Base_Start_IT+0xdc>)
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d015      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0xb4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362a:	d011      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	e008      	b.n	8003650 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e000      	b.n	8003652 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40013400 	.word	0x40013400
 8003674:	40014000 	.word	0x40014000
 8003678:	00010007 	.word	0x00010007

0800367c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0202 	mvn.w	r2, #2
 80036b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9bc 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9ae 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9bf 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0204 	mvn.w	r2, #4
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f996 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f988 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f999 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01b      	beq.n	8003778 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0208 	mvn.w	r2, #8
 8003748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2204      	movs	r2, #4
 800374e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f970 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f962 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f973 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0210 	mvn.w	r2, #16
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2208      	movs	r2, #8
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f94a 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f93c 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f94d 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00c      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f91a 	bl	8003a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00c      	beq.n	8003816 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fb07 	bl	8003e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 faff 	bl	8003e38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00c      	beq.n	800385e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f907 	bl	8003a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0220 	mvn.w	r2, #32
 800387a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fac7 	bl	8003e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_ConfigClockSource+0x1c>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e0b6      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x18a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e2:	d03e      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0xd8>
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e8:	f200 8087 	bhi.w	80039fa <HAL_TIM_ConfigClockSource+0x170>
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f0:	f000 8086 	beq.w	8003a00 <HAL_TIM_ConfigClockSource+0x176>
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f8:	d87f      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 80038fa:	2b70      	cmp	r3, #112	@ 0x70
 80038fc:	d01a      	beq.n	8003934 <HAL_TIM_ConfigClockSource+0xaa>
 80038fe:	2b70      	cmp	r3, #112	@ 0x70
 8003900:	d87b      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 8003902:	2b60      	cmp	r3, #96	@ 0x60
 8003904:	d050      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x11e>
 8003906:	2b60      	cmp	r3, #96	@ 0x60
 8003908:	d877      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 800390a:	2b50      	cmp	r3, #80	@ 0x50
 800390c:	d03c      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0xfe>
 800390e:	2b50      	cmp	r3, #80	@ 0x50
 8003910:	d873      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d058      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x13e>
 8003916:	2b40      	cmp	r3, #64	@ 0x40
 8003918:	d86f      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 800391a:	2b30      	cmp	r3, #48	@ 0x30
 800391c:	d064      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x15e>
 800391e:	2b30      	cmp	r3, #48	@ 0x30
 8003920:	d86b      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 8003922:	2b20      	cmp	r3, #32
 8003924:	d060      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x15e>
 8003926:	2b20      	cmp	r3, #32
 8003928:	d867      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d05c      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x15e>
 800392e:	2b10      	cmp	r3, #16
 8003930:	d05a      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x15e>
 8003932:	e062      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	f000 f9bc 	bl	8003cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
      break;
 8003960:	e04f      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003972:	f000 f9a5 	bl	8003cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003984:	609a      	str	r2, [r3, #8]
      break;
 8003986:	e03c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003994:	461a      	mov	r2, r3
 8003996:	f000 f919 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2150      	movs	r1, #80	@ 0x50
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f972 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039a6:	e02c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b4:	461a      	mov	r2, r3
 80039b6:	f000 f938 	bl	8003c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2160      	movs	r1, #96	@ 0x60
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f962 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039c6:	e01c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d4:	461a      	mov	r2, r3
 80039d6:	f000 f8f9 	bl	8003bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2140      	movs	r1, #64	@ 0x40
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f952 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039e6:	e00c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 f949 	bl	8003c8a <TIM_ITRx_SetConfig>
      break;
 80039f8:	e003      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      break;
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a46      	ldr	r2, [pc, #280]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a43      	ldr	r2, [pc, #268]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a42      	ldr	r2, [pc, #264]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	@ (8003bb8 <TIM_Base_SetConfig+0x138>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a40      	ldr	r2, [pc, #256]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d108      	bne.n	8003ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae0:	d01b      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <TIM_Base_SetConfig+0x130>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d017      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a31      	ldr	r2, [pc, #196]	@ (8003bb4 <TIM_Base_SetConfig+0x134>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a30      	ldr	r2, [pc, #192]	@ (8003bb8 <TIM_Base_SetConfig+0x138>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00f      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <TIM_Base_SetConfig+0x140>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <TIM_Base_SetConfig+0x144>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <TIM_Base_SetConfig+0x148>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <TIM_Base_SetConfig+0x12c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00f      	beq.n	8003b78 <TIM_Base_SetConfig+0xf8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <TIM_Base_SetConfig+0x13c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <TIM_Base_SetConfig+0xf8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <TIM_Base_SetConfig+0x140>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0xf8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	@ (8003bc4 <TIM_Base_SetConfig+0x144>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0xf8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <TIM_Base_SetConfig+0x148>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	611a      	str	r2, [r3, #16]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40013400 	.word	0x40013400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800

08003bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 030a 	bic.w	r3, r3, #10
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0210 	bic.w	r2, r3, #16
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f043 0307 	orr.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	021a      	lsls	r2, r3, #8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e068      	b.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2d      	ldr	r2, [pc, #180]	@ (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8a:	d018      	beq.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a14      	ldr	r2, [pc, #80]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40013400 	.word	0x40013400
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40014000 	.word	0x40014000

08003e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <arm_sin_f32>:
 8003e4c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003ecc <arm_sin_f32+0x80>
 8003e50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003e54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003e60:	d504      	bpl.n	8003e6c <arm_sin_f32+0x20>
 8003e62:	ee17 3a90 	vmov	r3, s15
 8003e66:	3b01      	subs	r3, #1
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e70:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003ed0 <arm_sin_f32+0x84>
 8003e74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e78:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003e7c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003e80:	ee17 3a90 	vmov	r3, s15
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8a:	d21a      	bcs.n	8003ec2 <arm_sin_f32+0x76>
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed4 <arm_sin_f32+0x88>)
 8003e9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003ea8:	ed93 7a00 	vldr	s14, [r3]
 8003eac:	edd2 6a00 	vldr	s13, [r2]
 8003eb0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003eb4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ebc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003ec0:	4770      	bx	lr
 8003ec2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e7e6      	b.n	8003e9a <arm_sin_f32+0x4e>
 8003ecc:	3e22f983 	.word	0x3e22f983
 8003ed0:	44000000 	.word	0x44000000
 8003ed4:	08003f88 	.word	0x08003f88

08003ed8 <memset>:
 8003ed8:	4402      	add	r2, r0
 8003eda:	4603      	mov	r3, r0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <memset+0xa>
 8003ee0:	4770      	bx	lr
 8003ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee6:	e7f9      	b.n	8003edc <memset+0x4>

08003ee8 <__libc_init_array>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4d0d      	ldr	r5, [pc, #52]	@ (8003f20 <__libc_init_array+0x38>)
 8003eec:	4c0d      	ldr	r4, [pc, #52]	@ (8003f24 <__libc_init_array+0x3c>)
 8003eee:	1b64      	subs	r4, r4, r5
 8003ef0:	10a4      	asrs	r4, r4, #2
 8003ef2:	2600      	movs	r6, #0
 8003ef4:	42a6      	cmp	r6, r4
 8003ef6:	d109      	bne.n	8003f0c <__libc_init_array+0x24>
 8003ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8003f28 <__libc_init_array+0x40>)
 8003efa:	4c0c      	ldr	r4, [pc, #48]	@ (8003f2c <__libc_init_array+0x44>)
 8003efc:	f000 f818 	bl	8003f30 <_init>
 8003f00:	1b64      	subs	r4, r4, r5
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	2600      	movs	r6, #0
 8003f06:	42a6      	cmp	r6, r4
 8003f08:	d105      	bne.n	8003f16 <__libc_init_array+0x2e>
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f10:	4798      	blx	r3
 8003f12:	3601      	adds	r6, #1
 8003f14:	e7ee      	b.n	8003ef4 <__libc_init_array+0xc>
 8003f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1a:	4798      	blx	r3
 8003f1c:	3601      	adds	r6, #1
 8003f1e:	e7f2      	b.n	8003f06 <__libc_init_array+0x1e>
 8003f20:	0800478c 	.word	0x0800478c
 8003f24:	0800478c 	.word	0x0800478c
 8003f28:	0800478c 	.word	0x0800478c
 8003f2c:	08004790 	.word	0x08004790

08003f30 <_init>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr

08003f3c <_fini>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr
