
Tutorial2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016bc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001878  08001878  00002878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018b8  080018b8  00003110  2**0
                  CONTENTS
  4 .ARM          00000000  080018b8  080018b8  00003110  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018b8  080018b8  00003110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018b8  080018b8  000028b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018bc  080018bc  000028bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080018c0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000110  080019d0  00003110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080019d0  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000571d  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001327  00000000  00000000  0000885d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00009b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003f8  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b04  00000000  00000000  0000a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005855  00000000  00000000  00033034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9434  00000000  00000000  00038889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00131cbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001490  00000000  00000000  00131d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00133208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000042a  00000000  00000000  0013326e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00133698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000110 	.word	0x20000110
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001860 	.word	0x08001860

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000114 	.word	0x20000114
 80001f8:	08001860 	.word	0x08001860

080001fc <PCSA_test>:
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ITM_Port32(n) (*((volatile unsigned long *) (0xE0000000+4*n)))


float PCSA_test(float* a,uint32_t b){
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	uint32_t c;
	c= a[0]+b;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	ed93 7a00 	vldr	s14, [r3]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	ee07 3a90 	vmov	s15, r3
 8000212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800021a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800021e:	ee17 3a90 	vmov	r3, s15
 8000222:	60fb      	str	r3, [r7, #12]
	return c;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	ee07 3a90 	vmov	s15, r3
 800022a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800022e:	eeb0 0a67 	vmov.f32	s0, s15
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 f96e 	bl	8000522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f861 	bl	800030c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f8b1 	bl	80003b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint32_t i;                      /* Loop counter */
  float32_t diff;          /* Difference between reference and test outputs */

  /* Multiplication of two input buffers */
  arm_mult_f32(srcA_buf_f32, srcB_buf_f32, multOutput, MAX_BLOCKSIZE);
 800024e:	2320      	movs	r3, #32
 8000250:	4a25      	ldr	r2, [pc, #148]	@ (80002e8 <main+0xac>)
 8000252:	4926      	ldr	r1, [pc, #152]	@ (80002ec <main+0xb0>)
 8000254:	4826      	ldr	r0, [pc, #152]	@ (80002f0 <main+0xb4>)
 8000256:	f001 fa23 	bl	80016a0 <arm_mult_f32>

  /* Accumulate the multiplication output values to
     get the dot product of the two inputs */
  for(i=0; i< MAX_BLOCKSIZE; i++)
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	e00b      	b.n	8000278 <main+0x3c>
{
          arm_add_f32(&testOutput, &multOutput[i], &testOutput, 1);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	4a20      	ldr	r2, [pc, #128]	@ (80002e8 <main+0xac>)
 8000266:	1899      	adds	r1, r3, r2
 8000268:	2301      	movs	r3, #1
 800026a:	4a22      	ldr	r2, [pc, #136]	@ (80002f4 <main+0xb8>)
 800026c:	4821      	ldr	r0, [pc, #132]	@ (80002f4 <main+0xb8>)
 800026e:	f001 fa71 	bl	8001754 <arm_add_f32>
  for(i=0; i< MAX_BLOCKSIZE; i++)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	3301      	adds	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	2b1f      	cmp	r3, #31
 800027c:	d9f0      	bls.n	8000260 <main+0x24>
}

  /* absolute value of difference between ref and test */
  ITM_Port32(31) = 1;
 800027e:	4b1e      	ldr	r3, [pc, #120]	@ (80002f8 <main+0xbc>)
 8000280:	2201      	movs	r2, #1
 8000282:	601a      	str	r2, [r3, #0]
  //It is better for 1000 execution
  diff = fabsf(refDotProdOut - testOutput);
 8000284:	4b1d      	ldr	r3, [pc, #116]	@ (80002fc <main+0xc0>)
 8000286:	ed93 7a00 	vldr	s14, [r3]
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <main+0xb8>)
 800028c:	edd3 7a00 	vldr	s15, [r3]
 8000290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000294:	eef0 7ae7 	vabs.f32	s15, s15
 8000298:	edc7 7a02 	vstr	s15, [r7, #8]
  ITM_Port32(31) = 2;
 800029c:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <main+0xbc>)
 800029e:	2202      	movs	r2, #2
 80002a0:	601a      	str	r2, [r3, #0]




  /* Comparison of dot product value with reference */
         if(diff > DELTA)
 80002a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80002a6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000300 <main+0xc4>
 80002aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b2:	dd02      	ble.n	80002ba <main+0x7e>
         {
                 status = ARM_MATH_TEST_FAILURE;
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <main+0xc8>)
 80002b6:	22fa      	movs	r2, #250	@ 0xfa
 80002b8:	701a      	strb	r2, [r3, #0]
         }

         if( status == ARM_MATH_TEST_FAILURE)
 80002ba:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <main+0xc8>)
 80002bc:	f993 3000 	ldrsb.w	r3, [r3]
 80002c0:	f113 0f06 	cmn.w	r3, #6
 80002c4:	d101      	bne.n	80002ca <main+0x8e>
         {
           while(1);
 80002c6:	bf00      	nop
 80002c8:	e7fd      	b.n	80002c6 <main+0x8a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
float out1=0;
 80002ca:	f04f 0300 	mov.w	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
float array[1] = {5};
 80002d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000308 <main+0xcc>)
 80002d2:	603b      	str	r3, [r7, #0]
          out1=PCSA_test(&array,2);
 80002d4:	463b      	mov	r3, r7
 80002d6:	2102      	movs	r1, #2
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff8f 	bl	80001fc <PCSA_test>
 80002de:	ed87 0a01 	vstr	s0, [r7, #4]


         //func(&array, 8);


  while (1)
 80002e2:	bf00      	nop
 80002e4:	e7fd      	b.n	80002e2 <main+0xa6>
 80002e6:	bf00      	nop
 80002e8:	2000012c 	.word	0x2000012c
 80002ec:	20000080 	.word	0x20000080
 80002f0:	20000000 	.word	0x20000000
 80002f4:	200001ac 	.word	0x200001ac
 80002f8:	e000007c 	.word	0xe000007c
 80002fc:	20000100 	.word	0x20000100
 8000300:	358637bd 	.word	0x358637bd
 8000304:	200001b0 	.word	0x200001b0
 8000308:	40a00000 	.word	0x40a00000

0800030c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b096      	sub	sp, #88	@ 0x58
 8000310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	2244      	movs	r2, #68	@ 0x44
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fa74 	bl	8001808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000320:	463b      	mov	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800032e:	2000      	movs	r0, #0
 8000330:	f000 fa72 	bl	8000818 <HAL_PWREx_ControlVoltageScaling>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800033a:	f000 f85d 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800033e:	2310      	movs	r3, #16
 8000340:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800034a:	2360      	movs	r3, #96	@ 0x60
 800034c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000352:	2301      	movs	r3, #1
 8000354:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000356:	2301      	movs	r3, #1
 8000358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800035a:	233c      	movs	r3, #60	@ 0x3c
 800035c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800035e:	2302      	movs	r3, #2
 8000360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000362:	2302      	movs	r3, #2
 8000364:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000366:	2302      	movs	r3, #2
 8000368:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	4618      	mov	r0, r3
 8000370:	f000 faf6 	bl	8000960 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800037a:	f000 f83d 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2303      	movs	r3, #3
 8000384:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000392:	463b      	mov	r3, r7
 8000394:	2105      	movs	r1, #5
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fefc 	bl	8001194 <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003a2:	f000 f829 	bl	80003f8 <Error_Handler>
  }
}
 80003a6:	bf00      	nop
 80003a8:	3758      	adds	r7, #88	@ 0x58
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	4a0e      	ldr	r2, [pc, #56]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003d4:	f043 0302 	orr.w	r3, r3, #2
 80003d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_GPIO_Init+0x44>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <Error_Handler+0x8>

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <HAL_MspInit+0x44>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040e:	4a0e      	ldr	r2, [pc, #56]	@ (8000448 <HAL_MspInit+0x44>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6613      	str	r3, [r2, #96]	@ 0x60
 8000416:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <HAL_MspInit+0x44>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <HAL_MspInit+0x44>)
 8000424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000426:	4a08      	ldr	r2, [pc, #32]	@ (8000448 <HAL_MspInit+0x44>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800042c:	6593      	str	r3, [r2, #88]	@ 0x58
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <HAL_MspInit+0x44>)
 8000430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <NMI_Handler+0x4>

08000454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <MemManage_Handler+0x4>

08000464 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <UsageFault_Handler+0x4>

08000474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a2:	f000 f893 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <SystemInit+0x20>)
 80004b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004b6:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <SystemInit+0x20>)
 80004b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000508 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d4:	f7ff ffea 	bl	80004ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fe:	f001 f98b 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000502:	f7ff fe9b 	bl	800023c <main>

08000506 <LoopForever>:

LoopForever:
    b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000508:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000514:	080018c0 	.word	0x080018c0
  ldr r2, =_sbss
 8000518:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800051c:	200001b8 	.word	0x200001b8

08000520 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_IRQHandler>

08000522 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000528:	2300      	movs	r3, #0
 800052a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f91f 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f80e 	bl	8000554 <HAL_InitTick>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800053e:	2301      	movs	r3, #1
 8000540:	71fb      	strb	r3, [r7, #7]
 8000542:	e001      	b.n	8000548 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000544:	f7ff ff5e 	bl	8000404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000548:	79fb      	ldrb	r3, [r7, #7]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000560:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <HAL_InitTick+0x6c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d023      	beq.n	80005b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <HAL_InitTick+0x70>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <HAL_InitTick+0x6c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000576:	fbb3 f3f1 	udiv	r3, r3, r1
 800057a:	fbb2 f3f3 	udiv	r3, r2, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f91d 	bl	80007be <HAL_SYSTICK_Config>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d10f      	bne.n	80005aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d809      	bhi.n	80005a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000598:	f000 f8f5 	bl	8000786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800059c:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <HAL_InitTick+0x74>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	e007      	b.n	80005b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005a4:	2301      	movs	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e004      	b.n	80005b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e001      	b.n	80005b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005b0:	2301      	movs	r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000010c 	.word	0x2000010c
 80005c4:	20000104 	.word	0x20000104
 80005c8:	20000108 	.word	0x20000108

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000010c 	.word	0x2000010c
 80005f0:	200001b4 	.word	0x200001b4

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200001b4 	.word	0x200001b4

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	b2da      	uxtb	r2, r3
 8000688:	490c      	ldr	r1, [pc, #48]	@ (80006bc <__NVIC_SetPriority+0x4c>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <__NVIC_SetPriority+0x50>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	3b04      	subs	r3, #4
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	@ 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43da      	mvns	r2, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	401a      	ands	r2, r3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43d9      	mvns	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	4313      	orrs	r3, r2
         );
}
 800071e:	4618      	mov	r0, r3
 8000720:	3724      	adds	r7, #36	@ 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000750:	f7ff ff8e 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	@ (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff47 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff5c 	bl	8000654 <__NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff8e 	bl	80006c4 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5d 	bl	8000670 <__NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ffb0 	bl	800072c <SysTick_Config>
 80007cc:	4603      	mov	r3, r0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_PWREx_GetVoltageRange+0x3c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80007e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007e8:	d102      	bne.n	80007f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80007ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ee:	e00b      	b.n	8000808 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_PWREx_GetVoltageRange+0x3c>)
 80007f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80007f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007fe:	d102      	bne.n	8000806 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000804:	e000      	b.n	8000808 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000806:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40007000 	.word	0x40007000

08000818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d141      	bne.n	80008aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000826:	4b4b      	ldr	r3, [pc, #300]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800082e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000832:	d131      	bne.n	8000898 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000834:	4b47      	ldr	r3, [pc, #284]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800083a:	4a46      	ldr	r2, [pc, #280]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800083c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	4b43      	ldr	r3, [pc, #268]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800084c:	4a41      	ldr	r2, [pc, #260]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000854:	4b40      	ldr	r3, [pc, #256]	@ (8000958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2232      	movs	r2, #50	@ 0x32
 800085a:	fb02 f303 	mul.w	r3, r2, r3
 800085e:	4a3f      	ldr	r2, [pc, #252]	@ (800095c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	0c9b      	lsrs	r3, r3, #18
 8000866:	3301      	adds	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800086a:	e002      	b.n	8000872 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3b01      	subs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000872:	4b38      	ldr	r3, [pc, #224]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800087a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800087e:	d102      	bne.n	8000886 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f2      	bne.n	800086c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800088e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000892:	d158      	bne.n	8000946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000894:	2303      	movs	r3, #3
 8000896:	e057      	b.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000898:	4b2e      	ldr	r3, [pc, #184]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800089a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800089e:	4a2d      	ldr	r2, [pc, #180]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80008a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80008a8:	e04d      	b.n	8000946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008b0:	d141      	bne.n	8000936 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80008b2:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008be:	d131      	bne.n	8000924 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80008d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2232      	movs	r2, #50	@ 0x32
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	0c9b      	lsrs	r3, r3, #18
 80008f2:	3301      	adds	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008f6:	e002      	b.n	80008fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800090a:	d102      	bne.n	8000912 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f2      	bne.n	80008f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800091a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800091e:	d112      	bne.n	8000946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000920:	2303      	movs	r3, #3
 8000922:	e011      	b.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800092c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000930:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000934:	e007      	b.n	8000946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000936:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000944:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40007000 	.word	0x40007000
 8000958:	20000104 	.word	0x20000104
 800095c:	431bde83 	.word	0x431bde83

08000960 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	f000 bc08 	b.w	8001184 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000974:	4b96      	ldr	r3, [pc, #600]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f003 030c 	and.w	r3, r3, #12
 800097c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800097e:	4b94      	ldr	r3, [pc, #592]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80e4 	beq.w	8000b5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d007      	beq.n	80009ac <HAL_RCC_OscConfig+0x4c>
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2b0c      	cmp	r3, #12
 80009a0:	f040 808b 	bne.w	8000aba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	f040 8087 	bne.w	8000aba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009ac:	4b88      	ldr	r3, [pc, #544]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <HAL_RCC_OscConfig+0x64>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e3df      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a1a      	ldr	r2, [r3, #32]
 80009c8:	4b81      	ldr	r3, [pc, #516]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <HAL_RCC_OscConfig+0x7e>
 80009d4:	4b7e      	ldr	r3, [pc, #504]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80009dc:	e005      	b.n	80009ea <HAL_RCC_OscConfig+0x8a>
 80009de:	4b7c      	ldr	r3, [pc, #496]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 80009e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009e4:	091b      	lsrs	r3, r3, #4
 80009e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d223      	bcs.n	8000a36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a1b      	ldr	r3, [r3, #32]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fd94 	bl	8001520 <RCC_SetFlashLatencyFromMSIRange>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e3c0      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a02:	4b73      	ldr	r3, [pc, #460]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a72      	ldr	r2, [pc, #456]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	4b70      	ldr	r3, [pc, #448]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	496d      	ldr	r1, [pc, #436]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a20:	4b6b      	ldr	r3, [pc, #428]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	4968      	ldr	r1, [pc, #416]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a30:	4313      	orrs	r3, r2
 8000a32:	604b      	str	r3, [r1, #4]
 8000a34:	e025      	b.n	8000a82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a36:	4b66      	ldr	r3, [pc, #408]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a65      	ldr	r2, [pc, #404]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	4b63      	ldr	r3, [pc, #396]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	4960      	ldr	r1, [pc, #384]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a54:	4b5e      	ldr	r3, [pc, #376]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	495b      	ldr	r1, [pc, #364]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d109      	bne.n	8000a82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fd54 	bl	8001520 <RCC_SetFlashLatencyFromMSIRange>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e380      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a82:	f000 fcc1 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 8000a86:	4602      	mov	r2, r0
 8000a88:	4b51      	ldr	r3, [pc, #324]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	091b      	lsrs	r3, r3, #4
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	4950      	ldr	r1, [pc, #320]	@ (8000bd4 <HAL_RCC_OscConfig+0x274>)
 8000a94:	5ccb      	ldrb	r3, [r1, r3]
 8000a96:	f003 031f 	and.w	r3, r3, #31
 8000a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8000bd8 <HAL_RCC_OscConfig+0x278>)
 8000aa0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8000bdc <HAL_RCC_OscConfig+0x27c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd54 	bl	8000554 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d052      	beq.n	8000b5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	e364      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d032      	beq.n	8000b28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ac2:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a42      	ldr	r2, [pc, #264]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ace:	f7ff fd91 	bl	80005f4 <HAL_GetTick>
 8000ad2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ad4:	e008      	b.n	8000ae8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ad6:	f7ff fd8d 	bl	80005f4 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e34d      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ae8:	4b39      	ldr	r3, [pc, #228]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f0      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000af4:	4b36      	ldr	r3, [pc, #216]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a35      	ldr	r2, [pc, #212]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b33      	ldr	r3, [pc, #204]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4930      	ldr	r1, [pc, #192]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b12:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	492b      	ldr	r1, [pc, #172]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	604b      	str	r3, [r1, #4]
 8000b26:	e01a      	b.n	8000b5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a28      	ldr	r2, [pc, #160]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b2e:	f023 0301 	bic.w	r3, r3, #1
 8000b32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b34:	f7ff fd5e 	bl	80005f4 <HAL_GetTick>
 8000b38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b3a:	e008      	b.n	8000b4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b3c:	f7ff fd5a 	bl	80005f4 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d901      	bls.n	8000b4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e31a      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f0      	bne.n	8000b3c <HAL_RCC_OscConfig+0x1dc>
 8000b5a:	e000      	b.n	8000b5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d073      	beq.n	8000c52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d005      	beq.n	8000b7c <HAL_RCC_OscConfig+0x21c>
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d10e      	bne.n	8000b94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d10b      	bne.n	8000b94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d063      	beq.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d15f      	bne.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e2f7      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b9c:	d106      	bne.n	8000bac <HAL_RCC_OscConfig+0x24c>
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e025      	b.n	8000bf8 <HAL_RCC_OscConfig+0x298>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bb4:	d114      	bne.n	8000be0 <HAL_RCC_OscConfig+0x280>
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a02      	ldr	r2, [pc, #8]	@ (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e013      	b.n	8000bf8 <HAL_RCC_OscConfig+0x298>
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	08001878 	.word	0x08001878
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	20000108 	.word	0x20000108
 8000be0:	4ba0      	ldr	r3, [pc, #640]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a9f      	ldr	r2, [pc, #636]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b9d      	ldr	r3, [pc, #628]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a9c      	ldr	r2, [pc, #624]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d013      	beq.n	8000c28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c00:	f7ff fcf8 	bl	80005f4 <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fcf4 	bl	80005f4 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b64      	cmp	r3, #100	@ 0x64
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e2b4      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c1a:	4b92      	ldr	r3, [pc, #584]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f0      	beq.n	8000c08 <HAL_RCC_OscConfig+0x2a8>
 8000c26:	e014      	b.n	8000c52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c28:	f7ff fce4 	bl	80005f4 <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c2e:	e008      	b.n	8000c42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c30:	f7ff fce0 	bl	80005f4 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b64      	cmp	r3, #100	@ 0x64
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e2a0      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c42:	4b88      	ldr	r3, [pc, #544]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f0      	bne.n	8000c30 <HAL_RCC_OscConfig+0x2d0>
 8000c4e:	e000      	b.n	8000c52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d060      	beq.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d005      	beq.n	8000c70 <HAL_RCC_OscConfig+0x310>
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	d119      	bne.n	8000c9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d116      	bne.n	8000c9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c70:	4b7c      	ldr	r3, [pc, #496]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <HAL_RCC_OscConfig+0x328>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e27d      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c88:	4b76      	ldr	r3, [pc, #472]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	061b      	lsls	r3, r3, #24
 8000c96:	4973      	ldr	r1, [pc, #460]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c9c:	e040      	b.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d023      	beq.n	8000cee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a6e      	ldr	r2, [pc, #440]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fc9f 	bl	80005f4 <HAL_GetTick>
 8000cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cb8:	e008      	b.n	8000ccc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cba:	f7ff fc9b 	bl	80005f4 <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d901      	bls.n	8000ccc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e25b      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ccc:	4b65      	ldr	r3, [pc, #404]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f0      	beq.n	8000cba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd8:	4b62      	ldr	r3, [pc, #392]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	061b      	lsls	r3, r3, #24
 8000ce6:	495f      	ldr	r1, [pc, #380]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e018      	b.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cee:	4b5d      	ldr	r3, [pc, #372]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fc7b 	bl	80005f4 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fc77 	bl	80005f4 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e237      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d14:	4b53      	ldr	r3, [pc, #332]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f0      	bne.n	8000d02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d03c      	beq.n	8000da6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01c      	beq.n	8000d6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d34:	4b4b      	ldr	r3, [pc, #300]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d44:	f7ff fc56 	bl	80005f4 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fc52 	bl	80005f4 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e212      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d5e:	4b41      	ldr	r3, [pc, #260]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0ef      	beq.n	8000d4c <HAL_RCC_OscConfig+0x3ec>
 8000d6c:	e01b      	b.n	8000da6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d74:	4a3b      	ldr	r2, [pc, #236]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d76:	f023 0301 	bic.w	r3, r3, #1
 8000d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fc39 	bl	80005f4 <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fc35 	bl	80005f4 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e1f5      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ef      	bne.n	8000d86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80a6 	beq.w	8000f00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10d      	bne.n	8000de0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc8:	4a26      	ldr	r2, [pc, #152]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de0:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <HAL_RCC_OscConfig+0x508>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d118      	bne.n	8000e1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dec:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <HAL_RCC_OscConfig+0x508>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <HAL_RCC_OscConfig+0x508>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fbfc 	bl	80005f4 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e00:	f7ff fbf8 	bl	80005f4 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e1b8      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_RCC_OscConfig+0x508>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_RCC_OscConfig+0x4d8>
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000e36:	e029      	b.n	8000e8c <HAL_RCC_OscConfig+0x52c>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d115      	bne.n	8000e6c <HAL_RCC_OscConfig+0x50c>
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e46:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e56:	4a03      	ldr	r2, [pc, #12]	@ (8000e64 <HAL_RCC_OscConfig+0x504>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x52c>
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	4b9d      	ldr	r3, [pc, #628]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e72:	4a9c      	ldr	r2, [pc, #624]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000e7c:	4b99      	ldr	r3, [pc, #612]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e82:	4a98      	ldr	r2, [pc, #608]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d016      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e94:	f7ff fbae 	bl	80005f4 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e9a:	e00a      	b.n	8000eb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fbaa 	bl	80005f4 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e168      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000eb2:	4b8c      	ldr	r3, [pc, #560]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0ed      	beq.n	8000e9c <HAL_RCC_OscConfig+0x53c>
 8000ec0:	e015      	b.n	8000eee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec2:	f7ff fb97 	bl	80005f4 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff fb93 	bl	80005f4 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e151      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ee0:	4b80      	ldr	r3, [pc, #512]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1ed      	bne.n	8000eca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eee:	7ffb      	ldrb	r3, [r7, #31]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d105      	bne.n	8000f00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef4:	4b7b      	ldr	r3, [pc, #492]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	4a7a      	ldr	r2, [pc, #488]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d03c      	beq.n	8000f86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d01c      	beq.n	8000f4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f14:	4b73      	ldr	r3, [pc, #460]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f1a:	4a72      	ldr	r2, [pc, #456]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f24:	f7ff fb66 	bl	80005f4 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f2c:	f7ff fb62 	bl	80005f4 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e122      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f3e:	4b69      	ldr	r3, [pc, #420]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0ef      	beq.n	8000f2c <HAL_RCC_OscConfig+0x5cc>
 8000f4c:	e01b      	b.n	8000f86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f4e:	4b65      	ldr	r3, [pc, #404]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f54:	4a63      	ldr	r2, [pc, #396]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb49 	bl	80005f4 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f66:	f7ff fb45 	bl	80005f4 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e105      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f78:	4b5a      	ldr	r3, [pc, #360]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1ef      	bne.n	8000f66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80f9 	beq.w	8001182 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	f040 80cf 	bne.w	8001138 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f9a:	4b52      	ldr	r3, [pc, #328]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0203 	and.w	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d12c      	bne.n	8001008 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d123      	bne.n	8001008 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d11b      	bne.n	8001008 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d113      	bne.n	8001008 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	3b01      	subs	r3, #1
 8000fee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d109      	bne.n	8001008 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	3b01      	subs	r3, #1
 8001002:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001004:	429a      	cmp	r2, r3
 8001006:	d071      	beq.n	80010ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d068      	beq.n	80010e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800100e:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0ac      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800102a:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2d      	ldr	r2, [pc, #180]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8001030:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001034:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001036:	f7ff fadd 	bl	80005f4 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fad9 	bl	80005f4 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e099      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_RCC_OscConfig+0x788>)
 8001062:	4013      	ands	r3, r2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800106c:	3a01      	subs	r2, #1
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	4311      	orrs	r1, r2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001076:	0212      	lsls	r2, r2, #8
 8001078:	4311      	orrs	r1, r2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800107e:	0852      	lsrs	r2, r2, #1
 8001080:	3a01      	subs	r2, #1
 8001082:	0552      	lsls	r2, r2, #21
 8001084:	4311      	orrs	r1, r2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800108a:	0852      	lsrs	r2, r2, #1
 800108c:	3a01      	subs	r2, #1
 800108e:	0652      	lsls	r2, r2, #25
 8001090:	4311      	orrs	r1, r2
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001096:	06d2      	lsls	r2, r2, #27
 8001098:	430a      	orrs	r2, r1
 800109a:	4912      	ldr	r1, [pc, #72]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 800109c:	4313      	orrs	r3, r2
 800109e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 80010a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 80010b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010b8:	f7ff fa9c 	bl	80005f4 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c0:	f7ff fa98 	bl	80005f4 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e058      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <HAL_RCC_OscConfig+0x784>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010de:	e050      	b.n	8001182 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e04f      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
 80010e4:	40021000 	.word	0x40021000
 80010e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d144      	bne.n	8001182 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a23      	ldr	r2, [pc, #140]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 80010fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a20      	ldr	r2, [pc, #128]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 800110a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800110e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001110:	f7ff fa70 	bl	80005f4 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fa6c 	bl	80005f4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e02c      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x7b8>
 8001136:	e024      	b.n	8001182 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d01f      	beq.n	800117e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 8001144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff fa53 	bl	80005f4 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fa4f 	bl	80005f4 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e00f      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f0      	bne.n	8001152 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	4905      	ldr	r1, [pc, #20]	@ (800118c <HAL_RCC_OscConfig+0x82c>)
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_RCC_OscConfig+0x830>)
 8001178:	4013      	ands	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
 800117c:	e001      	b.n	8001182 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021000 	.word	0x40021000
 8001190:	feeefffc 	.word	0xfeeefffc

08001194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e11d      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011ac:	4b90      	ldr	r3, [pc, #576]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d910      	bls.n	80011dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b8d      	ldr	r3, [pc, #564]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 020f 	bic.w	r2, r3, #15
 80011c2:	498b      	ldr	r1, [pc, #556]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b89      	ldr	r3, [pc, #548]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e105      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d010      	beq.n	800120a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	4b81      	ldr	r3, [pc, #516]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d908      	bls.n	800120a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b7e      	ldr	r3, [pc, #504]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	497b      	ldr	r1, [pc, #492]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d079      	beq.n	800130a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d11e      	bne.n	800125c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121e:	4b75      	ldr	r3, [pc, #468]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0dc      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800122e:	f000 f9d1 	bl	80015d4 <RCC_GetSysClockFreqFromPLLSource>
 8001232:	4603      	mov	r3, r0
 8001234:	4a70      	ldr	r2, [pc, #448]	@ (80013f8 <HAL_RCC_ClockConfig+0x264>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d946      	bls.n	80012c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800123a:	4b6e      	ldr	r3, [pc, #440]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d140      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001246:	4b6b      	ldr	r3, [pc, #428]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800124e:	4a69      	ldr	r2, [pc, #420]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e035      	b.n	80012c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d107      	bne.n	8001274 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001264:	4b63      	ldr	r3, [pc, #396]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d115      	bne.n	800129c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0b9      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800127c:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0ad      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800128c:	4b59      	ldr	r3, [pc, #356]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0a5      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800129c:	f000 f8b4 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a55      	ldr	r2, [pc, #340]	@ (80013f8 <HAL_RCC_ClockConfig+0x264>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d90f      	bls.n	80012c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80012a8:	4b52      	ldr	r3, [pc, #328]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80012b4:	4b4f      	ldr	r3, [pc, #316]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012bc:	4a4d      	ldr	r2, [pc, #308]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80012be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012c8:	4b4a      	ldr	r3, [pc, #296]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 0203 	bic.w	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4947      	ldr	r1, [pc, #284]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012da:	f7ff f98b 	bl	80005f4 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e2:	f7ff f987 	bl	80005f4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e077      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f8:	4b3e      	ldr	r3, [pc, #248]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 020c 	and.w	r2, r3, #12
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	429a      	cmp	r2, r3
 8001308:	d1eb      	bne.n	80012e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b80      	cmp	r3, #128	@ 0x80
 800130e:	d105      	bne.n	800131c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001310:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a37      	ldr	r2, [pc, #220]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800131a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001334:	429a      	cmp	r2, r3
 8001336:	d208      	bcs.n	800134a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001338:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	492b      	ldr	r1, [pc, #172]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800134a:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d210      	bcs.n	800137a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001358:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 020f 	bic.w	r2, r3, #15
 8001360:	4923      	ldr	r1, [pc, #140]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001368:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_RCC_ClockConfig+0x25c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e036      	b.n	80013e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4918      	ldr	r1, [pc, #96]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4910      	ldr	r1, [pc, #64]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b8:	f000 f826 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_RCC_ClockConfig+0x260>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	490c      	ldr	r1, [pc, #48]	@ (80013fc <HAL_RCC_ClockConfig+0x268>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_RCC_ClockConfig+0x26c>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_RCC_ClockConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8b9 	bl	8000554 <HAL_InitTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	04c4b400 	.word	0x04c4b400
 80013fc:	08001878 	.word	0x08001878
 8001400:	20000104 	.word	0x20000104
 8001404:	20000108 	.word	0x20000108

08001408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_GetSysClockFreq+0x34>
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d121      	bne.n	800147a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11e      	bne.n	800147a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800143c:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001448:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 800144a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	e005      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001464:	4a2b      	ldr	r2, [pc, #172]	@ (8001514 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10d      	bne.n	8001490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d102      	bne.n	8001486 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x110>)
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	e004      	b.n	8001490 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d101      	bne.n	8001490 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <HAL_RCC_GetSysClockFreq+0x114>)
 800148e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d134      	bne.n	8001500 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d003      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0xa6>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d003      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0xac>
 80014ac:	e005      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x110>)
 80014b0:	617b      	str	r3, [r7, #20]
      break;
 80014b2:	e005      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_RCC_GetSysClockFreq+0x114>)
 80014b6:	617b      	str	r3, [r7, #20]
      break;
 80014b8:	e002      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	617b      	str	r3, [r7, #20]
      break;
 80014be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3301      	adds	r3, #1
 80014cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	fb03 f202 	mul.w	r2, r3, r2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x108>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	0e5b      	lsrs	r3, r3, #25
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	3301      	adds	r3, #1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001500:	69bb      	ldr	r3, [r7, #24]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	08001888 	.word	0x08001888
 8001518:	00f42400 	.word	0x00f42400
 800151c:	007a1200 	.word	0x007a1200

08001520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001538:	f7ff f94e 	bl	80007d8 <HAL_PWREx_GetVoltageRange>
 800153c:	6178      	str	r0, [r7, #20]
 800153e:	e014      	b.n	800156a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800154a:	6593      	str	r3, [r2, #88]	@ 0x58
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001558:	f7ff f93e 	bl	80007d8 <HAL_PWREx_GetVoltageRange>
 800155c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001570:	d10b      	bne.n	800158a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b80      	cmp	r3, #128	@ 0x80
 8001576:	d913      	bls.n	80015a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2ba0      	cmp	r3, #160	@ 0xa0
 800157c:	d902      	bls.n	8001584 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800157e:	2302      	movs	r3, #2
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	e00d      	b.n	80015a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001584:	2301      	movs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	e00a      	b.n	80015a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b7f      	cmp	r3, #127	@ 0x7f
 800158e:	d902      	bls.n	8001596 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	e004      	b.n	80015a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b70      	cmp	r3, #112	@ 0x70
 800159a:	d101      	bne.n	80015a0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 020f 	bic.w	r2, r3, #15
 80015a8:	4909      	ldr	r1, [pc, #36]	@ (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40022000 	.word	0x40022000

080015d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d00b      	beq.n	8001602 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d825      	bhi.n	800163c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d008      	beq.n	8001608 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d11f      	bne.n	800163c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80015fe:	613b      	str	r3, [r7, #16]
    break;
 8001600:	e01f      	b.n	8001642 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001604:	613b      	str	r3, [r7, #16]
    break;
 8001606:	e01c      	b.n	8001642 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001614:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e005      	b.n	8001630 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	613b      	str	r3, [r7, #16]
    break;
 800163a:	e002      	b.n	8001642 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
    break;
 8001640:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	3301      	adds	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	fb03 f202 	mul.w	r2, r3, r2
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0e5b      	lsrs	r3, r3, #25
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001682:	683b      	ldr	r3, [r7, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	00f42400 	.word	0x00f42400
 8001698:	007a1200 	.word	0x007a1200
 800169c:	08001888 	.word	0x08001888

080016a0 <arm_mult_f32>:
 80016a0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80016a4:	b4f0      	push	{r4, r5, r6, r7}
 80016a6:	d033      	beq.n	8001710 <arm_mult_f32+0x70>
 80016a8:	f100 0610 	add.w	r6, r0, #16
 80016ac:	f101 0510 	add.w	r5, r1, #16
 80016b0:	f102 0410 	add.w	r4, r2, #16
 80016b4:	4667      	mov	r7, ip
 80016b6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80016ba:	ed56 7a04 	vldr	s15, [r6, #-16]
 80016be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c2:	3f01      	subs	r7, #1
 80016c4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80016c8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80016cc:	ed56 7a03 	vldr	s15, [r6, #-12]
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	f106 0610 	add.w	r6, r6, #16
 80016d8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80016dc:	ed15 7a02 	vldr	s14, [r5, #-8]
 80016e0:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80016e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e8:	f105 0510 	add.w	r5, r5, #16
 80016ec:	ed44 7a02 	vstr	s15, [r4, #-8]
 80016f0:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80016f4:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 80016f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fc:	f104 0410 	add.w	r4, r4, #16
 8001700:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8001704:	d1d7      	bne.n	80016b6 <arm_mult_f32+0x16>
 8001706:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800170a:	4420      	add	r0, r4
 800170c:	4421      	add	r1, r4
 800170e:	4422      	add	r2, r4
 8001710:	f013 0303 	ands.w	r3, r3, #3
 8001714:	d01b      	beq.n	800174e <arm_mult_f32+0xae>
 8001716:	edd1 7a00 	vldr	s15, [r1]
 800171a:	ed90 7a00 	vldr	s14, [r0]
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	3b01      	subs	r3, #1
 8001724:	edc2 7a00 	vstr	s15, [r2]
 8001728:	d011      	beq.n	800174e <arm_mult_f32+0xae>
 800172a:	edd0 7a01 	vldr	s15, [r0, #4]
 800172e:	ed91 7a01 	vldr	s14, [r1, #4]
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	2b01      	cmp	r3, #1
 8001738:	edc2 7a01 	vstr	s15, [r2, #4]
 800173c:	d007      	beq.n	800174e <arm_mult_f32+0xae>
 800173e:	edd0 7a02 	vldr	s15, [r0, #8]
 8001742:	ed91 7a02 	vldr	s14, [r1, #8]
 8001746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174a:	edc2 7a02 	vstr	s15, [r2, #8]
 800174e:	bcf0      	pop	{r4, r5, r6, r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <arm_add_f32>:
 8001754:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8001758:	b4f0      	push	{r4, r5, r6, r7}
 800175a:	d033      	beq.n	80017c4 <arm_add_f32+0x70>
 800175c:	f100 0610 	add.w	r6, r0, #16
 8001760:	f101 0510 	add.w	r5, r1, #16
 8001764:	f102 0410 	add.w	r4, r2, #16
 8001768:	4667      	mov	r7, ip
 800176a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800176e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8001772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001776:	3f01      	subs	r7, #1
 8001778:	ed44 7a04 	vstr	s15, [r4, #-16]
 800177c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8001780:	ed56 7a03 	vldr	s15, [r6, #-12]
 8001784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001788:	f106 0610 	add.w	r6, r6, #16
 800178c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8001790:	ed15 7a02 	vldr	s14, [r5, #-8]
 8001794:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8001798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800179c:	f105 0510 	add.w	r5, r5, #16
 80017a0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80017a4:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80017a8:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 80017ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b0:	f104 0410 	add.w	r4, r4, #16
 80017b4:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80017b8:	d1d7      	bne.n	800176a <arm_add_f32+0x16>
 80017ba:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80017be:	4420      	add	r0, r4
 80017c0:	4421      	add	r1, r4
 80017c2:	4422      	add	r2, r4
 80017c4:	f013 0303 	ands.w	r3, r3, #3
 80017c8:	d01b      	beq.n	8001802 <arm_add_f32+0xae>
 80017ca:	edd1 7a00 	vldr	s15, [r1]
 80017ce:	ed90 7a00 	vldr	s14, [r0]
 80017d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d6:	3b01      	subs	r3, #1
 80017d8:	edc2 7a00 	vstr	s15, [r2]
 80017dc:	d011      	beq.n	8001802 <arm_add_f32+0xae>
 80017de:	edd0 7a01 	vldr	s15, [r0, #4]
 80017e2:	ed91 7a01 	vldr	s14, [r1, #4]
 80017e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80017f0:	d007      	beq.n	8001802 <arm_add_f32+0xae>
 80017f2:	edd0 7a02 	vldr	s15, [r0, #8]
 80017f6:	ed91 7a02 	vldr	s14, [r1, #8]
 80017fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017fe:	edc2 7a02 	vstr	s15, [r2, #8]
 8001802:	bcf0      	pop	{r4, r5, r6, r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <memset>:
 8001808:	4402      	add	r2, r0
 800180a:	4603      	mov	r3, r0
 800180c:	4293      	cmp	r3, r2
 800180e:	d100      	bne.n	8001812 <memset+0xa>
 8001810:	4770      	bx	lr
 8001812:	f803 1b01 	strb.w	r1, [r3], #1
 8001816:	e7f9      	b.n	800180c <memset+0x4>

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4d0d      	ldr	r5, [pc, #52]	@ (8001850 <__libc_init_array+0x38>)
 800181c:	4c0d      	ldr	r4, [pc, #52]	@ (8001854 <__libc_init_array+0x3c>)
 800181e:	1b64      	subs	r4, r4, r5
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	2600      	movs	r6, #0
 8001824:	42a6      	cmp	r6, r4
 8001826:	d109      	bne.n	800183c <__libc_init_array+0x24>
 8001828:	4d0b      	ldr	r5, [pc, #44]	@ (8001858 <__libc_init_array+0x40>)
 800182a:	4c0c      	ldr	r4, [pc, #48]	@ (800185c <__libc_init_array+0x44>)
 800182c:	f000 f818 	bl	8001860 <_init>
 8001830:	1b64      	subs	r4, r4, r5
 8001832:	10a4      	asrs	r4, r4, #2
 8001834:	2600      	movs	r6, #0
 8001836:	42a6      	cmp	r6, r4
 8001838:	d105      	bne.n	8001846 <__libc_init_array+0x2e>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001840:	4798      	blx	r3
 8001842:	3601      	adds	r6, #1
 8001844:	e7ee      	b.n	8001824 <__libc_init_array+0xc>
 8001846:	f855 3b04 	ldr.w	r3, [r5], #4
 800184a:	4798      	blx	r3
 800184c:	3601      	adds	r6, #1
 800184e:	e7f2      	b.n	8001836 <__libc_init_array+0x1e>
 8001850:	080018b8 	.word	0x080018b8
 8001854:	080018b8 	.word	0x080018b8
 8001858:	080018b8 	.word	0x080018b8
 800185c:	080018bc 	.word	0x080018bc

08001860 <_init>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	bf00      	nop
 8001864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001866:	bc08      	pop	{r3}
 8001868:	469e      	mov	lr, r3
 800186a:	4770      	bx	lr

0800186c <_fini>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr
