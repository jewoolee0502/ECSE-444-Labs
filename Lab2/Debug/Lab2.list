
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf4  08003cf4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf4  08003cf4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf4  08003cf4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00004cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00004cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cfc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003d08  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003d08  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d0c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177b  00000000  00000000  0000dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0000f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c4  00000000  00000000  0000fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b37  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095fe  00000000  00000000  00039fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010606f  00000000  00000000  000435d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000243c  00000000  00000000  00149684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003c9c 	.word	0x08003c9c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003c9c 	.word	0x08003c9c

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fb24 	bl	800084e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f943 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f9f7 	bl	80005fc <MX_GPIO_Init>
  MX_ADC1_Init();
 800020e:	f000 f991 	bl	8000534 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char button_status = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]
  float temperature = 0;
 8000216:	f04f 0300 	mov.w	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
  float REFERENCE_VOLTAGE = Read_VREF();
 800021c:	f000 f8de 	bl	80003dc <Read_VREF>
 8000220:	ed87 0a03 	vstr	s0, [r7, #12]
  float RESULT = 0;
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1) {
		  button_status = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800022a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022e:	4823      	ldr	r0, [pc, #140]	@ (80002bc <main+0xc0>)
 8000230:	f002 f85c 	bl	80022ec <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	72fb      	strb	r3, [r7, #11]

		  if(button_status == 0) { //button is pressed
 8000238:	7afb      	ldrb	r3, [r7, #11]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d11f      	bne.n	800027e <main+0x82>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //turn on the LED
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000244:	481e      	ldr	r0, [pc, #120]	@ (80002c0 <main+0xc4>)
 8000246:	f002 f869 	bl	800231c <HAL_GPIO_WritePin>
			  HAL_ADC_Start(&hadc1);	//ADC conversion
 800024a:	481e      	ldr	r0, [pc, #120]	@ (80002c4 <main+0xc8>)
 800024c:	f000 ff06 	bl	800105c <HAL_ADC_Start>
			  //status = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);

			  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) { //checks if the ADC conversion was successful
 8000250:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000254:	481b      	ldr	r0, [pc, #108]	@ (80002c4 <main+0xc8>)
 8000256:	f000 ff97 	bl	8001188 <HAL_ADC_PollForConversion>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <main+0x6a>
				  Error_Handler();
 8000260:	f000 fa1c 	bl	800069c <Error_Handler>
 8000264:	e007      	b.n	8000276 <main+0x7a>
			  }
			  else {
				  temperature = Read_TEMP(REFERENCE_VOLTAGE);
 8000266:	ed97 0a03 	vldr	s0, [r7, #12]
 800026a:	f000 f82d 	bl	80002c8 <Read_TEMP>
 800026e:	ed87 0a01 	vstr	s0, [r7, #4]
				  RESULT = temperature;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	603b      	str	r3, [r7, #0]
			  }

			  HAL_ADC_Stop(&hadc1);
 8000276:	4813      	ldr	r0, [pc, #76]	@ (80002c4 <main+0xc8>)
 8000278:	f000 ff53 	bl	8001122 <HAL_ADC_Stop>
 800027c:	e7d5      	b.n	800022a <main+0x2e>
		  }
		  else { //button is not pressed
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //turn off the LED
 800027e:	2200      	movs	r2, #0
 8000280:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000284:	480e      	ldr	r0, [pc, #56]	@ (80002c0 <main+0xc4>)
 8000286:	f002 f849 	bl	800231c <HAL_GPIO_WritePin>
			  HAL_ADC_Start(&hadc1);
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <main+0xc8>)
 800028c:	f000 fee6 	bl	800105c <HAL_ADC_Start>

			  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) { //checks if the ADC conversion was successful
 8000290:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000294:	480b      	ldr	r0, [pc, #44]	@ (80002c4 <main+0xc8>)
 8000296:	f000 ff77 	bl	8001188 <HAL_ADC_PollForConversion>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <main+0xaa>
				  Error_Handler();
 80002a0:	f000 f9fc 	bl	800069c <Error_Handler>
 80002a4:	e005      	b.n	80002b2 <main+0xb6>
			  }
			  else {
				  REFERENCE_VOLTAGE = Read_VREF();
 80002a6:	f000 f899 	bl	80003dc <Read_VREF>
 80002aa:	ed87 0a03 	vstr	s0, [r7, #12]
				  RESULT = REFERENCE_VOLTAGE;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	603b      	str	r3, [r7, #0]
			  }

			  HAL_ADC_Stop(&hadc1);
 80002b2:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <main+0xc8>)
 80002b4:	f000 ff35 	bl	8001122 <HAL_ADC_Stop>
		  button_status = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80002b8:	e7b7      	b.n	800022a <main+0x2e>
 80002ba:	bf00      	nop
 80002bc:	48000800 	.word	0x48000800
 80002c0:	48000400 	.word	0x48000400
 80002c4:	20000028 	.word	0x20000028

080002c8 <Read_TEMP>:
	  }
  }
  /* USER CODE END 3 */
}

float Read_TEMP(float vref_current) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08c      	sub	sp, #48	@ 0x30
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	ed87 0a01 	vstr	s0, [r7, #4]
	//Swtich the channel to temp
	ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80002e4:	4b38      	ldr	r3, [pc, #224]	@ (80003c8 <Read_TEMP+0x100>)
 80002e6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e8:	2306      	movs	r3, #6
 80002ea:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80002ec:	2307      	movs	r3, #7
 80002ee:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002f0:	237f      	movs	r3, #127	@ 0x7f
 80002f2:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002f4:	2304      	movs	r3, #4
 80002f6:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	4619      	mov	r1, r3
 8000302:	4832      	ldr	r0, [pc, #200]	@ (80003cc <Read_TEMP+0x104>)
 8000304:	f000 ffdc 	bl	80012c0 <HAL_ADC_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <Read_TEMP+0x4a>
	{
		Error_Handler();
 800030e:	f000 f9c5 	bl	800069c <Error_Handler>
	}

	HAL_Delay(100);
 8000312:	2064      	movs	r0, #100	@ 0x64
 8000314:	f000 fb10 	bl	8000938 <HAL_Delay>

	if (HAL_ADC_Start(&hadc1) != HAL_OK || HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000318:	482c      	ldr	r0, [pc, #176]	@ (80003cc <Read_TEMP+0x104>)
 800031a:	f000 fe9f 	bl	800105c <HAL_ADC_Start>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <Read_TEMP+0x6a>
 8000324:	2164      	movs	r1, #100	@ 0x64
 8000326:	4829      	ldr	r0, [pc, #164]	@ (80003cc <Read_TEMP+0x104>)
 8000328:	f000 ff2e 	bl	8001188 <HAL_ADC_PollForConversion>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <Read_TEMP+0x6e>
	{
		// ADC start error
		Error_Handler();
 8000332:	f000 f9b3 	bl	800069c <Error_Handler>
	}

	//start ADC conversion to read the temperature sensor
	HAL_ADC_Start(&hadc1);
 8000336:	4825      	ldr	r0, [pc, #148]	@ (80003cc <Read_TEMP+0x104>)
 8000338:	f000 fe90 	bl	800105c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800033c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000340:	4822      	ldr	r0, [pc, #136]	@ (80003cc <Read_TEMP+0x104>)
 8000342:	f000 ff21 	bl	8001188 <HAL_ADC_PollForConversion>

	//calculation
	float adcValue = HAL_ADC_GetValue(&hadc1);
 8000346:	4821      	ldr	r0, [pc, #132]	@ (80003cc <Read_TEMP+0x104>)
 8000348:	f000 ffad 	bl	80012a6 <HAL_ADC_GetValue>
 800034c:	ee07 0a90 	vmov	s15, r0
 8000350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000354:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float adjustment = (adcValue * (vref_current / 3)) - *TS_CAL1; //subtract by TS_CAL1 so the curve starts at 30
 8000358:	edd7 7a01 	vldr	s15, [r7, #4]
 800035c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8000360:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000364:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800036c:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <Read_TEMP+0x108>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	ee07 3a90 	vmov	s15, r3
 8000374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800037c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float m = ((float) (130 - 30)) / (*TS_CAL2 - *TS_CAL1);
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <Read_TEMP+0x10c>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <Read_TEMP+0x108>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	ee07 3a90 	vmov	s15, r3
 8000390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000394:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80003d8 <Read_TEMP+0x110>
 8000398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800039c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float tempValue = m * (adjustment) + 30; //calculate temperature from raw ADC value (+30 because the curve starts from 30)
 80003a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80003a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80003a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80003ac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80003b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003b4:	edc7 7a08 	vstr	s15, [r7, #32]
	return tempValue;
 80003b8:	6a3b      	ldr	r3, [r7, #32]
 80003ba:	ee07 3a90 	vmov	s15, r3
}
 80003be:	eeb0 0a67 	vmov.f32	s0, s15
 80003c2:	3730      	adds	r7, #48	@ 0x30
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	c7520000 	.word	0xc7520000
 80003cc:	20000028 	.word	0x20000028
 80003d0:	1fff75a8 	.word	0x1fff75a8
 80003d4:	1fff75ca 	.word	0x1fff75ca
 80003d8:	42c80000 	.word	0x42c80000

080003dc <Read_VREF>:


float Read_VREF(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
	//Switch the channel to reference voltage
	ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003f2:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <Read_VREF+0xa8>)
 80003f4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f6:	2306      	movs	r3, #6
 80003f8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80003fa:	2307      	movs	r3, #7
 80003fc:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003fe:	237f      	movs	r3, #127	@ 0x7f
 8000400:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000402:	2304      	movs	r3, #4
 8000404:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	463b      	mov	r3, r7
 800040c:	4619      	mov	r1, r3
 800040e:	481e      	ldr	r0, [pc, #120]	@ (8000488 <Read_VREF+0xac>)
 8000410:	f000 ff56 	bl	80012c0 <HAL_ADC_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <Read_VREF+0x42>
	{
	    Error_Handler();
 800041a:	f000 f93f 	bl	800069c <Error_Handler>
	}

	HAL_Delay(100);
 800041e:	2064      	movs	r0, #100	@ 0x64
 8000420:	f000 fa8a 	bl	8000938 <HAL_Delay>

	if (HAL_ADC_Start(&hadc1) != HAL_OK || HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000424:	4818      	ldr	r0, [pc, #96]	@ (8000488 <Read_VREF+0xac>)
 8000426:	f000 fe19 	bl	800105c <HAL_ADC_Start>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d106      	bne.n	800043e <Read_VREF+0x62>
 8000430:	2164      	movs	r1, #100	@ 0x64
 8000432:	4815      	ldr	r0, [pc, #84]	@ (8000488 <Read_VREF+0xac>)
 8000434:	f000 fea8 	bl	8001188 <HAL_ADC_PollForConversion>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <Read_VREF+0x66>
	{
	  // ADC start error
	  Error_Handler();
 800043e:	f000 f92d 	bl	800069c <Error_Handler>
	}


	float adcValue = HAL_ADC_GetValue(&hadc1);
 8000442:	4811      	ldr	r0, [pc, #68]	@ (8000488 <Read_VREF+0xac>)
 8000444:	f000 ff2f 	bl	80012a6 <HAL_ADC_GetValue>
 8000448:	ee07 0a90 	vmov	s15, r0
 800044c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000450:	edc7 7a07 	vstr	s15, [r7, #28]
	float vrefValue = ((float) 3 * (*VREFINT)) / adcValue; //reference voltage calibration
 8000454:	4b0d      	ldr	r3, [pc, #52]	@ (800048c <Read_VREF+0xb0>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	ee07 3a90 	vmov	s15, r3
 800045c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000460:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000464:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000468:	ed97 7a07 	vldr	s14, [r7, #28]
 800046c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000470:	edc7 7a06 	vstr	s15, [r7, #24]
	return vrefValue;
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	ee07 3a90 	vmov	s15, r3
}
 800047a:	eeb0 0a67 	vmov.f32	s0, s15
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	80000001 	.word	0x80000001
 8000488:	20000028 	.word	0x20000028
 800048c:	1fff75aa 	.word	0x1fff75aa

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	@ 0x58
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2244      	movs	r2, #68	@ 0x44
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fbd0 	bl	8003c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80004b2:	2000      	movs	r0, #0
 80004b4:	f001 ff6a 	bl	800238c <HAL_PWREx_ControlVoltageScaling>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80004be:	f000 f8ed 	bl	800069c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004c2:	2310      	movs	r3, #16
 80004c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c6:	2301      	movs	r3, #1
 80004c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004ce:	2360      	movs	r3, #96	@ 0x60
 80004d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004d6:	2301      	movs	r3, #1
 80004d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004da:	2301      	movs	r3, #1
 80004dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004de:	233c      	movs	r3, #60	@ 0x3c
 80004e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004e6:	2302      	movs	r3, #2
 80004e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 ffee 	bl	80024d4 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004fe:	f000 f8cd 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2303      	movs	r3, #3
 8000508:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2105      	movs	r1, #5
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fbf4 	bl	8002d08 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000526:	f000 f8b9 	bl	800069c <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3758      	adds	r7, #88	@ 0x58
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
 8000548:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800054a:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 800054c:	4a29      	ldr	r2, [pc, #164]	@ (80005f4 <MX_ADC1_Init+0xc0>)
 800054e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055c:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000568:	4b21      	ldr	r3, [pc, #132]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000570:	2200      	movs	r2, #0
 8000572:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000576:	2200      	movs	r2, #0
 8000578:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 800057c:	2201      	movs	r2, #1
 800057e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 800058a:	2200      	movs	r2, #0
 800058c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800058e:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 80005ac:	f000 fc10 	bl	8000dd0 <HAL_ADC_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005b6:	f000 f871 	bl	800069c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0xc4>)
 80005bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xbc>)
 80005d8:	f000 fe72 	bl	80012c0 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005e2:	f000 f85b 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	50040000 	.word	0x50040000
 80005f8:	c7520000 	.word	0xc7520000

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0x94>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0x94>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0x94>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_GPIO_Init+0x94>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <MX_GPIO_Init+0x94>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_GPIO_Init+0x94>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <MX_GPIO_Init+0x98>)
 800064a:	f001 fe67 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000654:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_GPIO_Init+0x9c>)
 8000666:	f001 fcaf 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800066a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_GPIO_Init+0x98>)
 8000684:	f001 fca0 	bl	8001fc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	48000400 	.word	0x48000400
 8000698:	48000800 	.word	0x48000800

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <Error_Handler+0x8>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006b2:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <HAL_MspInit+0x44>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ca:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <HAL_MspInit+0x44>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0a8      	sub	sp, #160	@ 0xa0
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2294      	movs	r2, #148	@ 0x94
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fa9f 	bl	8003c44 <memset>
  if(hadc->Instance==ADC1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <HAL_ADC_MspInit+0x80>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d12b      	bne.n	8000768 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000710:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000714:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000716:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800071a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800071e:	2301      	movs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000726:	2318      	movs	r3, #24
 8000728:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000736:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800073a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fd67 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 800074c:	f7ff ffa6 	bl	800069c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_ADC_MspInit+0x84>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <HAL_ADC_MspInit+0x84>)
 8000756:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800075a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_ADC_MspInit+0x84>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000768:	bf00      	nop
 800076a:	37a0      	adds	r7, #160	@ 0xa0
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	50040000 	.word	0x50040000
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <MemManage_Handler+0x4>

08000790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f893 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000834 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000800:	f7ff ffea 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <LoopForever+0x6>)
  ldr r1, =_edata
 8000806:	490d      	ldr	r1, [pc, #52]	@ (800083c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000808:	4a0d      	ldr	r2, [pc, #52]	@ (8000840 <LoopForever+0xe>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800081c:	4c0a      	ldr	r4, [pc, #40]	@ (8000848 <LoopForever+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082a:	f003 fa13 	bl	8003c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082e:	f7ff fce5 	bl	80001fc <main>

08000832 <LoopForever>:

LoopForever:
    b LoopForever
 8000832:	e7fe      	b.n	8000832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000834:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000840:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 8000844:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000848:	20000094 	.word	0x20000094

0800084c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_IRQHandler>

0800084e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f001 fb81 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f80e 	bl	8000880 <HAL_InitTick>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	71fb      	strb	r3, [r7, #7]
 800086e:	e001      	b.n	8000874 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000870:	f7ff ff1a 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000874:	79fb      	ldrb	r3, [r7, #7]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <HAL_InitTick+0x6c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d023      	beq.n	80008dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <HAL_InitTick+0x70>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <HAL_InitTick+0x6c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fb7f 	bl	8001fae <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10f      	bne.n	80008d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d809      	bhi.n	80008d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c4:	f001 fb57 	bl	8001f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c8:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_InitTick+0x74>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e007      	b.n	80008e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e004      	b.n	80008e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	e001      	b.n	80008e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_IncTick+0x20>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_IncTick+0x24>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <HAL_IncTick+0x24>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008
 800091c:	20000090 	.word	0x20000090

08000920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <HAL_GetTick+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000090 	.word	0x20000090

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff ffee 	bl	8000920 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_Delay+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095e:	bf00      	nop
 8000960:	f7ff ffde 	bl	8000920 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008

08000980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	609a      	str	r2, [r3, #8]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3360      	adds	r3, #96	@ 0x60
 80009fa:	461a      	mov	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <LL_ADC_SetOffset+0x44>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	4313      	orrs	r3, r2
 8000a18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a20:	bf00      	nop
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	03fff000 	.word	0x03fff000

08000a30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3360      	adds	r3, #96	@ 0x60
 8000a3e:	461a      	mov	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3360      	adds	r3, #96	@ 0x60
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a86:	bf00      	nop
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	615a      	str	r2, [r3, #20]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d101      	bne.n	8000ad0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b087      	sub	sp, #28
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3330      	adds	r3, #48	@ 0x30
 8000aee:	461a      	mov	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	f003 030c 	and.w	r3, r3, #12
 8000afa:	4413      	add	r3, r2
 8000afc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	211f      	movs	r1, #31
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	401a      	ands	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	0e9b      	lsrs	r3, r3, #26
 8000b16:	f003 011f 	and.w	r1, r3, #31
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	f003 031f 	and.w	r3, r3, #31
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	431a      	orrs	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b2a:	bf00      	nop
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b087      	sub	sp, #28
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3314      	adds	r3, #20
 8000b46:	461a      	mov	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	0e5b      	lsrs	r3, r3, #25
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	4413      	add	r3, r2
 8000b54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	0d1b      	lsrs	r3, r3, #20
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	2107      	movs	r1, #7
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	0d1b      	lsrs	r3, r3, #20
 8000b70:	f003 031f 	and.w	r3, r3, #31
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b80:	bf00      	nop
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0318 	and.w	r3, r3, #24
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000bb0:	40d9      	lsrs	r1, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	0007ffff 	.word	0x0007ffff

08000bd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000be4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6093      	str	r3, [r2, #8]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c0c:	d101      	bne.n	8000c12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c5c:	d101      	bne.n	8000c62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c84:	f043 0201 	orr.w	r2, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cac:	f043 0202 	orr.w	r2, r3, #2
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <LL_ADC_IsEnabled+0x18>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <LL_ADC_IsEnabled+0x1a>
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d101      	bne.n	8000cfe <LL_ADC_IsDisableOngoing+0x18>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <LL_ADC_IsDisableOngoing+0x1a>
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d20:	f043 0204 	orr.w	r2, r3, #4
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d48:	f043 0210 	orr.w	r2, r3, #16
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d101      	bne.n	8000d74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000d92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d96:	f043 0220 	orr.w	r2, r3, #32
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d101      	bne.n	8000dc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e129      	b.n	800103e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d109      	bne.n	8000e0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fc79 	bl	80006f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fef1 	bl	8000bf8 <LL_ADC_IsDeepPowerDownEnabled>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d004      	beq.n	8000e26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fed7 	bl	8000bd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff0c 	bl	8000c48 <LL_ADC_IsInternalRegulatorEnabled>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d115      	bne.n	8000e62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fef0 	bl	8000c20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e40:	4b81      	ldr	r3, [pc, #516]	@ (8001048 <HAL_ADC_Init+0x278>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	099b      	lsrs	r3, r3, #6
 8000e46:	4a81      	ldr	r2, [pc, #516]	@ (800104c <HAL_ADC_Init+0x27c>)
 8000e48:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4c:	099b      	lsrs	r3, r3, #6
 8000e4e:	3301      	adds	r3, #1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e54:	e002      	b.n	8000e5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f9      	bne.n	8000e56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feee 	bl	8000c48 <LL_ADC_IsInternalRegulatorEnabled>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10d      	bne.n	8000e8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	f043 0210 	orr.w	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff62 	bl	8000d5c <LL_ADC_REG_IsConversionOngoing>
 8000e98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 80c2 	bne.w	800102c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 80be 	bne.w	800102c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000eb8:	f043 0202 	orr.w	r2, r3, #2
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fefb 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10b      	bne.n	8000ee8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ed0:	485f      	ldr	r0, [pc, #380]	@ (8001050 <HAL_ADC_Init+0x280>)
 8000ed2:	f7ff fef5 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	485c      	ldr	r0, [pc, #368]	@ (8001054 <HAL_ADC_Init+0x284>)
 8000ee4:	f7ff fd4c 	bl	8000980 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7e5b      	ldrb	r3, [r3, #25]
 8000eec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ef2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000ef8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000efe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d106      	bne.n	8000f24 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	045b      	lsls	r3, r3, #17
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d009      	beq.n	8000f40 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f30:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	4b44      	ldr	r3, [pc, #272]	@ (8001058 <HAL_ADC_Init+0x288>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff26 	bl	8000daa <LL_ADC_INJ_IsConversionOngoing>
 8000f5e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d140      	bne.n	8000fe8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d13d      	bne.n	8000fe8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e1b      	ldrb	r3, [r3, #24]
 8000f74:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f76:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f8e:	f023 0306 	bic.w	r3, r3, #6
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d118      	bne.n	8000fd8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fbc:	4311      	orrs	r1, r2
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000fc2:	4311      	orrs	r1, r2
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0201 	orr.w	r2, r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	e007      	b.n	8000fe8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d10c      	bne.n	800100a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f023 010f 	bic.w	r1, r3, #15
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	631a      	str	r2, [r3, #48]	@ 0x30
 8001008:	e007      	b.n	800101a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020f 	bic.w	r2, r2, #15
 8001018:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	659a      	str	r2, [r3, #88]	@ 0x58
 800102a:	e007      	b.n	800103c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001030:	f043 0210 	orr.w	r2, r3, #16
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800103c:	7ffb      	ldrb	r3, [r7, #31]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000000 	.word	0x20000000
 800104c:	053e2d63 	.word	0x053e2d63
 8001050:	50040000 	.word	0x50040000
 8001054:	50040300 	.word	0x50040300
 8001058:	fff0c007 	.word	0xfff0c007

0800105c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe77 	bl	8000d5c <LL_ADC_REG_IsConversionOngoing>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d14f      	bne.n	8001114 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Start+0x26>
 800107e:	2302      	movs	r3, #2
 8001080:	e04b      	b.n	800111a <HAL_ADC_Start+0xbe>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fdd0 	bl	8001c30 <ADC_Enable>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d137      	bne.n	800110a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ba:	d106      	bne.n	80010ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c0:	f023 0206 	bic.w	r2, r3, #6
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010c8:	e002      	b.n	80010d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	221c      	movs	r2, #28
 80010d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe02 	bl	8000d0c <LL_ADC_REG_StartConversion>
 8001108:	e006      	b.n	8001118 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001112:	e001      	b.n	8001118 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001114:	2302      	movs	r3, #2
 8001116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_ADC_Stop+0x16>
 8001134:	2302      	movs	r3, #2
 8001136:	e023      	b.n	8001180 <HAL_ADC_Stop+0x5e>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001140:	2103      	movs	r1, #3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fcb8 	bl	8001ab8 <ADC_ConversionStop>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d111      	bne.n	8001176 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 fdf2 	bl	8001d3c <ADC_Disable>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	2b08      	cmp	r3, #8
 8001198:	d102      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800119a:	2308      	movs	r3, #8
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e010      	b.n	80011c2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b2:	f043 0220 	orr.w	r2, r3, #32
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06f      	b.n	800129e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80011be:	2304      	movs	r3, #4
 80011c0:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80011c2:	f7ff fbad 	bl	8000920 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011c8:	e021      	b.n	800120e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011d0:	d01d      	beq.n	800120e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80011d2:	f7ff fba5 	bl	8000920 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d302      	bcc.n	80011e8 <HAL_ADC_PollForConversion+0x60>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d112      	bne.n	800120e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10b      	bne.n	800120e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f043 0204 	orr.w	r2, r3, #4
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e047      	b.n	800129e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0d6      	beq.n	80011ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001220:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fc43 	bl	8000ab8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01c      	beq.n	8001272 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d118      	bne.n	8001272 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b08      	cmp	r3, #8
 800124c:	d111      	bne.n	8001272 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d104      	bne.n	800128a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2208      	movs	r2, #8
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e008      	b.n	800129c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	220c      	movs	r2, #12
 800129a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0b6      	sub	sp, #216	@ 0xd8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x22>
 80012de:	2302      	movs	r3, #2
 80012e0:	e3d5      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x7ce>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd34 	bl	8000d5c <LL_ADC_REG_IsConversionOngoing>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 83ba 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b05      	cmp	r3, #5
 800130a:	d824      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	3b02      	subs	r3, #2
 8001312:	2b03      	cmp	r3, #3
 8001314:	d81b      	bhi.n	800134e <HAL_ADC_ConfigChannel+0x8e>
 8001316:	a201      	add	r2, pc, #4	@ (adr r2, 800131c <HAL_ADC_ConfigChannel+0x5c>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001335 	.word	0x08001335
 8001324:	0800133d 	.word	0x0800133d
 8001328:	08001345 	.word	0x08001345
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800132c:	230c      	movs	r3, #12
 800132e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001332:	e010      	b.n	8001356 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001334:	2312      	movs	r3, #18
 8001336:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800133a:	e00c      	b.n	8001356 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800133c:	2318      	movs	r3, #24
 800133e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001342:	e008      	b.n	8001356 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001344:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800134c:	e003      	b.n	8001356 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800134e:	2306      	movs	r3, #6
 8001350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001354:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001364:	f7ff fbbb 	bl	8000ade <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fcf5 	bl	8000d5c <LL_ADC_REG_IsConversionOngoing>
 8001372:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fd15 	bl	8000daa <LL_ADC_INJ_IsConversionOngoing>
 8001380:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 81bf 	bne.w	800170c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800138e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 81ba 	bne.w	800170c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013a0:	d10f      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fbc2 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fb69 	bl	8000a92 <LL_ADC_SetSamplingTimeCommonConfig>
 80013c0:	e00e      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	461a      	mov	r2, r3
 80013d0:	f7ff fbb1 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fb59 	bl	8000a92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d00a      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001412:	f7ff fae9 	bl	80009e8 <LL_ADC_SetOffset>
 8001416:	e179      	b.n	800170c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fb06 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10a      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x184>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fafb 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	0e9b      	lsrs	r3, r3, #26
 800143e:	f003 021f 	and.w	r2, r3, #31
 8001442:	e01e      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1c2>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff faf0 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800146a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001472:	2320      	movs	r3, #32
 8001474:	e004      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001476:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_ConfigChannel+0x1da>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0e9b      	lsrs	r3, r3, #26
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	e018      	b.n	80014cc <HAL_ADC_ConfigChannel+0x20c>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80014ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80014b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80014be:	2320      	movs	r3, #32
 80014c0:	e004      	b.n	80014cc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80014c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d106      	bne.n	80014de <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fabf 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff faa3 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10a      	bne.n	800150a <HAL_ADC_ConfigChannel+0x24a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fa98 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	0e9b      	lsrs	r3, r3, #26
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	e01e      	b.n	8001548 <HAL_ADC_ConfigChannel+0x288>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fa8d 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001528:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800152c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001538:	2320      	movs	r3, #32
 800153a:	e004      	b.n	8001546 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800153c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2a0>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	e018      	b.n	8001592 <HAL_ADC_ConfigChannel+0x2d2>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001574:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800157c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001584:	2320      	movs	r3, #32
 8001586:	e004      	b.n	8001592 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001592:	429a      	cmp	r2, r3
 8001594:	d106      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	2101      	movs	r1, #1
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fa5c 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2102      	movs	r1, #2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fa40 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10a      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x310>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2102      	movs	r1, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa35 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	f003 021f 	and.w	r2, r3, #31
 80015ce:	e01e      	b.n	800160e <HAL_ADC_ConfigChannel+0x34e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2102      	movs	r1, #2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fa2a 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80015ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80015f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80015fe:	2320      	movs	r3, #32
 8001600:	e004      	b.n	800160c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x366>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0e9b      	lsrs	r3, r3, #26
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	e014      	b.n	8001650 <HAL_ADC_ConfigChannel+0x390>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001636:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800163a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001642:	2320      	movs	r3, #32
 8001644:	e004      	b.n	8001650 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001646:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001650:	429a      	cmp	r2, r3
 8001652:	d106      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f9fd 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2103      	movs	r1, #3
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff f9e1 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10a      	bne.n	800168e <HAL_ADC_ConfigChannel+0x3ce>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2103      	movs	r1, #3
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f9d6 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	0e9b      	lsrs	r3, r3, #26
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	e017      	b.n	80016be <HAL_ADC_ConfigChannel+0x3fe>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2103      	movs	r1, #3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f9cb 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80016a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016a8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80016aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80016b0:	2320      	movs	r3, #32
 80016b2:	e003      	b.n	80016bc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80016b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x416>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0e9b      	lsrs	r3, r3, #26
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	e011      	b.n	80016fa <HAL_ADC_ConfigChannel+0x43a>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80016e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80016e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80016ee:	2320      	movs	r3, #32
 80016f0:	e003      	b.n	80016fa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80016f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d106      	bne.n	800170c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	2103      	movs	r1, #3
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f9a8 	bl	8000a5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fad5 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 813f 	bne.w	800199c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	461a      	mov	r2, r3
 800172c:	f7ff fa2e 	bl	8000b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a8e      	ldr	r2, [pc, #568]	@ (8001970 <HAL_ADC_ConfigChannel+0x6b0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	f040 8130 	bne.w	800199c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10b      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x4a4>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0e9b      	lsrs	r3, r3, #26
 8001752:	3301      	adds	r3, #1
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	2b09      	cmp	r3, #9
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e019      	b.n	8001798 <HAL_ADC_ConfigChannel+0x4d8>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001774:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800177c:	2320      	movs	r3, #32
 800177e:	e003      	b.n	8001788 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3301      	adds	r3, #1
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2b09      	cmp	r3, #9
 8001790:	bf94      	ite	ls
 8001792:	2301      	movls	r3, #1
 8001794:	2300      	movhi	r3, #0
 8001796:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001798:	2b00      	cmp	r3, #0
 800179a:	d079      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x4f8>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	3301      	adds	r3, #1
 80017b0:	069b      	lsls	r3, r3, #26
 80017b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017b6:	e015      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x524>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80017c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80017ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80017d0:	2320      	movs	r3, #32
 80017d2:	e003      	b.n	80017dc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80017d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3301      	adds	r3, #1
 80017de:	069b      	lsls	r3, r3, #26
 80017e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x544>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	3301      	adds	r3, #1
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	e017      	b.n	8001834 <HAL_ADC_ConfigChannel+0x574>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001814:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800181c:	2320      	movs	r3, #32
 800181e:	e003      	b.n	8001828 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	ea42 0103 	orr.w	r1, r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <HAL_ADC_ConfigChannel+0x59a>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0e9b      	lsrs	r3, r3, #26
 800184a:	3301      	adds	r3, #1
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	051b      	lsls	r3, r3, #20
 8001858:	e018      	b.n	800188c <HAL_ADC_ConfigChannel+0x5cc>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800186c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001872:	2320      	movs	r3, #32
 8001874:	e003      	b.n	800187e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	3301      	adds	r3, #1
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800188c:	430b      	orrs	r3, r1
 800188e:	e080      	b.n	8001992 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x5ec>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0e9b      	lsrs	r3, r3, #26
 80018a2:	3301      	adds	r3, #1
 80018a4:	069b      	lsls	r3, r3, #26
 80018a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018aa:	e015      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x618>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80018be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80018c4:	2320      	movs	r3, #32
 80018c6:	e003      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	069b      	lsls	r3, r3, #26
 80018d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x638>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0e9b      	lsrs	r3, r3, #26
 80018ea:	3301      	adds	r3, #1
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	e017      	b.n	8001928 <HAL_ADC_ConfigChannel+0x668>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	61bb      	str	r3, [r7, #24]
  return result;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e003      	b.n	800191c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	ea42 0103 	orr.w	r1, r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x694>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	3301      	adds	r3, #1
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	3b1e      	subs	r3, #30
 800194c:	051b      	lsls	r3, r3, #20
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001952:	e01d      	b.n	8001990 <HAL_ADC_ConfigChannel+0x6d0>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	60fb      	str	r3, [r7, #12]
  return result;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e005      	b.n	800197c <HAL_ADC_ConfigChannel+0x6bc>
 8001970:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f003 021f 	and.w	r2, r3, #31
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	3b1e      	subs	r3, #30
 800198a:	051b      	lsls	r3, r3, #20
 800198c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001990:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f8cd 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <HAL_ADC_ConfigChannel+0x7d8>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d06c      	beq.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a8:	483c      	ldr	r0, [pc, #240]	@ (8001a9c <HAL_ADC_ConfigChannel+0x7dc>)
 80019aa:	f7ff f80f 	bl	80009cc <LL_ADC_GetCommonPathInternalCh>
 80019ae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x7e0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d127      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d121      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a35      	ldr	r2, [pc, #212]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x7e4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d157      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019da:	4619      	mov	r1, r3
 80019dc:	482f      	ldr	r0, [pc, #188]	@ (8001a9c <HAL_ADC_ConfigChannel+0x7dc>)
 80019de:	f7fe ffe2 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x7e8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	4a30      	ldr	r2, [pc, #192]	@ (8001aac <HAL_ADC_ConfigChannel+0x7ec>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a0a:	e03a      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a27      	ldr	r2, [pc, #156]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d113      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10d      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d12a      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a34:	4619      	mov	r1, r3
 8001a36:	4819      	ldr	r0, [pc, #100]	@ (8001a9c <HAL_ADC_ConfigChannel+0x7dc>)
 8001a38:	f7fe ffb5 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a3c:	e021      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d11c      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d116      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d111      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a66:	4619      	mov	r1, r3
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <HAL_ADC_ConfigChannel+0x7dc>)
 8001a6a:	f7fe ff9c 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
 8001a6e:	e008      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001a8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	37d8      	adds	r7, #216	@ 0xd8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	80080000 	.word	0x80080000
 8001a9c:	50040300 	.word	0x50040300
 8001aa0:	c7520000 	.word	0xc7520000
 8001aa4:	50040000 	.word	0x50040000
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	053e2d63 	.word	0x053e2d63
 8001ab0:	cb840000 	.word	0xcb840000
 8001ab4:	80000001 	.word	0x80000001

08001ab8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f944 	bl	8000d5c <LL_ADC_REG_IsConversionOngoing>
 8001ad4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f965 	bl	8000daa <LL_ADC_INJ_IsConversionOngoing>
 8001ae0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8098 	beq.w	8001c20 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d02a      	beq.n	8001b54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7e5b      	ldrb	r3, [r3, #25]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d126      	bne.n	8001b54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e1b      	ldrb	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d122      	bne.n	8001b54 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001b12:	e014      	b.n	8001b3e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <ADC_ConversionStop+0x174>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d90d      	bls.n	8001b38 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	f043 0210 	orr.w	r2, r3, #16
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e074      	b.n	8001c22 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b48:	2b40      	cmp	r3, #64	@ 0x40
 8001b4a:	d1e3      	bne.n	8001b14 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2240      	movs	r2, #64	@ 0x40
 8001b52:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d014      	beq.n	8001b84 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8fc 	bl	8000d5c <LL_ADC_REG_IsConversionOngoing>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00c      	beq.n	8001b84 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f8b9 	bl	8000ce6 <LL_ADC_IsDisableOngoing>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d104      	bne.n	8001b84 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8d8 	bl	8000d34 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d014      	beq.n	8001bb4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f90b 	bl	8000daa <LL_ADC_INJ_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00c      	beq.n	8001bb4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8a1 	bl	8000ce6 <LL_ADC_IsDisableOngoing>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d104      	bne.n	8001bb4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f8e7 	bl	8000d82 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d005      	beq.n	8001bc6 <ADC_ConversionStop+0x10e>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d105      	bne.n	8001bcc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	617b      	str	r3, [r7, #20]
        break;
 8001bc4:	e005      	b.n	8001bd2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	617b      	str	r3, [r7, #20]
        break;
 8001bca:	e002      	b.n	8001bd2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	617b      	str	r3, [r7, #20]
        break;
 8001bd0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001bd2:	f7fe fea5 	bl	8000920 <HAL_GetTick>
 8001bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bd8:	e01b      	b.n	8001c12 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001bda:	f7fe fea1 	bl	8000920 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d914      	bls.n	8001c12 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00d      	beq.n	8001c12 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	f043 0210 	orr.w	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e007      	b.n	8001c22 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1dc      	bne.n	8001bda <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	a33fffff 	.word	0xa33fffff

08001c30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f83d 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d169      	bne.n	8001d20 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <ADC_Enable+0xfc>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e055      	b.n	8001d22 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fff8 	bl	8000c70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c80:	482b      	ldr	r0, [pc, #172]	@ (8001d30 <ADC_Enable+0x100>)
 8001c82:	f7fe fea3 	bl	80009cc <LL_ADC_GetCommonPathInternalCh>
 8001c86:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <ADC_Enable+0x104>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	4a28      	ldr	r2, [pc, #160]	@ (8001d38 <ADC_Enable+0x108>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001caa:	e002      	b.n	8001cb2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f9      	bne.n	8001cac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe fe32 	bl	8000920 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cbe:	e028      	b.n	8001d12 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fffb 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe ffcb 	bl	8000c70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cda:	f7fe fe21 	bl	8000920 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d914      	bls.n	8001d12 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d00d      	beq.n	8001d12 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e007      	b.n	8001d22 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d1cf      	bne.n	8001cc0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	8000003f 	.word	0x8000003f
 8001d30:	50040300 	.word	0x50040300
 8001d34:	20000000 	.word	0x20000000
 8001d38:	053e2d63 	.word	0x053e2d63

08001d3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe ffcc 	bl	8000ce6 <LL_ADC_IsDisableOngoing>
 8001d4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffb3 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d047      	beq.n	8001df0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d144      	bne.n	8001df0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030d 	and.w	r3, r3, #13
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10c      	bne.n	8001d8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ff8d 	bl	8000c98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2203      	movs	r2, #3
 8001d84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d86:	f7fe fdcb 	bl	8000920 <HAL_GetTick>
 8001d8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d8c:	e029      	b.n	8001de2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e023      	b.n	8001df2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001daa:	f7fe fdb9 	bl	8000920 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d914      	bls.n	8001de2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f043 0210 	orr.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1dc      	bne.n	8001daa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff47 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff5c 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffb0 	bl	8001f1c <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e166      	b.n	80022a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8158 	beq.w	80022a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x40>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80b2 	beq.w	80022a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b61      	ldr	r3, [pc, #388]	@ (80022c4 <HAL_GPIO_Init+0x2fc>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002140:	4a60      	ldr	r2, [pc, #384]	@ (80022c4 <HAL_GPIO_Init+0x2fc>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6613      	str	r3, [r2, #96]	@ 0x60
 8002148:	4b5e      	ldr	r3, [pc, #376]	@ (80022c4 <HAL_GPIO_Init+0x2fc>)
 800214a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002154:	4a5c      	ldr	r2, [pc, #368]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800217e:	d02b      	beq.n	80021d8 <HAL_GPIO_Init+0x210>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a52      	ldr	r2, [pc, #328]	@ (80022cc <HAL_GPIO_Init+0x304>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d025      	beq.n	80021d4 <HAL_GPIO_Init+0x20c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a51      	ldr	r2, [pc, #324]	@ (80022d0 <HAL_GPIO_Init+0x308>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01f      	beq.n	80021d0 <HAL_GPIO_Init+0x208>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <HAL_GPIO_Init+0x30c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d019      	beq.n	80021cc <HAL_GPIO_Init+0x204>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a4f      	ldr	r2, [pc, #316]	@ (80022d8 <HAL_GPIO_Init+0x310>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x200>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a4e      	ldr	r2, [pc, #312]	@ (80022dc <HAL_GPIO_Init+0x314>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1fc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a4d      	ldr	r2, [pc, #308]	@ (80022e0 <HAL_GPIO_Init+0x318>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1f8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a4c      	ldr	r2, [pc, #304]	@ (80022e4 <HAL_GPIO_Init+0x31c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1f4>
 80021b8:	2307      	movs	r3, #7
 80021ba:	e00e      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021bc:	2308      	movs	r3, #8
 80021be:	e00c      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021c0:	2306      	movs	r3, #6
 80021c2:	e00a      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021c4:	2305      	movs	r3, #5
 80021c6:	e008      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e006      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021cc:	2303      	movs	r3, #3
 80021ce:	e004      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_GPIO_Init+0x212>
 80021d8:	2300      	movs	r3, #0
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ea:	4937      	ldr	r1, [pc, #220]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800221c:	4a32      	ldr	r2, [pc, #200]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002222:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002246:	4a28      	ldr	r2, [pc, #160]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800224c:	4b26      	ldr	r3, [pc, #152]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002270:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002276:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800229a:	4a13      	ldr	r2, [pc, #76]	@ (80022e8 <HAL_GPIO_Init+0x320>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3301      	adds	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f47f ae91 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000
 80022cc:	48000400 	.word	0x48000400
 80022d0:	48000800 	.word	0x48000800
 80022d4:	48000c00 	.word	0x48000c00
 80022d8:	48001000 	.word	0x48001000
 80022dc:	48001400 	.word	0x48001400
 80022e0:	48001800 	.word	0x48001800
 80022e4:	48001c00 	.word	0x48001c00
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e001      	b.n	800230e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002338:	e002      	b.n	8002340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235c:	d102      	bne.n	8002364 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800235e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002362:	e00b      	b.n	800237c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002372:	d102      	bne.n	800237a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002378:	e000      	b.n	800237c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800237a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40007000 	.word	0x40007000

0800238c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d141      	bne.n	800241e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800239a:	4b4b      	ldr	r3, [pc, #300]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a6:	d131      	bne.n	800240c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023a8:	4b47      	ldr	r3, [pc, #284]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ae:	4a46      	ldr	r2, [pc, #280]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b8:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023c0:	4a41      	ldr	r2, [pc, #260]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023c8:	4b40      	ldr	r3, [pc, #256]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2232      	movs	r2, #50	@ 0x32
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a3f      	ldr	r2, [pc, #252]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023de:	e002      	b.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e6:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f2:	d102      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f2      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023fa:	4b33      	ldr	r3, [pc, #204]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002406:	d158      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e057      	b.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800240c:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002412:	4a2d      	ldr	r2, [pc, #180]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800241c:	e04d      	b.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002424:	d141      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002426:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800242e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002432:	d131      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002434:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243a:	4a23      	ldr	r2, [pc, #140]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800244c:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2232      	movs	r2, #50	@ 0x32
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246a:	e002      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3b01      	subs	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247e:	d102      	bne.n	8002486 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f2      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002492:	d112      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e011      	b.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024a8:	e007      	b.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024b2:	4a05      	ldr	r2, [pc, #20]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40007000 	.word	0x40007000
 80024cc:	20000000 	.word	0x20000000
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f000 bc08 	b.w	8002cf8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e8:	4b96      	ldr	r3, [pc, #600]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f2:	4b94      	ldr	r3, [pc, #592]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80e4 	beq.w	80026d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_RCC_OscConfig+0x4c>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	f040 808b 	bne.w	800262e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 8087 	bne.w	800262e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002520:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x64>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e3df      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	4b81      	ldr	r3, [pc, #516]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_RCC_OscConfig+0x7e>
 8002548:	4b7e      	ldr	r3, [pc, #504]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002550:	e005      	b.n	800255e <HAL_RCC_OscConfig+0x8a>
 8002552:	4b7c      	ldr	r3, [pc, #496]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800255e:	4293      	cmp	r3, r2
 8002560:	d223      	bcs.n	80025aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fd94 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e3c0      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002576:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a72      	ldr	r2, [pc, #456]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b70      	ldr	r3, [pc, #448]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	496d      	ldr	r1, [pc, #436]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002594:	4b6b      	ldr	r3, [pc, #428]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	4968      	ldr	r1, [pc, #416]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	e025      	b.n	80025f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025aa:	4b66      	ldr	r3, [pc, #408]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a65      	ldr	r2, [pc, #404]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4960      	ldr	r1, [pc, #384]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	495b      	ldr	r1, [pc, #364]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fd54 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e380      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f6:	f000 fcc1 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b51      	ldr	r3, [pc, #324]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	4950      	ldr	r1, [pc, #320]	@ (8002748 <HAL_RCC_OscConfig+0x274>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a4e      	ldr	r2, [pc, #312]	@ (800274c <HAL_RCC_OscConfig+0x278>)
 8002614:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002616:	4b4e      	ldr	r3, [pc, #312]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe f930 	bl	8000880 <HAL_InitTick>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d052      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	e364      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002636:	4b43      	ldr	r3, [pc, #268]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a42      	ldr	r2, [pc, #264]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002642:	f7fe f96d 	bl	8000920 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264a:	f7fe f969 	bl	8000920 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e34d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265c:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002668:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a35      	ldr	r2, [pc, #212]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b33      	ldr	r3, [pc, #204]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4930      	ldr	r1, [pc, #192]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002686:	4b2f      	ldr	r3, [pc, #188]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	492b      	ldr	r1, [pc, #172]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e01a      	b.n	80026d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269c:	4b29      	ldr	r3, [pc, #164]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a28      	ldr	r2, [pc, #160]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a8:	f7fe f93a 	bl	8000920 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b0:	f7fe f936 	bl	8000920 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e31a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x1dc>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d073      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x21c>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d10e      	bne.n	8002708 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d063      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d15f      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e2f7      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x24c>
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e025      	b.n	800276c <HAL_RCC_OscConfig+0x298>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002728:	d114      	bne.n	8002754 <HAL_RCC_OscConfig+0x280>
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a02      	ldr	r2, [pc, #8]	@ (8002744 <HAL_RCC_OscConfig+0x270>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x298>
 8002744:	40021000 	.word	0x40021000
 8002748:	08003cb4 	.word	0x08003cb4
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004
 8002754:	4ba0      	ldr	r3, [pc, #640]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a9f      	ldr	r2, [pc, #636]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b9d      	ldr	r3, [pc, #628]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a9c      	ldr	r2, [pc, #624]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe f8d4 	bl	8000920 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe f8d0 	bl	8000920 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e2b4      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	4b92      	ldr	r3, [pc, #584]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x2a8>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe f8c0 	bl	8000920 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe f8bc 	bl	8000920 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e2a0      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b6:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d0>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d060      	beq.n	8002894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x310>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d116      	bne.n	8002812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e4:	4b7c      	ldr	r3, [pc, #496]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x328>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e27d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	4973      	ldr	r1, [pc, #460]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	e040      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d023      	beq.n	8002862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281a:	4b6f      	ldr	r3, [pc, #444]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe f87b 	bl	8000920 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe f877 	bl	8000920 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e25b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b62      	ldr	r3, [pc, #392]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	495f      	ldr	r1, [pc, #380]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b5d      	ldr	r3, [pc, #372]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5c      	ldr	r2, [pc, #368]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe f857 	bl	8000920 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7fe f853 	bl	8000920 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e237      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03c      	beq.n	800291a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a8:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	4a4a      	ldr	r2, [pc, #296]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe f832 	bl	8000920 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7fe f82e 	bl	8000920 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e212      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d2:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3ec>
 80028e0:	e01b      	b.n	800291a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e8:	4a3b      	ldr	r2, [pc, #236]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe f815 	bl	8000920 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe f811 	bl	8000920 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1f5      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ef      	bne.n	80028fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80a6 	beq.w	8002a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10d      	bne.n	8002954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002938:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6593      	str	r3, [r2, #88]	@ 0x58
 8002944:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002950:	2301      	movs	r3, #1
 8002952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002954:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d118      	bne.n	8002992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1d      	ldr	r2, [pc, #116]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296c:	f7fd ffd8 	bl	8000920 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fd ffd4 	bl	8000920 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1b8      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCC_OscConfig+0x508>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d108      	bne.n	80029ac <HAL_RCC_OscConfig+0x4d8>
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029aa:	e029      	b.n	8002a00 <HAL_RCC_OscConfig+0x52c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d115      	bne.n	80029e0 <HAL_RCC_OscConfig+0x50c>
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x52c>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
 80029e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	4a9c      	ldr	r2, [pc, #624]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f0:	4b99      	ldr	r3, [pc, #612]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a98      	ldr	r2, [pc, #608]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d016      	beq.n	8002a36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fd ff8a 	bl	8000920 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fd ff86 	bl	8000920 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e168      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a26:	4b8c      	ldr	r3, [pc, #560]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ed      	beq.n	8002a10 <HAL_RCC_OscConfig+0x53c>
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fd ff73 	bl	8000920 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fd ff6f 	bl	8000920 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e151      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a54:	4b80      	ldr	r3, [pc, #512]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ed      	bne.n	8002a3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b7b      	ldr	r3, [pc, #492]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03c      	beq.n	8002afa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a88:	4b73      	ldr	r3, [pc, #460]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a8e:	4a72      	ldr	r2, [pc, #456]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fd ff42 	bl	8000920 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa0:	f7fd ff3e 	bl	8000920 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e122      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab2:	4b69      	ldr	r3, [pc, #420]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x5cc>
 8002ac0:	e01b      	b.n	8002afa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac2:	4b65      	ldr	r3, [pc, #404]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ac8:	4a63      	ldr	r2, [pc, #396]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7fd ff25 	bl	8000920 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ada:	f7fd ff21 	bl	8000920 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e105      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aec:	4b5a      	ldr	r3, [pc, #360]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80f9 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	f040 80cf 	bne.w	8002cac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b0e:	4b52      	ldr	r3, [pc, #328]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0203 	and.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d12c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d123      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d11b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d113      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d109      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d071      	beq.n	8002c60 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d068      	beq.n	8002c54 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b82:	4b35      	ldr	r3, [pc, #212]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b8e:	4b32      	ldr	r3, [pc, #200]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0ac      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002baa:	f7fd feb9 	bl	8000920 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fd feb5 	bl	8000920 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e099      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCC_OscConfig+0x788>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002be0:	3a01      	subs	r2, #1
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bea:	0212      	lsls	r2, r2, #8
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bf2:	0852      	lsrs	r2, r2, #1
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0552      	lsls	r2, r2, #21
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bfe:	0852      	lsrs	r2, r2, #1
 8002c00:	3a01      	subs	r2, #1
 8002c02:	0652      	lsls	r2, r2, #25
 8002c04:	4311      	orrs	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c0a:	06d2      	lsls	r2, r2, #27
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	4912      	ldr	r1, [pc, #72]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c14:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0f      	ldr	r2, [pc, #60]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c20:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c2c:	f7fd fe78 	bl	8000920 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fd fe74 	bl	8000920 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e058      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <HAL_RCC_OscConfig+0x784>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c52:	e050      	b.n	8002cf6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e04f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c60:	4b27      	ldr	r3, [pc, #156]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d144      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c84:	f7fd fe4c 	bl	8000920 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fd fe48 	bl	8000920 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e02c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x7b8>
 8002caa:	e024      	b.n	8002cf6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fd fe2f 	bl	8000920 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fd fe2b 	bl	8000920 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e00f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	4905      	ldr	r1, [pc, #20]	@ (8002d00 <HAL_RCC_OscConfig+0x82c>)
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_RCC_OscConfig+0x830>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
 8002cf0:	e001      	b.n	8002cf6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	feeefffc 	.word	0xfeeefffc

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e11d      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b90      	ldr	r3, [pc, #576]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 020f 	bic.w	r2, r3, #15
 8002d36:	498b      	ldr	r1, [pc, #556]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b89      	ldr	r3, [pc, #548]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e105      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b81      	ldr	r3, [pc, #516]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d908      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	497b      	ldr	r1, [pc, #492]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d079      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d11e      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	4b75      	ldr	r3, [pc, #468]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0dc      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002da2:	f000 f9d1 	bl	8003148 <RCC_GetSysClockFreqFromPLLSource>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4a70      	ldr	r2, [pc, #448]	@ (8002f6c <HAL_RCC_ClockConfig+0x264>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d946      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dae:	4b6e      	ldr	r3, [pc, #440]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d140      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dba:	4b6b      	ldr	r3, [pc, #428]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dc2:	4a69      	ldr	r2, [pc, #420]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e035      	b.n	8002e3c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd8:	4b63      	ldr	r3, [pc, #396]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b9      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df0:	4b5d      	ldr	r3, [pc, #372]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0ad      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0a5      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e10:	f000 f8b4 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a55      	ldr	r2, [pc, #340]	@ (8002f6c <HAL_RCC_ClockConfig+0x264>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d90f      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e1c:	4b52      	ldr	r3, [pc, #328]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e28:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e30:	4a4d      	ldr	r2, [pc, #308]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 0203 	bic.w	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4947      	ldr	r1, [pc, #284]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4e:	f7fd fd67 	bl	8000920 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fd fd63 	bl	8000920 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e077      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 020c 	and.w	r2, r3, #12
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d1eb      	bne.n	8002e56 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b80      	cmp	r3, #128	@ 0x80
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e84:	4b38      	ldr	r3, [pc, #224]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a37      	ldr	r2, [pc, #220]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e8e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d208      	bcs.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b2e      	ldr	r3, [pc, #184]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	492b      	ldr	r1, [pc, #172]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebe:	4b29      	ldr	r3, [pc, #164]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d210      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 020f 	bic.w	r2, r3, #15
 8002ed4:	4923      	ldr	r1, [pc, #140]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e036      	b.n	8002f5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4918      	ldr	r1, [pc, #96]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f18:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4910      	ldr	r1, [pc, #64]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2c:	f000 f826 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	490c      	ldr	r1, [pc, #48]	@ (8002f70 <HAL_RCC_ClockConfig+0x268>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <HAL_RCC_ClockConfig+0x26c>)
 8002f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <HAL_RCC_ClockConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fc95 	bl	8000880 <HAL_InitTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	04c4b400 	.word	0x04c4b400
 8002f70:	08003cb4 	.word	0x08003cb4
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b3b      	ldr	r3, [pc, #236]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d121      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d11e      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb0:	4b34      	ldr	r3, [pc, #208]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff4:	4b25      	ldr	r3, [pc, #148]	@ (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e004      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003000:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x114>)
 8003002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d134      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300a:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0xa6>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d003      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0xac>
 8003020:	e005      	b.n	800302e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8003024:	617b      	str	r3, [r7, #20]
      break;
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x114>)
 800302a:	617b      	str	r3, [r7, #20]
      break;
 800302c:	e002      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	617b      	str	r3, [r7, #20]
      break;
 8003032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3301      	adds	r3, #1
 8003040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	fb03 f202 	mul.w	r2, r3, r2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	0e5b      	lsrs	r3, r3, #25
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	3301      	adds	r3, #1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003074:	69bb      	ldr	r3, [r7, #24]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	08003cc4 	.word	0x08003cc4
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200

08003094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030a0:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030ac:	f7ff f94e 	bl	800234c <HAL_PWREx_GetVoltageRange>
 80030b0:	6178      	str	r0, [r7, #20]
 80030b2:	e014      	b.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b4:	4b22      	ldr	r3, [pc, #136]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	4a21      	ldr	r2, [pc, #132]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030be:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030cc:	f7ff f93e 	bl	800234c <HAL_PWREx_GetVoltageRange>
 80030d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e4:	d10b      	bne.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b80      	cmp	r3, #128	@ 0x80
 80030ea:	d913      	bls.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80030f0:	d902      	bls.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030f2:	2302      	movs	r3, #2
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e00d      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e00a      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b7f      	cmp	r3, #127	@ 0x7f
 8003102:	d902      	bls.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003104:	2302      	movs	r3, #2
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	e004      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b70      	cmp	r3, #112	@ 0x70
 800310e:	d101      	bne.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003110:	2301      	movs	r3, #1
 8003112:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 020f 	bic.w	r2, r3, #15
 800311c:	4909      	ldr	r1, [pc, #36]	@ (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003124:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	40022000 	.word	0x40022000

08003148 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800314e:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d00b      	beq.n	8003176 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d825      	bhi.n	80031b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d008      	beq.n	800317c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d11f      	bne.n	80031b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003170:	4b25      	ldr	r3, [pc, #148]	@ (8003208 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003172:	613b      	str	r3, [r7, #16]
    break;
 8003174:	e01f      	b.n	80031b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003176:	4b25      	ldr	r3, [pc, #148]	@ (800320c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003178:	613b      	str	r3, [r7, #16]
    break;
 800317a:	e01c      	b.n	80031b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800317c:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003188:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e005      	b.n	80031a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80031a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	613b      	str	r3, [r7, #16]
    break;
 80031ae:	e002      	b.n	80031b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
    break;
 80031b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b6:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	3301      	adds	r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	fb03 f202 	mul.w	r2, r3, r2
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031dc:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0e5b      	lsrs	r3, r3, #25
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	3301      	adds	r3, #1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031f6:	683b      	ldr	r3, [r7, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40021000 	.word	0x40021000
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200
 8003210:	08003cc4 	.word	0x08003cc4

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800321c:	2300      	movs	r3, #0
 800321e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003220:	2300      	movs	r3, #0
 8003222:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322c:	2b00      	cmp	r3, #0
 800322e:	d040      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003234:	2b80      	cmp	r3, #128	@ 0x80
 8003236:	d02a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003238:	2b80      	cmp	r3, #128	@ 0x80
 800323a:	d825      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800323c:	2b60      	cmp	r3, #96	@ 0x60
 800323e:	d026      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003240:	2b60      	cmp	r3, #96	@ 0x60
 8003242:	d821      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003244:	2b40      	cmp	r3, #64	@ 0x40
 8003246:	d006      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d81d      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003250:	2b20      	cmp	r3, #32
 8003252:	d010      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003254:	e018      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003256:	4b89      	ldr	r3, [pc, #548]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a88      	ldr	r2, [pc, #544]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003260:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003262:	e015      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fb02 	bl	8003874 <RCCEx_PLLSAI1_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003274:	e00c      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3320      	adds	r3, #32
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fbed 	bl	8003a5c <RCCEx_PLLSAI2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	74fb      	strb	r3, [r7, #19]
      break;
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800328e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003296:	4b79      	ldr	r3, [pc, #484]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800329c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a4:	4975      	ldr	r1, [pc, #468]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80032ac:	e001      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d047      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d030      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032cc:	d82a      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d2:	d02a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d8:	d824      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032de:	d008      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e4:	d81e      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ee:	d010      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032f0:	e018      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f2:	4b62      	ldr	r3, [pc, #392]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4a61      	ldr	r2, [pc, #388]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fe:	e015      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fab4 	bl	8003874 <RCCEx_PLLSAI1_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003310:	e00c      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3320      	adds	r3, #32
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fb9f 	bl	8003a5c <RCCEx_PLLSAI2_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003322:	e003      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	74fb      	strb	r3, [r7, #19]
      break;
 8003328:	e000      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800332a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003332:	4b52      	ldr	r3, [pc, #328]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003334:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003338:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	494e      	ldr	r1, [pc, #312]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003348:	e001      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 809f 	beq.w	800349a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003360:	4b46      	ldr	r3, [pc, #280]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	4b41      	ldr	r3, [pc, #260]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	4a40      	ldr	r2, [pc, #256]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
 8003382:	4b3e      	ldr	r3, [pc, #248]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003392:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a3a      	ldr	r2, [pc, #232]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339e:	f7fd fabf 	bl	8000920 <HAL_GetTick>
 80033a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a4:	e009      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7fd fabb 	bl	8000920 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d902      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	74fb      	strb	r3, [r7, #19]
        break;
 80033b8:	e005      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ba:	4b31      	ldr	r3, [pc, #196]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ef      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d15b      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033cc:	4b2b      	ldr	r3, [pc, #172]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01f      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d019      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ea:	4b24      	ldr	r3, [pc, #144]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f6:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fc:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003402:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003406:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340c:	4a1b      	ldr	r2, [pc, #108]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003416:	4a19      	ldr	r2, [pc, #100]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d016      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fa7a 	bl	8000920 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342e:	e00b      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fd fa76 	bl	8000920 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d902      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	74fb      	strb	r3, [r7, #19]
            break;
 8003446:	e006      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ec      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10c      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800345c:	4b07      	ldr	r3, [pc, #28]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003462:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	4903      	ldr	r1, [pc, #12]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003474:	e008      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	74bb      	strb	r3, [r7, #18]
 800347a:	e005      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800347c:	40021000 	.word	0x40021000
 8003480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003488:	7c7b      	ldrb	r3, [r7, #17]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4ba0      	ldr	r3, [pc, #640]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	4a9f      	ldr	r2, [pc, #636]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	f023 0203 	bic.w	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	4996      	ldr	r1, [pc, #600]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c8:	4b91      	ldr	r3, [pc, #580]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ce:	f023 020c 	bic.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	498e      	ldr	r1, [pc, #568]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ea:	4b89      	ldr	r3, [pc, #548]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	4985      	ldr	r1, [pc, #532]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800350c:	4b80      	ldr	r3, [pc, #512]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351a:	497d      	ldr	r1, [pc, #500]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800352e:	4b78      	ldr	r3, [pc, #480]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353c:	4974      	ldr	r1, [pc, #464]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003550:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355e:	496c      	ldr	r1, [pc, #432]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b67      	ldr	r3, [pc, #412]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003578:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003580:	4963      	ldr	r1, [pc, #396]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003594:	4b5e      	ldr	r3, [pc, #376]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a2:	495b      	ldr	r1, [pc, #364]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b6:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c4:	4952      	ldr	r1, [pc, #328]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	494a      	ldr	r1, [pc, #296]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035fa:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	4941      	ldr	r1, [pc, #260]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800361c:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	4939      	ldr	r1, [pc, #228]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d028      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800363e:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364c:	4930      	ldr	r1, [pc, #192]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800365c:	d106      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365e:	4b2c      	ldr	r3, [pc, #176]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4a2b      	ldr	r2, [pc, #172]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003668:	60d3      	str	r3, [r2, #12]
 800366a:	e011      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003670:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f8f9 	bl	8003874 <RCCEx_PLLSAI1_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d04d      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a4:	d108      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80036a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ac:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80036b6:	e012      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80036b8:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036be:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80036c8:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d6:	490e      	ldr	r1, [pc, #56]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036e6:	d106      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e8:	4b09      	ldr	r3, [pc, #36]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a08      	ldr	r2, [pc, #32]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036f2:	60d3      	str	r3, [r2, #12]
 80036f4:	e020      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fe:	d109      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a02      	ldr	r2, [pc, #8]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370a:	60d3      	str	r3, [r2, #12]
 800370c:	e014      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800371c:	d10c      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f8a5 	bl	8003874 <RCCEx_PLLSAI1_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d028      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003744:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003752:	4947      	ldr	r1, [pc, #284]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800375e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003762:	d106      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003764:	4b42      	ldr	r3, [pc, #264]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a41      	ldr	r2, [pc, #260]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376e:	60d3      	str	r3, [r2, #12]
 8003770:	e011      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003776:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800377a:	d10c      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f876 	bl	8003874 <RCCEx_PLLSAI1_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01e      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037a2:	4b33      	ldr	r3, [pc, #204]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b2:	492f      	ldr	r1, [pc, #188]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f851 	bl	8003874 <RCCEx_PLLSAI1_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037dc:	7cfb      	ldrb	r3, [r7, #19]
 80037de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037f2:	f023 0204 	bic.w	r2, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fc:	491c      	ldr	r1, [pc, #112]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003810:	4b17      	ldr	r3, [pc, #92]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003816:	f023 0218 	bic.w	r2, r3, #24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003820:	4913      	ldr	r1, [pc, #76]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003834:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800383a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003844:	490a      	ldr	r1, [pc, #40]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003856:	d105      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a04      	ldr	r2, [pc, #16]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003862:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003864:	7cbb      	ldrb	r3, [r7, #18]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000

08003874 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003882:	4b72      	ldr	r3, [pc, #456]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800388e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d103      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
       ||
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d142      	bne.n	800392c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	e03f      	b.n	800392c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d018      	beq.n	80038e6 <RCCEx_PLLSAI1_Config+0x72>
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d825      	bhi.n	8003904 <RCCEx_PLLSAI1_Config+0x90>
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d002      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x4e>
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d009      	beq.n	80038d4 <RCCEx_PLLSAI1_Config+0x60>
 80038c0:	e020      	b.n	8003904 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038c2:	4b62      	ldr	r3, [pc, #392]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d2:	e01a      	b.n	800390a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d4:	4b5d      	ldr	r3, [pc, #372]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e4:	e013      	b.n	800390e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038e6:	4b59      	ldr	r3, [pc, #356]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038f2:	4b56      	ldr	r3, [pc, #344]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003902:	e006      	b.n	8003912 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e004      	b.n	8003914 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003912:	bf00      	nop
    }

    if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800391a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4949      	ldr	r1, [pc, #292]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 8086 	bne.w	8003a40 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003934:	4b45      	ldr	r3, [pc, #276]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a44      	ldr	r2, [pc, #272]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 800393a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fc ffee 	bl	8000920 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003948:	f7fc ffea 	bl	8000920 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
        break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800395c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ef      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d168      	bne.n	8003a40 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003974:	4b35      	ldr	r3, [pc, #212]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	4b35      	ldr	r3, [pc, #212]	@ (8003a50 <RCCEx_PLLSAI1_Config+0x1dc>)
 800397a:	4013      	ands	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0211      	lsls	r1, r2, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	06d2      	lsls	r2, r2, #27
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6852      	ldr	r2, [r2, #4]
 800398e:	3a01      	subs	r2, #1
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	430a      	orrs	r2, r1
 8003994:	492d      	ldr	r1, [pc, #180]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	610b      	str	r3, [r1, #16]
 800399a:	e02d      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d115      	bne.n	80039ce <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	0211      	lsls	r1, r2, #8
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6912      	ldr	r2, [r2, #16]
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0552      	lsls	r2, r2, #21
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6852      	ldr	r2, [r2, #4]
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4921      	ldr	r1, [pc, #132]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
 80039cc:	e014      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ce:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	4b21      	ldr	r3, [pc, #132]	@ (8003a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	0211      	lsls	r1, r2, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6952      	ldr	r2, [r2, #20]
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	3a01      	subs	r2, #1
 80039e4:	0652      	lsls	r2, r2, #25
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4916      	ldr	r1, [pc, #88]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039f8:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fc ff8c 	bl	8000920 <HAL_GetTick>
 8003a08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a0a:	e009      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a0c:	f7fc ff88 	bl	8000920 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d902      	bls.n	8003a20 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a1e:	e005      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a20:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ef      	beq.n	8003a0c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	4904      	ldr	r1, [pc, #16]	@ (8003a4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	07ff800f 	.word	0x07ff800f
 8003a54:	ff9f800f 	.word	0xff9f800f
 8003a58:	f9ff800f 	.word	0xf9ff800f

08003a5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6a:	4b72      	ldr	r3, [pc, #456]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a76:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0203 	and.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d103      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d142      	bne.n	8003b14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
 8003a92:	e03f      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d018      	beq.n	8003ace <RCCEx_PLLSAI2_Config+0x72>
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d825      	bhi.n	8003aec <RCCEx_PLLSAI2_Config+0x90>
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d002      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x4e>
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d009      	beq.n	8003abc <RCCEx_PLLSAI2_Config+0x60>
 8003aa8:	e020      	b.n	8003aec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aaa:	4b62      	ldr	r3, [pc, #392]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11d      	bne.n	8003af2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aba:	e01a      	b.n	8003af2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003abc:	4b5d      	ldr	r3, [pc, #372]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003acc:	e013      	b.n	8003af6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ace:	4b59      	ldr	r3, [pc, #356]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ada:	4b56      	ldr	r3, [pc, #344]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aea:	e006      	b.n	8003afa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e004      	b.n	8003afc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b02:	4b4c      	ldr	r3, [pc, #304]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4949      	ldr	r1, [pc, #292]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8086 	bne.w	8003c28 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b1c:	4b45      	ldr	r3, [pc, #276]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a44      	ldr	r2, [pc, #272]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fc fefa 	bl	8000920 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b30:	f7fc fef6 	bl	8000920 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
        break;
 8003b42:	e005      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b44:	4b3b      	ldr	r3, [pc, #236]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ef      	bne.n	8003b30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d168      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b5c:	4b35      	ldr	r3, [pc, #212]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	4b35      	ldr	r3, [pc, #212]	@ (8003c38 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68d2      	ldr	r2, [r2, #12]
 8003b6e:	06d2      	lsls	r2, r2, #27
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6852      	ldr	r2, [r2, #4]
 8003b76:	3a01      	subs	r2, #1
 8003b78:	0112      	lsls	r2, r2, #4
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	492d      	ldr	r1, [pc, #180]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	614b      	str	r3, [r1, #20]
 8003b82:	e02d      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d115      	bne.n	8003bb6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c3c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6892      	ldr	r2, [r2, #8]
 8003b96:	0211      	lsls	r1, r2, #8
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6912      	ldr	r2, [r2, #16]
 8003b9c:	0852      	lsrs	r2, r2, #1
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	0552      	lsls	r2, r2, #21
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6852      	ldr	r2, [r2, #4]
 8003ba8:	3a01      	subs	r2, #1
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	430a      	orrs	r2, r1
 8003bae:	4921      	ldr	r1, [pc, #132]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	614b      	str	r3, [r1, #20]
 8003bb4:	e014      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	0211      	lsls	r1, r2, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6952      	ldr	r2, [r2, #20]
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0652      	lsls	r2, r2, #25
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6852      	ldr	r2, [r2, #4]
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	4916      	ldr	r1, [pc, #88]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003be0:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a13      	ldr	r2, [pc, #76]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fc fe98 	bl	8000920 <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf2:	e009      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bf4:	f7fc fe94 	bl	8000920 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	73fb      	strb	r3, [r7, #15]
          break;
 8003c06:	e005      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c08:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	07ff800f 	.word	0x07ff800f
 8003c3c:	ff9f800f 	.word	0xff9f800f
 8003c40:	f9ff800f 	.word	0xf9ff800f

08003c44 <memset>:
 8003c44:	4402      	add	r2, r0
 8003c46:	4603      	mov	r3, r0
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <memset+0xa>
 8003c4c:	4770      	bx	lr
 8003c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c52:	e7f9      	b.n	8003c48 <memset+0x4>

08003c54 <__libc_init_array>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4d0d      	ldr	r5, [pc, #52]	@ (8003c8c <__libc_init_array+0x38>)
 8003c58:	4c0d      	ldr	r4, [pc, #52]	@ (8003c90 <__libc_init_array+0x3c>)
 8003c5a:	1b64      	subs	r4, r4, r5
 8003c5c:	10a4      	asrs	r4, r4, #2
 8003c5e:	2600      	movs	r6, #0
 8003c60:	42a6      	cmp	r6, r4
 8003c62:	d109      	bne.n	8003c78 <__libc_init_array+0x24>
 8003c64:	4d0b      	ldr	r5, [pc, #44]	@ (8003c94 <__libc_init_array+0x40>)
 8003c66:	4c0c      	ldr	r4, [pc, #48]	@ (8003c98 <__libc_init_array+0x44>)
 8003c68:	f000 f818 	bl	8003c9c <_init>
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	2600      	movs	r6, #0
 8003c72:	42a6      	cmp	r6, r4
 8003c74:	d105      	bne.n	8003c82 <__libc_init_array+0x2e>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7c:	4798      	blx	r3
 8003c7e:	3601      	adds	r6, #1
 8003c80:	e7ee      	b.n	8003c60 <__libc_init_array+0xc>
 8003c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c86:	4798      	blx	r3
 8003c88:	3601      	adds	r6, #1
 8003c8a:	e7f2      	b.n	8003c72 <__libc_init_array+0x1e>
 8003c8c:	08003cf4 	.word	0x08003cf4
 8003c90:	08003cf4 	.word	0x08003cf4
 8003c94:	08003cf4 	.word	0x08003cf4
 8003c98:	08003cf8 	.word	0x08003cf8

08003c9c <_init>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr

08003ca8 <_fini>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr
