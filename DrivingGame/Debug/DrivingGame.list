
DrivingGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  080095f8  080095f8  0000a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  0000b098  2**0
                  CONTENTS
  4 .ARM          00000008  08009f18  08009f18  0000af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f20  08009f20  0000af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f24  08009f24  0000af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08009f28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a8  20000098  08009fc0  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  08009fc0  0000b440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f8d  00000000  00000000  0000b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046b9  00000000  00000000  0002e055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00032710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001534  00000000  00000000  00034290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ead5  00000000  00000000  000357c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021917  00000000  00000000  00064299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c18c  00000000  00000000  00085bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001a1d3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a0  00000000  00000000  001a1df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001a9694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001a96f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001a97ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000098 	.word	0x20000098
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080095e0 	.word	0x080095e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	080095e0 	.word	0x080095e0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96a 	b.w	8000dc8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	460c      	mov	r4, r1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d14e      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	458c      	cmp	ip, r1
 8000b1c:	4686      	mov	lr, r0
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	d962      	bls.n	8000bea <__udivmoddi4+0xde>
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b34:	4319      	orrs	r1, r3
 8000b36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3e:	fa1f f68c 	uxth.w	r6, ip
 8000b42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb04 f106 	mul.w	r1, r4, r6
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b62:	f080 8112 	bcs.w	8000d8a <__udivmoddi4+0x27e>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 810f 	bls.w	8000d8a <__udivmoddi4+0x27e>
 8000b6c:	3c02      	subs	r4, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb00 f606 	mul.w	r6, r0, r6
 8000b86:	429e      	cmp	r6, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x94>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b92:	f080 80fc 	bcs.w	8000d8e <__udivmoddi4+0x282>
 8000b96:	429e      	cmp	r6, r3
 8000b98:	f240 80f9 	bls.w	8000d8e <__udivmoddi4+0x282>
 8000b9c:	4463      	add	r3, ip
 8000b9e:	3802      	subs	r0, #2
 8000ba0:	1b9b      	subs	r3, r3, r6
 8000ba2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	b11d      	cbz	r5, 8000bb2 <__udivmoddi4+0xa6>
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d905      	bls.n	8000bc6 <__udivmoddi4+0xba>
 8000bba:	b10d      	cbz	r5, 8000bc0 <__udivmoddi4+0xb4>
 8000bbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e7f5      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bc6:	fab3 f183 	clz	r1, r3
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	d146      	bne.n	8000c5c <__udivmoddi4+0x150>
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	d302      	bcc.n	8000bd8 <__udivmoddi4+0xcc>
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	f0c0 80f0 	bcc.w	8000db8 <__udivmoddi4+0x2ac>
 8000bd8:	1a86      	subs	r6, r0, r2
 8000bda:	eb64 0303 	sbc.w	r3, r4, r3
 8000bde:	2001      	movs	r0, #1
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d0e6      	beq.n	8000bb2 <__udivmoddi4+0xa6>
 8000be4:	e9c5 6300 	strd	r6, r3, [r5]
 8000be8:	e7e3      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	f040 8090 	bne.w	8000d10 <__udivmoddi4+0x204>
 8000bf0:	eba1 040c 	sub.w	r4, r1, ip
 8000bf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf8:	fa1f f78c 	uxth.w	r7, ip
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0e:	fb07 f006 	mul.w	r0, r7, r6
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x11c>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x11a>
 8000c20:	4298      	cmp	r0, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000c26:	4626      	mov	r6, r4
 8000c28:	1a1c      	subs	r4, r3, r0
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c32:	fb08 4410 	mls	r4, r8, r0, r4
 8000c36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3a:	fb00 f707 	mul.w	r7, r0, r7
 8000c3e:	429f      	cmp	r7, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x148>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x146>
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	f200 80b0 	bhi.w	8000db2 <__udivmoddi4+0x2a6>
 8000c52:	4620      	mov	r0, r4
 8000c54:	1bdb      	subs	r3, r3, r7
 8000c56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5a:	e7a5      	b.n	8000ba8 <__udivmoddi4+0x9c>
 8000c5c:	f1c1 0620 	rsb	r6, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 f706 	lsr.w	r7, r2, r6
 8000c66:	431f      	orrs	r7, r3
 8000c68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c70:	ea43 030c 	orr.w	r3, r3, ip
 8000c74:	40f4      	lsrs	r4, r6
 8000c76:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7a:	0c38      	lsrs	r0, r7, #16
 8000c7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c80:	fbb4 fef0 	udiv	lr, r4, r0
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fb00 441e 	mls	r4, r0, lr, r4
 8000c8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c90:	fb0e f90c 	mul.w	r9, lr, ip
 8000c94:	45a1      	cmp	r9, r4
 8000c96:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x1a6>
 8000c9c:	193c      	adds	r4, r7, r4
 8000c9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca2:	f080 8084 	bcs.w	8000dae <__udivmoddi4+0x2a2>
 8000ca6:	45a1      	cmp	r9, r4
 8000ca8:	f240 8081 	bls.w	8000dae <__udivmoddi4+0x2a2>
 8000cac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb0:	443c      	add	r4, r7
 8000cb2:	eba4 0409 	sub.w	r4, r4, r9
 8000cb6:	fa1f f983 	uxth.w	r9, r3
 8000cba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x1d2>
 8000cce:	193c      	adds	r4, r7, r4
 8000cd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd4:	d267      	bcs.n	8000da6 <__udivmoddi4+0x29a>
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0x29a>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	443c      	add	r4, r7
 8000cde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	429c      	cmp	r4, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	469c      	mov	ip, r3
 8000cf0:	d351      	bcc.n	8000d96 <__udivmoddi4+0x28a>
 8000cf2:	d04e      	beq.n	8000d92 <__udivmoddi4+0x286>
 8000cf4:	b155      	cbz	r5, 8000d0c <__udivmoddi4+0x200>
 8000cf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000d02:	40cb      	lsrs	r3, r1
 8000d04:	431e      	orrs	r6, r3
 8000d06:	40cc      	lsrs	r4, r1
 8000d08:	e9c5 6400 	strd	r6, r4, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e750      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f103 	lsr.w	r1, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d20:	4094      	lsls	r4, r2
 8000d22:	430c      	orrs	r4, r1
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3110 	mls	r1, r8, r0, r3
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f107 	mul.w	r1, r0, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x24c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d4e:	d22c      	bcs.n	8000daa <__udivmoddi4+0x29e>
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d92a      	bls.n	8000daa <__udivmoddi4+0x29e>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d60:	fb08 3311 	mls	r3, r8, r1, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb01 f307 	mul.w	r3, r1, r7
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x276>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d78:	d213      	bcs.n	8000da2 <__udivmoddi4+0x296>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d911      	bls.n	8000da2 <__udivmoddi4+0x296>
 8000d7e:	3902      	subs	r1, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	1ae4      	subs	r4, r4, r3
 8000d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d88:	e739      	b.n	8000bfe <__udivmoddi4+0xf2>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	e6f0      	b.n	8000b70 <__udivmoddi4+0x64>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e706      	b.n	8000ba0 <__udivmoddi4+0x94>
 8000d92:	45c8      	cmp	r8, r9
 8000d94:	d2ae      	bcs.n	8000cf4 <__udivmoddi4+0x1e8>
 8000d96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d9e:	3801      	subs	r0, #1
 8000da0:	e7a8      	b.n	8000cf4 <__udivmoddi4+0x1e8>
 8000da2:	4631      	mov	r1, r6
 8000da4:	e7ed      	b.n	8000d82 <__udivmoddi4+0x276>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e799      	b.n	8000cde <__udivmoddi4+0x1d2>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e7d4      	b.n	8000d58 <__udivmoddi4+0x24c>
 8000dae:	46d6      	mov	lr, sl
 8000db0:	e77f      	b.n	8000cb2 <__udivmoddi4+0x1a6>
 8000db2:	4463      	add	r3, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	e74d      	b.n	8000c54 <__udivmoddi4+0x148>
 8000db8:	4606      	mov	r6, r0
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e70f      	b.n	8000be0 <__udivmoddi4+0xd4>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	4463      	add	r3, ip
 8000dc4:	e730      	b.n	8000c28 <__udivmoddi4+0x11c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <vApplicationGetIdleTaskMemory+0x30>)
 8000de2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2280      	movs	r2, #128	@ 0x80
 8000de8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200000b4 	.word	0x200000b4
 8000dfc:	20000108 	.word	0x20000108

08000e00 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e00:	b5b0      	push	{r4, r5, r7, lr}
 8000e02:	b092      	sub	sp, #72	@ 0x48
 8000e04:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e06:	f001 f903 	bl	8002010 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e0a:	f000 f87f 	bl	8000f0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e0e:	f000 f9dd 	bl	80011cc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000e12:	f000 f98f 	bl	8001134 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8000e16:	f000 f8ff 	bl	8001018 <MX_I2C2_Init>
	MX_DAC1_Init();
 8000e1a:	f000 f8c9 	bl	8000fb0 <MX_DAC1_Init>
	MX_TIM2_Init();
 8000e1e:	f000 f93b 	bl	8001098 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Init(&huart1);
 8000e22:	4830      	ldr	r0, [pc, #192]	@ (8000ee4 <main+0xe4>)
 8000e24:	f005 f9da 	bl	80061dc <HAL_UART_Init>
	BSP_GYRO_Init();
 8000e28:	f000 fcdc 	bl	80017e4 <BSP_GYRO_Init>

	generate_sound();
 8000e2c:	f000 fa1c 	bl	8001268 <generate_sound>

	if(HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 43, DAC_ALIGN_8B_R) != HAL_OK
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <main+0xe8>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2308      	movs	r3, #8
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	232b      	movs	r3, #43	@ 0x2b
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <main+0xec>)
 8000e3e:	f001 fa47 	bl	80022d0 <HAL_DAC_Start_DMA>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d105      	bne.n	8000e54 <main+0x54>
			|| HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000e48:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <main+0xf0>)
 8000e4a:	f004 fd79 	bl	8005940 <HAL_TIM_Base_Start_IT>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <main+0x58>
		Error_Handler();
 8000e54:	f000 fb70 	bl	8001538 <Error_Handler>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of readSensor */
	osThreadDef(readSensor, ReadSensorTask, osPriorityNormal, 0, 128);
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <main+0xf4>)
 8000e5a:	f107 0420 	add.w	r4, r7, #32
 8000e5e:	461d      	mov	r5, r3
 8000e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	readSensorHandle = osThreadCreate(osThread(readSensor), NULL);
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 fc8f 	bl	8007796 <osThreadCreate>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef8 <main+0xf8>)
 8000e7c:	6013      	str	r3, [r2, #0]

	/* definition and creation of displayDataTask */
	osThreadDef(displayDataTask, DisplayDataTask, osPriorityIdle, 0, 128);
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <main+0xfc>)
 8000e80:	1d3c      	adds	r4, r7, #4
 8000e82:	461d      	mov	r5, r3
 8000e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	displayDataTaskHandle = osThreadCreate(osThread(displayDataTask), NULL);
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fc7e 	bl	8007796 <osThreadCreate>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <main+0x100>)
 8000e9e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000ea0:	f006 fc72 	bl	8007788 <osKernelStart>
	    /* USER CODE END WHILE /

	    / USER CODE BEGIN 3 */

	      //Part 1
	      for(uint32_t i=0; i<PERIOD; i++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ea8:	e018      	b.n	8000edc <main+0xdc>

	          sineWave = sine[i];
 8000eaa:	4a16      	ldr	r2, [pc, #88]	@ (8000f04 <main+0x104>)
 8000eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <main+0x108>)
 8000eb6:	701a      	strb	r2, [r3, #0]

	          if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sineWave) != HAL_OK){
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <main+0x108>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	480a      	ldr	r0, [pc, #40]	@ (8000eec <main+0xec>)
 8000ec2:	f001 fb70 	bl	80025a6 <HAL_DAC_SetValue>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <main+0xd0>
	              Error_Handler();
 8000ecc:	f000 fb34 	bl	8001538 <Error_Handler>
	          }

	          HAL_Delay(PERIOD/15); //to hear the sound on the speaker
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f001 f8d5 	bl	8002080 <HAL_Delay>
	      for(uint32_t i=0; i<PERIOD; i++){
 8000ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ede:	2b0e      	cmp	r3, #14
 8000ee0:	d9e3      	bls.n	8000eaa <main+0xaa>
 8000ee2:	e7df      	b.n	8000ea4 <main+0xa4>
 8000ee4:	200003dc 	.word	0x200003dc
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000328 	.word	0x20000328
 8000ef0:	20000390 	.word	0x20000390
 8000ef4:	08009604 	.word	0x08009604
 8000ef8:	20000470 	.word	0x20000470
 8000efc:	08009630 	.word	0x08009630
 8000f00:	20000474 	.word	0x20000474
 8000f04:	20000308 	.word	0x20000308
 8000f08:	200004cc 	.word	0x200004cc

08000f0c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b096      	sub	sp, #88	@ 0x58
 8000f10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2244      	movs	r2, #68	@ 0x44
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 fee0 	bl	8008ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f002 ffe8 	bl	8003f04 <HAL_PWREx_ControlVoltageScaling>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x32>
	{
		Error_Handler();
 8000f3a:	f000 fafd 	bl	8001538 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f4a:	2360      	movs	r3, #96	@ 0x60
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f52:	2301      	movs	r3, #1
 8000f54:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000f5a:	233c      	movs	r3, #60	@ 0x3c
 8000f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 f86c 	bl	800404c <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000f7a:	f000 fadd 	bl	8001538 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7e:	230f      	movs	r3, #15
 8000f80:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	2303      	movs	r3, #3
 8000f84:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	2105      	movs	r1, #5
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fc72 	bl	8004880 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000fa2:	f000 fac9 	bl	8001538 <Error_Handler>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3758      	adds	r7, #88	@ 0x58
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2228      	movs	r2, #40	@ 0x28
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fe8f 	bl	8008ce0 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_DAC1_Init+0x60>)
 8000fc4:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <MX_DAC1_Init+0x64>)
 8000fc6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <MX_DAC1_Init+0x60>)
 8000fca:	f001 f95f 	bl	800228c <HAL_DAC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8000fd4:	f000 fab0 	bl	8001538 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe4:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_DAC1_Init+0x60>)
 8000ffa:	f001 fb21 	bl	8002640 <HAL_DAC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_DAC1_Init+0x58>
	{
		Error_Handler();
 8001004:	f000 fa98 	bl	8001538 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000328 	.word	0x20000328
 8001014:	40007400 	.word	0x40007400

08001018 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_I2C2_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <MX_I2C2_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x30A175AB;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_I2C2_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <MX_I2C2_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_I2C2_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_I2C2_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_I2C2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_I2C2_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_I2C2_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_I2C2_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_I2C2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <MX_I2C2_Init+0x74>)
 8001054:	f002 f8e4 	bl	8003220 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 800105e:	f000 fa6b 	bl	8001538 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <MX_I2C2_Init+0x74>)
 8001066:	f002 fe95 	bl	8003d94 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001070:	f000 fa62 	bl	8001538 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_I2C2_Init+0x74>)
 8001078:	f002 fed7 	bl	8003e2a <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001082:	f000 fa59 	bl	8001538 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000033c 	.word	0x2000033c
 8001090:	40005800 	.word	0x40005800
 8001094:	30a175ab 	.word	0x30a175ab

08001098 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2721;
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010cc:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 80010d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010de:	4814      	ldr	r0, [pc, #80]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010e0:	f004 fbd6 	bl	8005890 <HAL_TIM_Base_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80010ea:	f000 fa25 	bl	8001538 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010fc:	f004 fd97 	bl	8005c2e <HAL_TIM_ConfigClockSource>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8001106:	f000 fa17 	bl	8001538 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_TIM2_Init+0x98>)
 8001118:	f004 ffba 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001122:	f000 fa09 	bl	8001538 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000390 	.word	0x20000390

08001134 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	@ (80011c8 <MX_USART1_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 800117e:	f005 f82d 	bl	80061dc <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001188:	f000 f9d6 	bl	8001538 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 8001190:	f006 fa17 	bl	80075c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 800119a:	f000 f9cd 	bl	8001538 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 80011a2:	f006 fa4c 	bl	800763e <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 80011ac:	f000 f9c4 	bl	8001538 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_USART1_UART_Init+0x90>)
 80011b2:	f006 f9cd 	bl	8007550 <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80011bc:	f000 f9bc 	bl	8001538 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200003dc 	.word	0x200003dc
 80011c8:	40013800 	.word	0x40013800

080011cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_GPIO_Init+0x94>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001260 <MX_GPIO_Init+0x94>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_GPIO_Init+0x94>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_GPIO_Init+0x94>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a18      	ldr	r2, [pc, #96]	@ (8001260 <MX_GPIO_Init+0x94>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_GPIO_Init+0x94>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <MX_GPIO_Init+0x94>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <MX_GPIO_Init+0x94>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_GPIO_Init+0x94>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 800122a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001230:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001234:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	4619      	mov	r1, r3
 8001240:	4808      	ldr	r0, [pc, #32]	@ (8001264 <MX_GPIO_Init+0x98>)
 8001242:	f001 fd51 	bl	8002ce8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	2028      	movs	r0, #40	@ 0x28
 800124c:	f000 fff4 	bl	8002238 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001250:	2028      	movs	r0, #40	@ 0x28
 8001252:	f001 f80d 	bl	8002270 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	48000800 	.word	0x48000800

08001268 <generate_sound>:

/* USER CODE BEGIN 4 */
void generate_sound(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

	// C6
	for(int i = 0; i < 43; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e033      	b.n	80012dc <generate_sound+0x74>
		sine_C6[i] = (uint8_t) ((arm_sin_f32((2*M_PI*i)/43) + 1)*(170.0f / 2.0f)); //170/2=85 (multiply 85 because that is 66% of 255)
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff f965 	bl	8000544 <__aeabi_i2d>
 800127a:	a357      	add	r3, pc, #348	@ (adr r3, 80013d8 <generate_sound+0x170>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9ca 	bl	8000618 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <generate_sound+0x178>)
 8001292:	f7ff faeb 	bl	800086c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fbcd 	bl	8000a3c <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	ee00 3a10 	vmov	s0, r3
 80012a8:	f007 fcb4 	bl	8008c14 <arm_sin_f32>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
 80012b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b8:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80013e4 <generate_sound+0x17c>
 80012bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012c8:	793b      	ldrb	r3, [r7, #4]
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	4a46      	ldr	r2, [pc, #280]	@ (80013e8 <generate_sound+0x180>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4413      	add	r3, r2
 80012d2:	460a      	mov	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 43; i++) {
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e0:	ddc8      	ble.n	8001274 <generate_sound+0xc>
	}
	// G6
	for(int i=0; i < 29; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e033      	b.n	8001350 <generate_sound+0xe8>
		sine_G6[i] = (uint8_t) ((arm_sin_f32((2*M_PI*i)/29) + 1)*(170.0f / 2.0f));
 80012e8:	6938      	ldr	r0, [r7, #16]
 80012ea:	f7ff f92b 	bl	8000544 <__aeabi_i2d>
 80012ee:	a33a      	add	r3, pc, #232	@ (adr r3, 80013d8 <generate_sound+0x170>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f990 	bl	8000618 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <generate_sound+0x184>)
 8001306:	f7ff fab1 	bl	800086c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fb93 	bl	8000a3c <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	ee00 3a10 	vmov	s0, r3
 800131c:	f007 fc7a 	bl	8008c14 <arm_sin_f32>
 8001320:	eef0 7a40 	vmov.f32	s15, s0
 8001324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800132c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80013e4 <generate_sound+0x17c>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001338:	edc7 7a01 	vstr	s15, [r7, #4]
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	b2d9      	uxtb	r1, r3
 8001340:	4a2b      	ldr	r2, [pc, #172]	@ (80013f0 <generate_sound+0x188>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4413      	add	r3, r2
 8001346:	460a      	mov	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < 29; i++) {
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3301      	adds	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b1c      	cmp	r3, #28
 8001354:	ddc8      	ble.n	80012e8 <generate_sound+0x80>
	}
	// E6
	for(int i = 0; i < 34; i++) {
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e033      	b.n	80013c4 <generate_sound+0x15c>
		sine_E6[i] = (uint8_t) ((arm_sin_f32((2*M_PI*i)/34) + 1)*(170.0f / 2.0f));
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff f8f1 	bl	8000544 <__aeabi_i2d>
 8001362:	a31d      	add	r3, pc, #116	@ (adr r3, 80013d8 <generate_sound+0x170>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f956 	bl	8000618 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <generate_sound+0x18c>)
 800137a:	f7ff fa77 	bl	800086c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fb59 	bl	8000a3c <__aeabi_d2f>
 800138a:	4603      	mov	r3, r0
 800138c:	ee00 3a10 	vmov	s0, r3
 8001390:	f007 fc40 	bl	8008c14 <arm_sin_f32>
 8001394:	eef0 7a40 	vmov.f32	s15, s0
 8001398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800139c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80013e4 <generate_sound+0x17c>
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	b2d9      	uxtb	r1, r3
 80013b4:	4a10      	ldr	r2, [pc, #64]	@ (80013f8 <generate_sound+0x190>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++) {
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b21      	cmp	r3, #33	@ 0x21
 80013c8:	ddc8      	ble.n	800135c <generate_sound+0xf4>
	}
}
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	f3af 8000 	nop.w
 80013d8:	54442d18 	.word	0x54442d18
 80013dc:	401921fb 	.word	0x401921fb
 80013e0:	40458000 	.word	0x40458000
 80013e4:	42aa0000 	.word	0x42aa0000
 80013e8:	200004d0 	.word	0x200004d0
 80013ec:	403d0000 	.word	0x403d0000
 80013f0:	200004fc 	.word	0x200004fc
 80013f4:	40410000 	.word	0x40410000
 80013f8:	2000051c 	.word	0x2000051c

080013fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af02      	add	r7, sp, #8
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001406:	2100      	movs	r1, #0
 8001408:	481b      	ldr	r0, [pc, #108]	@ (8001478 <HAL_GPIO_EXTI_Callback+0x7c>)
 800140a:	f001 f82d 	bl	8002468 <HAL_DAC_Stop_DMA>

	if(currentNote == sine_C6){
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <HAL_GPIO_EXTI_Callback+0x84>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d10c      	bne.n	8001432 <HAL_GPIO_EXTI_Callback+0x36>
		currentNote = sine_E6;
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 800141a:	4a1a      	ldr	r2, [pc, #104]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x88>)
 800141c:	601a      	str	r2, [r3, #0]
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 34, DAC_ALIGN_8B_R);
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2308      	movs	r3, #8
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2322      	movs	r3, #34	@ 0x22
 8001428:	2100      	movs	r1, #0
 800142a:	4813      	ldr	r0, [pc, #76]	@ (8001478 <HAL_GPIO_EXTI_Callback+0x7c>)
 800142c:	f000 ff50 	bl	80022d0 <HAL_DAC_Start_DMA>
		currentNote = sine_C6;
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 43, DAC_ALIGN_8B_R);
	}


}
 8001430:	e01d      	b.n	800146e <HAL_GPIO_EXTI_Callback+0x72>
	} else if(currentNote == sine_E6){
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x88>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d10c      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x5a>
		currentNote = sine_G6;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001440:	601a      	str	r2, [r3, #0]
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 29, DAC_ALIGN_8B_R);
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2308      	movs	r3, #8
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	231d      	movs	r3, #29
 800144c:	2100      	movs	r1, #0
 800144e:	480a      	ldr	r0, [pc, #40]	@ (8001478 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001450:	f000 ff3e 	bl	80022d0 <HAL_DAC_Start_DMA>
}
 8001454:	e00b      	b.n	800146e <HAL_GPIO_EXTI_Callback+0x72>
		currentNote = sine_C6;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 8001458:	4a09      	ldr	r2, [pc, #36]	@ (8001480 <HAL_GPIO_EXTI_Callback+0x84>)
 800145a:	601a      	str	r2, [r3, #0]
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentNote, 43, DAC_ALIGN_8B_R);
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <HAL_GPIO_EXTI_Callback+0x80>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2308      	movs	r3, #8
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	232b      	movs	r3, #43	@ 0x2b
 8001466:	2100      	movs	r1, #0
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <HAL_GPIO_EXTI_Callback+0x7c>)
 800146a:	f000 ff31 	bl	80022d0 <HAL_DAC_Start_DMA>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000328 	.word	0x20000328
 800147c:	20000000 	.word	0x20000000
 8001480:	200004d0 	.word	0x200004d0
 8001484:	2000051c 	.word	0x2000051c
 8001488:	200004fc 	.word	0x200004fc

0800148c <ReadSensorTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReadSensorTask */
void ReadSensorTask(void const * argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(100);
 8001494:	2064      	movs	r0, #100	@ 0x64
 8001496:	f006 f9ca 	bl	800782e <osDelay>
		BSP_GYRO_GetXYZ(&gyro);
 800149a:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <ReadSensorTask+0x18>)
 800149c:	f000 f9e4 	bl	8001868 <BSP_GYRO_GetXYZ>
		osDelay(100);
 80014a0:	bf00      	nop
 80014a2:	e7f7      	b.n	8001494 <ReadSensorTask+0x8>
 80014a4:	200004c0 	.word	0x200004c0

080014a8 <DisplayDataTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DisplayDataTask */
void DisplayDataTask(void const * argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DisplayDataTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(100);
 80014b0:	2064      	movs	r0, #100	@ 0x64
 80014b2:	f006 f9bc 	bl	800782e <osDelay>
		memset(result, ' ', 69);
 80014b6:	2245      	movs	r2, #69	@ 0x45
 80014b8:	2120      	movs	r1, #32
 80014ba:	4812      	ldr	r0, [pc, #72]	@ (8001504 <DisplayDataTask+0x5c>)
 80014bc:	f007 fc10 	bl	8008ce0 <memset>

		sprintf(result, "\n\rGyro: %.2d, %.2d, %.2d", (int) gyro[0], (int) gyro[1], (int) gyro[2]);
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <DisplayDataTask+0x60>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <DisplayDataTask+0x60>)
 80014cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <DisplayDataTask+0x60>)
 80014d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014de:	ee17 3a90 	vmov	r3, s15
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	ee16 3a90 	vmov	r3, s13
 80014e8:	ee17 2a10 	vmov	r2, s14
 80014ec:	4907      	ldr	r1, [pc, #28]	@ (800150c <DisplayDataTask+0x64>)
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <DisplayDataTask+0x5c>)
 80014f0:	f007 fbd6 	bl	8008ca0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)result, 69, 100);
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	2245      	movs	r2, #69	@ 0x45
 80014f8:	4902      	ldr	r1, [pc, #8]	@ (8001504 <DisplayDataTask+0x5c>)
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <DisplayDataTask+0x68>)
 80014fc:	f004 febe 	bl	800627c <HAL_UART_Transmit>
	{
 8001500:	bf00      	nop
 8001502:	e7d5      	b.n	80014b0 <DisplayDataTask+0x8>
 8001504:	20000478 	.word	0x20000478
 8001508:	200004c0 	.word	0x200004c0
 800150c:	0800964c 	.word	0x0800964c
 8001510:	200003dc 	.word	0x200003dc

08001514 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001526:	f000 fd8b 	bl	8002040 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40001000 	.word	0x40001000

08001538 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <Error_Handler+0x8>

08001544 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <I2Cx_MspInit+0xa8>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	4a26      	ldr	r2, [pc, #152]	@ (80015ec <I2Cx_MspInit+0xa8>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <I2Cx_MspInit+0xa8>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001564:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001568:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001576:	2304      	movs	r3, #4
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	481b      	ldr	r0, [pc, #108]	@ (80015f0 <I2Cx_MspInit+0xac>)
 8001582:	f001 fbb1 	bl	8002ce8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4818      	ldr	r0, [pc, #96]	@ (80015f0 <I2Cx_MspInit+0xac>)
 800158e:	f001 fbab 	bl	8002ce8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <I2Cx_MspInit+0xa8>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	4a15      	ldr	r2, [pc, #84]	@ (80015ec <I2Cx_MspInit+0xa8>)
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800159c:	6593      	str	r3, [r2, #88]	@ 0x58
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <I2Cx_MspInit+0xa8>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <I2Cx_MspInit+0xa8>)
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <I2Cx_MspInit+0xa8>)
 80015b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015b4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <I2Cx_MspInit+0xa8>)
 80015b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ba:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <I2Cx_MspInit+0xa8>)
 80015bc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80015c0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	210f      	movs	r1, #15
 80015c6:	2021      	movs	r0, #33	@ 0x21
 80015c8:	f000 fe36 	bl	8002238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80015cc:	2021      	movs	r0, #33	@ 0x21
 80015ce:	f000 fe4f 	bl	8002270 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	210f      	movs	r1, #15
 80015d6:	2022      	movs	r0, #34	@ 0x22
 80015d8:	f000 fe2e 	bl	8002238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80015dc:	2022      	movs	r0, #34	@ 0x22
 80015de:	f000 fe47 	bl	8002270 <HAL_NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400

080015f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <I2Cx_Init+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a11      	ldr	r2, [pc, #68]	@ (800164c <I2Cx_Init+0x58>)
 8001606:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff89 	bl	8001544 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 fdf4 	bl	8003220 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f002 fbaa 	bl	8003d94 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40005800 	.word	0x40005800
 800164c:	00702681 	.word	0x00702681

08001650 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af04      	add	r7, sp, #16
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	4603      	mov	r3, r0
 8001660:	72fb      	strb	r3, [r7, #11]
 8001662:	460b      	mov	r3, r1
 8001664:	813b      	strh	r3, [r7, #8]
 8001666:	4613      	mov	r3, r2
 8001668:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	b299      	uxth	r1, r3
 8001672:	88f8      	ldrh	r0, [r7, #6]
 8001674:	893a      	ldrh	r2, [r7, #8]
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4603      	mov	r3, r0
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f001 ffa8 	bl	80035dc <HAL_I2C_Mem_Read>
 800168c:	4603      	mov	r3, r0
 800168e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	4619      	mov	r1, r3
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f832 	bl	8001704 <I2Cx_Error>
  }
  return status;
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b08a      	sub	sp, #40	@ 0x28
 80016ae:	af04      	add	r7, sp, #16
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	4608      	mov	r0, r1
 80016b4:	4611      	mov	r1, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	72fb      	strb	r3, [r7, #11]
 80016bc:	460b      	mov	r3, r1
 80016be:	813b      	strh	r3, [r7, #8]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80016c8:	7afb      	ldrb	r3, [r7, #11]
 80016ca:	b299      	uxth	r1, r3
 80016cc:	88f8      	ldrh	r0, [r7, #6]
 80016ce:	893a      	ldrh	r2, [r7, #8]
 80016d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4603      	mov	r3, r0
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f001 fe67 	bl	80033b4 <HAL_I2C_Mem_Write>
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	4619      	mov	r1, r3
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f805 	bl	8001704 <I2Cx_Error>
  }
  return status;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f001 fe20 	bl	8003356 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff6c 	bl	80015f4 <I2Cx_Init>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <SENSOR_IO_Init+0x10>)
 800172a:	f7ff ff63 	bl	80015f4 <I2Cx_Init>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000540 	.word	0x20000540

08001738 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af02      	add	r7, sp, #8
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	460b      	mov	r3, r1
 8001744:	71bb      	strb	r3, [r7, #6]
 8001746:	4613      	mov	r3, r2
 8001748:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	b29a      	uxth	r2, r3
 800174e:	79f9      	ldrb	r1, [r7, #7]
 8001750:	2301      	movs	r3, #1
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	1d7b      	adds	r3, r7, #5
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	4803      	ldr	r0, [pc, #12]	@ (8001768 <SENSOR_IO_Write+0x30>)
 800175c:	f7ff ffa5 	bl	80016aa <I2Cx_WriteMultiple>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000540 	.word	0x20000540

0800176c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af02      	add	r7, sp, #8
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001780:	79bb      	ldrb	r3, [r7, #6]
 8001782:	b29a      	uxth	r2, r3
 8001784:	79f9      	ldrb	r1, [r7, #7]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 030f 	add.w	r3, r7, #15
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <SENSOR_IO_Read+0x38>)
 8001794:	f7ff ff5c 	bl	8001650 <I2Cx_ReadMultiple>

  return read_value;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000540 	.word	0x20000540

080017a8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	603a      	str	r2, [r7, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	460b      	mov	r3, r1
 80017b8:	71bb      	strb	r3, [r7, #6]
 80017ba:	4613      	mov	r3, r2
 80017bc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	79f9      	ldrb	r1, [r7, #7]
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <SENSOR_IO_ReadMultiple+0x38>)
 80017d0:	f7ff ff3e 	bl	8001650 <I2Cx_ReadMultiple>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000540 	.word	0x20000540

080017e4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80017ee:	2300      	movs	r3, #0
 80017f0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <BSP_GYRO_Init+0x7c>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	4798      	blx	r3
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b6a      	cmp	r3, #106	@ 0x6a
 80017fc:	d002      	beq.n	8001804 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	e028      	b.n	8001856 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <BSP_GYRO_Init+0x80>)
 8001806:	4a16      	ldr	r2, [pc, #88]	@ (8001860 <BSP_GYRO_Init+0x7c>)
 8001808:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800180e:	2330      	movs	r3, #48	@ 0x30
 8001810:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800181a:	2340      	movs	r3, #64	@ 0x40
 800181c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001822:	230c      	movs	r3, #12
 8001824:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8001826:	7aba      	ldrb	r2, [r7, #10]
 8001828:	797b      	ldrb	r3, [r7, #5]
 800182a:	4313      	orrs	r3, r2
 800182c:	b2db      	uxtb	r3, r3
 800182e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001830:	7a3b      	ldrb	r3, [r7, #8]
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	b2db      	uxtb	r3, r3
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	b21b      	sxth	r3, r3
 8001844:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <BSP_GYRO_Init+0x80>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	89ba      	ldrh	r2, [r7, #12]
 800184e:	4610      	mov	r0, r2
 8001850:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000008 	.word	0x20000008
 8001864:	20000594 	.word	0x20000594

08001868 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <BSP_GYRO_GetXYZ+0x2c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <BSP_GYRO_GetXYZ+0x2c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <BSP_GYRO_GetXYZ+0x2c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
    }
  }
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000594 	.word	0x20000594

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a2:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	210f      	movs	r1, #15
 80018d2:	f06f 0001 	mvn.w	r0, #1
 80018d6:	f000 fcaf 	bl	8002238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_DAC_MspInit+0x84>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12c      	bne.n	8001964 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_DAC_MspInit+0x88>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <HAL_DAC_MspInit+0x88>)
 8001910:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001914:	6593      	str	r3, [r2, #88]	@ 0x58
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_DAC_MspInit+0x88>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <HAL_DAC_MspInit+0x88>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <HAL_DAC_MspInit+0x88>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_DAC_MspInit+0x88>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800193a:	2310      	movs	r3, #16
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	2303      	movs	r3, #3
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001950:	f001 f9ca 	bl	8002ce8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	210f      	movs	r1, #15
 8001958:	2036      	movs	r0, #54	@ 0x36
 800195a:	f000 fc6d 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800195e:	2036      	movs	r0, #54	@ 0x36
 8001960:	f000 fc86 	bl	8002270 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	@ 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40007400 	.word	0x40007400
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0ae      	sub	sp, #184	@ 0xb8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	2294      	movs	r2, #148	@ 0x94
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f007 f9a3 	bl	8008ce0 <memset>
  if(hi2c->Instance==I2C2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <HAL_I2C_MspInit+0xb0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d13b      	bne.n	8001a1c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fa55 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019bc:	f7ff fdbc 	bl	8001538 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_I2C_MspInit+0xb4>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <HAL_I2C_MspInit+0xb4>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_I2C_MspInit+0xb4>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e0:	2312      	movs	r3, #18
 80019e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019f2:	2304      	movs	r3, #4
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019fc:	4619      	mov	r1, r3
 80019fe:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <HAL_I2C_MspInit+0xb8>)
 8001a00:	f001 f972 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_I2C_MspInit+0xb4>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <HAL_I2C_MspInit+0xb4>)
 8001a0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_I2C_MspInit+0xb4>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a1c:	bf00      	nop
 8001a1e:	37b8      	adds	r7, #184	@ 0xb8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40005800 	.word	0x40005800
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000400 	.word	0x48000400

08001a30 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <HAL_I2C_MspDeInit+0x3c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10f      	bne.n	8001a62 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a42:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_I2C_MspDeInit+0x40>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_I2C_MspDeInit+0x40>)
 8001a48:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001a4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a52:	4808      	ldr	r0, [pc, #32]	@ (8001a74 <HAL_I2C_MspDeInit+0x44>)
 8001a54:	f001 fada 	bl	800300c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001a58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a5c:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <HAL_I2C_MspDeInit+0x44>)
 8001a5e:	f001 fad5 	bl	800300c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40005800 	.word	0x40005800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000400 	.word	0x48000400

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a88:	d113      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <HAL_TIM_Base_MspInit+0x44>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <HAL_TIM_Base_MspInit+0x44>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_TIM_Base_MspInit+0x44>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2105      	movs	r1, #5
 8001aa6:	201c      	movs	r0, #28
 8001aa8:	f000 fbc6 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aac:	201c      	movs	r0, #28
 8001aae:	f000 fbdf 	bl	8002270 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2294      	movs	r2, #148	@ 0x94
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f007 f8fd 	bl	8008ce0 <memset>
  if(huart->Instance==USART1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a25      	ldr	r2, [pc, #148]	@ (8001b80 <HAL_UART_MspInit+0xc0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d142      	bne.n	8001b76 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 f9af 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b08:	f7ff fd16 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b10:	4a1c      	ldr	r2, [pc, #112]	@ (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b16:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_UART_MspInit+0xc4>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3c:	23c0      	movs	r3, #192	@ 0xc0
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <HAL_UART_MspInit+0xc8>)
 8001b62:	f001 f8c1 	bl	8002ce8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2025      	movs	r0, #37	@ 0x25
 8001b6c:	f000 fb64 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b70:	2025      	movs	r0, #37	@ 0x25
 8001b72:	f000 fb7d 	bl	8002270 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	37b8      	adds	r7, #184	@ 0xb8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	48000400 	.word	0x48000400

08001b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	@ 0x38
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b9a:	4b34      	ldr	r3, [pc, #208]	@ (8001c6c <HAL_InitTick+0xe0>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a33      	ldr	r2, [pc, #204]	@ (8001c6c <HAL_InitTick+0xe0>)
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_InitTick+0xe0>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb2:	f107 0210 	add.w	r2, r7, #16
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f85d 	bl	8004c7c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bcc:	f003 f82a 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8001bd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8001bd2:	e004      	b.n	8001bde <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bd4:	f003 f826 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be0:	4a23      	ldr	r2, [pc, #140]	@ (8001c70 <HAL_InitTick+0xe4>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	3b01      	subs	r3, #1
 8001bea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_InitTick+0xec>)
 8001bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001bf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bf8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c12:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001c14:	f003 fe3c 	bl	8005890 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11b      	bne.n	8001c5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c26:	4813      	ldr	r0, [pc, #76]	@ (8001c74 <HAL_InitTick+0xe8>)
 8001c28:	f003 fe8a 	bl	8005940 <HAL_TIM_Base_Start_IT>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d111      	bne.n	8001c5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c3a:	2036      	movs	r0, #54	@ 0x36
 8001c3c:	f000 fb18 	bl	8002270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	d808      	bhi.n	8001c58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c46:	2200      	movs	r2, #0
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	2036      	movs	r0, #54	@ 0x36
 8001c4c:	f000 faf4 	bl	8002238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_InitTick+0xf0>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e002      	b.n	8001c5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3738      	adds	r7, #56	@ 0x38
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	20000598 	.word	0x20000598
 8001c78:	40001000 	.word	0x40001000
 8001c7c:	2000003c 	.word	0x2000003c

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <TIM2_IRQHandler+0x10>)
 8001cbe:	f003 feaf 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000390 	.word	0x20000390

08001ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <USART1_IRQHandler+0x10>)
 8001cd2:	f004 fb61 	bl	8006398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200003dc 	.word	0x200003dc

08001ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001ce4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ce8:	f001 fa82 	bl	80031f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <TIM6_DAC_IRQHandler+0x14>)
 8001cf6:	f003 fe93 	bl	8005a20 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <TIM6_DAC_IRQHandler+0x18>)
 8001cfc:	f000 fbf9 	bl	80024f2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000598 	.word	0x20000598
 8001d08:	20000328 	.word	0x20000328

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f006 ffd8 	bl	8008cf0 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200a0000 	.word	0x200a0000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200005e4 	.word	0x200005e4
 8001d74:	20001440 	.word	0x20001440

08001d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da0:	f7ff ffea 	bl	8001d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da4:	480c      	ldr	r0, [pc, #48]	@ (8001dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da6:	490d      	ldr	r1, [pc, #52]	@ (8001ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <LoopForever+0xe>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001de8 <LoopForever+0x16>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dca:	f006 ff97 	bl	8008cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dce:	f7ff f817 	bl	8000e00 <main>

08001dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd2:	e7fe      	b.n	8001dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001de0:	08009f28 	.word	0x08009f28
  ldr r2, =_sbss
 8001de4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001de8:	20001440 	.word	0x20001440

08001dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC1_IRQHandler>

08001dee <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001dfc:	2111      	movs	r1, #17
 8001dfe:	20d4      	movs	r0, #212	@ 0xd4
 8001e00:	f7ff fcb4 	bl	800176c <SENSOR_IO_Read>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001e0c:	7bbb      	ldrb	r3, [r7, #14]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001e14:	7bba      	ldrb	r2, [r7, #14]
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2111      	movs	r1, #17
 8001e22:	20d4      	movs	r0, #212	@ 0xd4
 8001e24:	f7ff fc88 	bl	8001738 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001e28:	2112      	movs	r1, #18
 8001e2a:	20d4      	movs	r0, #212	@ 0xd4
 8001e2c:	f7ff fc9e 	bl	800176c <SENSOR_IO_Read>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001e42:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001e44:	7bba      	ldrb	r2, [r7, #14]
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2112      	movs	r1, #18
 8001e52:	20d4      	movs	r0, #212	@ 0xd4
 8001e54:	f7ff fc70 	bl	8001738 <SENSOR_IO_Write>
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001e6a:	2111      	movs	r1, #17
 8001e6c:	20d4      	movs	r0, #212	@ 0xd4
 8001e6e:	f7ff fc7d 	bl	800176c <SENSOR_IO_Read>
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	461a      	mov	r2, r3
 8001e82:	2111      	movs	r1, #17
 8001e84:	20d4      	movs	r0, #212	@ 0xd4
 8001e86:	f7ff fc57 	bl	8001738 <SENSOR_IO_Write>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001e96:	f7ff fc45 	bl	8001724 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	20d4      	movs	r0, #212	@ 0xd4
 8001e9e:	f7ff fc65 	bl	800176c <SENSOR_IO_Read>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001eb6:	2116      	movs	r1, #22
 8001eb8:	20d4      	movs	r0, #212	@ 0xd4
 8001eba:	f7ff fc57 	bl	800176c <SENSOR_IO_Read>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ec8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ed6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	461a      	mov	r2, r3
 8001edc:	2116      	movs	r1, #22
 8001ede:	20d4      	movs	r0, #212	@ 0xd4
 8001ee0:	f7ff fc2a 	bl	8001738 <SENSOR_IO_Write>
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001f02:	2111      	movs	r1, #17
 8001f04:	20d4      	movs	r0, #212	@ 0xd4
 8001f06:	f7ff fc31 	bl	800176c <SENSOR_IO_Read>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001f0e:	f107 0208 	add.w	r2, r7, #8
 8001f12:	2306      	movs	r3, #6
 8001f14:	2122      	movs	r1, #34	@ 0x22
 8001f16:	20d4      	movs	r0, #212	@ 0xd4
 8001f18:	f7ff fc46 	bl	80017a8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	77fb      	strb	r3, [r7, #31]
 8001f20:	e01a      	b.n	8001f58 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	3301      	adds	r3, #1
 8001f28:	3320      	adds	r3, #32
 8001f2a:	443b      	add	r3, r7
 8001f2c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	7ffa      	ldrb	r2, [r7, #31]
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	3220      	adds	r2, #32
 8001f3a:	443a      	add	r2, r7
 8001f3c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001f40:	4413      	add	r3, r2
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	7ffb      	ldrb	r3, [r7, #31]
 8001f46:	b212      	sxth	r2, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	3320      	adds	r3, #32
 8001f4c:	443b      	add	r3, r7
 8001f4e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	3301      	adds	r3, #1
 8001f56:	77fb      	strb	r3, [r7, #31]
 8001f58:	7ffb      	ldrb	r3, [r7, #31]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d9e1      	bls.n	8001f22 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d829      	bhi.n	8001fbc <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8001f68:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001fa5 	.word	0x08001fa5
 8001f74:	08001fbd 	.word	0x08001fbd
 8001f78:	08001fbd 	.word	0x08001fbd
 8001f7c:	08001fbd 	.word	0x08001fbd
 8001f80:	08001fab 	.word	0x08001fab
 8001f84:	08001fbd 	.word	0x08001fbd
 8001f88:	08001fbd 	.word	0x08001fbd
 8001f8c:	08001fbd 	.word	0x08001fbd
 8001f90:	08001fb1 	.word	0x08001fb1
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	08001fbd 	.word	0x08001fbd
 8001f9c:	08001fbd 	.word	0x08001fbd
 8001fa0:	08001fb7 	.word	0x08001fb7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8001fa6:	61bb      	str	r3, [r7, #24]
    break;
 8001fa8:	e008      	b.n	8001fbc <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001fac:	61bb      	str	r3, [r7, #24]
    break;
 8001fae:	e005      	b.n	8001fbc <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001fb2:	61bb      	str	r3, [r7, #24]
    break;
 8001fb4:	e002      	b.n	8001fbc <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001fb8:	61bb      	str	r3, [r7, #24]
    break;    
 8001fba:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	77fb      	strb	r3, [r7, #31]
 8001fc0:	e016      	b.n	8001ff0 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	443b      	add	r3, r7
 8001fca:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd6:	7ffb      	ldrb	r3, [r7, #31]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	3301      	adds	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d9e5      	bls.n	8001fc2 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	410c0000 	.word	0x410c0000
 8002004:	418c0000 	.word	0x418c0000
 8002008:	420c0000 	.word	0x420c0000
 800200c:	428c0000 	.word	0x428c0000

08002010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201a:	2003      	movs	r0, #3
 800201c:	f000 f901 	bl	8002222 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002020:	200f      	movs	r0, #15
 8002022:	f7ff fdb3 	bl	8001b8c <HAL_InitTick>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	e001      	b.n	8002036 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002032:	f7ff fc31 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002036:	79fb      	ldrb	r3, [r7, #7]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000040 	.word	0x20000040
 8002064:	200005e8 	.word	0x200005e8

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200005e8 	.word	0x200005e8

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000040 	.word	0x20000040

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	@ (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	@ 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	4313      	orrs	r3, r2
         );
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	@ 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff4c 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800224a:	f7ff ff61 	bl	8002110 <__NVIC_GetPriorityGrouping>
 800224e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	6978      	ldr	r0, [r7, #20]
 8002256:	f7ff ffb1 	bl	80021bc <NVIC_EncodePriority>
 800225a:	4602      	mov	r2, r0
 800225c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff80 	bl	8002168 <__NVIC_SetPriority>
}
 8002268:	bf00      	nop
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff54 	bl	800212c <__NVIC_EnableIRQ>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e014      	b.n	80022c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fb1a 	bl	80018e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	795b      	ldrb	r3, [r3, #5]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_DAC_Start_DMA+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0ab      	b.n	8002446 <HAL_DAC_Start_DMA+0x176>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2202      	movs	r2, #2
 80022f8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12f      	bne.n	8002360 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_DAC_Start_DMA+0x180>)
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a51      	ldr	r2, [pc, #324]	@ (8002454 <HAL_DAC_Start_DMA+0x184>)
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a50      	ldr	r2, [pc, #320]	@ (8002458 <HAL_DAC_Start_DMA+0x188>)
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002326:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d013      	beq.n	8002356 <HAL_DAC_Start_DMA+0x86>
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d845      	bhi.n	80023c0 <HAL_DAC_Start_DMA+0xf0>
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_DAC_Start_DMA+0x72>
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d005      	beq.n	800234c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002340:	e03e      	b.n	80023c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3308      	adds	r3, #8
 8002348:	613b      	str	r3, [r7, #16]
        break;
 800234a:	e03c      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	613b      	str	r3, [r7, #16]
        break;
 8002354:	e037      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3310      	adds	r3, #16
 800235c:	613b      	str	r3, [r7, #16]
        break;
 800235e:	e032      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a3d      	ldr	r2, [pc, #244]	@ (800245c <HAL_DAC_Start_DMA+0x18c>)
 8002366:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a3c      	ldr	r2, [pc, #240]	@ (8002460 <HAL_DAC_Start_DMA+0x190>)
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a3b      	ldr	r2, [pc, #236]	@ (8002464 <HAL_DAC_Start_DMA+0x194>)
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002386:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b08      	cmp	r3, #8
 800238c:	d013      	beq.n	80023b6 <HAL_DAC_Start_DMA+0xe6>
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d817      	bhi.n	80023c4 <HAL_DAC_Start_DMA+0xf4>
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_DAC_Start_DMA+0xd2>
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d005      	beq.n	80023ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80023a0:	e010      	b.n	80023c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	613b      	str	r3, [r7, #16]
        break;
 80023aa:	e00c      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3318      	adds	r3, #24
 80023b2:	613b      	str	r3, [r7, #16]
        break;
 80023b4:	e007      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	331c      	adds	r3, #28
 80023bc:	613b      	str	r3, [r7, #16]
        break;
 80023be:	e002      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80023c0:	bf00      	nop
 80023c2:	e000      	b.n	80023c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80023c4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6898      	ldr	r0, [r3, #8]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	f000 fb0b 	bl	8002a00 <HAL_DMA_Start_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]
 80023ee:	e010      	b.n	8002412 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80023fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68d8      	ldr	r0, [r3, #12]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	f000 faf9 	bl	8002a00 <HAL_DMA_Start_IT>
 800240e:	4603      	mov	r3, r0
 8002410:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e005      	b.n	8002444 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f043 0204 	orr.w	r2, r3, #4
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	080028d9 	.word	0x080028d9
 8002454:	080028fb 	.word	0x080028fb
 8002458:	08002917 	.word	0x08002917
 800245c:	08002995 	.word	0x08002995
 8002460:	080029b7 	.word	0x080029b7
 8002464:	080029d3 	.word	0x080029d3

08002468 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	400a      	ands	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2201      	movs	r2, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fb1d 	bl	8002af6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e00c      	b.n	80024e8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fb0f 	bl	8002af6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80024e6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002508:	d120      	bne.n	800254c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002518:	d118      	bne.n	800254c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002534:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002544:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f870 	bl	800262c <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800255a:	d120      	bne.n	800259e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800256a:	d118      	bne.n	800259e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2204      	movs	r2, #4
 8002570:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002586:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002596:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f9f1 	bl	8002980 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b087      	sub	sp, #28
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3308      	adds	r3, #8
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e004      	b.n	80025da <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3314      	adds	r3, #20
 80025d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	461a      	mov	r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	795b      	ldrb	r3, [r3, #5]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_DAC_ConfigChannel+0x1c>
 8002658:	2302      	movs	r3, #2
 800265a:	e137      	b.n	80028cc <HAL_DAC_ConfigChannel+0x28c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b04      	cmp	r3, #4
 800266e:	f040 8081 	bne.w	8002774 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002672:	f7ff fcf9 	bl	8002068 <HAL_GetTick>
 8002676:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d140      	bne.n	8002700 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800267e:	e018      	b.n	80026b2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002680:	f7ff fcf2 	bl	8002068 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d911      	bls.n	80026b2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f043 0208 	orr.w	r2, r3, #8
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2203      	movs	r2, #3
 80026ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e10c      	b.n	80028cc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1df      	bne.n	8002680 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff fcdd 	bl	8002080 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	69d2      	ldr	r2, [r2, #28]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d0:	e023      	b.n	800271a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026d2:	f7ff fcc9 	bl	8002068 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d90f      	bls.n	8002700 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da0a      	bge.n	8002700 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f043 0208 	orr.w	r2, r3, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2203      	movs	r2, #3
 80026fa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0e5      	b.n	80028cc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002706:	2b00      	cmp	r3, #0
 8002708:	dbe3      	blt.n	80026d2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800270a:	2001      	movs	r0, #1
 800270c:	f7ff fcb8 	bl	8002080 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	69d2      	ldr	r2, [r2, #28]
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	ea02 0103 	and.w	r1, r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	21ff      	movs	r1, #255	@ 0xff
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	ea02 0103 	and.w	r1, r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d11d      	bne.n	80027b8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	221f      	movs	r2, #31
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	4013      	ands	r3, r2
 8002796:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027be:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2207      	movs	r2, #7
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	431a      	orrs	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43da      	mvns	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	400a      	ands	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	4013      	ands	r3, r2
 800283a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800285c:	d104      	bne.n	8002868 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e018      	b.n	800289a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	e00f      	b.n	800289a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800287a:	f002 f9c7 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 800287e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4a14      	ldr	r2, [pc, #80]	@ (80028d4 <HAL_DAC_ConfigChannel+0x294>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d904      	bls.n	8002892 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	e003      	b.n	800289a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002898:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	22c0      	movs	r2, #192	@ 0xc0
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	400a      	ands	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	04c4b400 	.word	0x04c4b400

080028d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fe82 	bl	80025f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	711a      	strb	r2, [r3, #4]
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fe7b 	bl	8002604 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fe71 	bl	8002618 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	711a      	strb	r2, [r3, #4]
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff ffce 	bl	8002944 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	711a      	strb	r2, [r3, #4]
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ffc7 	bl	8002958 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f043 0204 	orr.w	r2, r3, #4
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff ffbd 	bl	800296c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	711a      	strb	r2, [r3, #4]
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_DMA_Start_IT+0x20>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e066      	b.n	8002aee <HAL_DMA_Start_IT+0xee>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d155      	bne.n	8002ae0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f907 	bl	8002c6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 020e 	orr.w	r2, r2, #14
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e00f      	b.n	8002a98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 020a 	orr.w	r2, r2, #10
 8002a96:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002acc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e005      	b.n	8002aec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d008      	beq.n	8002b20 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e040      	b.n	8002ba2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 020e 	bic.w	r2, r2, #14
 8002b2e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b3e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	f003 021c 	and.w	r2, r3, #28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b62:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00c      	beq.n	8002b90 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b8e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d005      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e047      	b.n	8002c62 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f003 021c 	and.w	r2, r3, #28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c40:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    }
  }
  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c94:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f003 021c 	and.w	r2, r3, #28
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d108      	bne.n	8002ccc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cca:	e007      	b.n	8002cdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	e166      	b.n	8002fc6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8158 	beq.w	8002fc0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d005      	beq.n	8002d28 <HAL_GPIO_Init+0x40>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d130      	bne.n	8002d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5e:	2201      	movs	r2, #1
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0201 	and.w	r2, r3, #1
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d017      	beq.n	8002dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d123      	bne.n	8002e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	08da      	lsrs	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3208      	adds	r2, #8
 8002dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	6939      	ldr	r1, [r7, #16]
 8002e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0203 	and.w	r2, r3, #3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80b2 	beq.w	8002fc0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5c:	4b61      	ldr	r3, [pc, #388]	@ (8002fe4 <HAL_GPIO_Init+0x2fc>)
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	4a60      	ldr	r2, [pc, #384]	@ (8002fe4 <HAL_GPIO_Init+0x2fc>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e68:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe4 <HAL_GPIO_Init+0x2fc>)
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e74:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe8 <HAL_GPIO_Init+0x300>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e9e:	d02b      	beq.n	8002ef8 <HAL_GPIO_Init+0x210>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a52      	ldr	r2, [pc, #328]	@ (8002fec <HAL_GPIO_Init+0x304>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d025      	beq.n	8002ef4 <HAL_GPIO_Init+0x20c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a51      	ldr	r2, [pc, #324]	@ (8002ff0 <HAL_GPIO_Init+0x308>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01f      	beq.n	8002ef0 <HAL_GPIO_Init+0x208>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a50      	ldr	r2, [pc, #320]	@ (8002ff4 <HAL_GPIO_Init+0x30c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d019      	beq.n	8002eec <HAL_GPIO_Init+0x204>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff8 <HAL_GPIO_Init+0x310>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_GPIO_Init+0x200>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8002ffc <HAL_GPIO_Init+0x314>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_GPIO_Init+0x1fc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4d      	ldr	r2, [pc, #308]	@ (8003000 <HAL_GPIO_Init+0x318>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <HAL_GPIO_Init+0x1f8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4c      	ldr	r2, [pc, #304]	@ (8003004 <HAL_GPIO_Init+0x31c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_GPIO_Init+0x1f4>
 8002ed8:	2307      	movs	r3, #7
 8002eda:	e00e      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002edc:	2308      	movs	r3, #8
 8002ede:	e00c      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002ee0:	2306      	movs	r3, #6
 8002ee2:	e00a      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002ee4:	2305      	movs	r3, #5
 8002ee6:	e008      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e006      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002eec:	2303      	movs	r3, #3
 8002eee:	e004      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e002      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_GPIO_Init+0x212>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	f002 0203 	and.w	r2, r2, #3
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	4093      	lsls	r3, r2
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f0a:	4937      	ldr	r1, [pc, #220]	@ (8002fe8 <HAL_GPIO_Init+0x300>)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f18:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f3c:	4a32      	ldr	r2, [pc, #200]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f42:	4b31      	ldr	r3, [pc, #196]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f66:	4a28      	ldr	r2, [pc, #160]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f6c:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fba:	4a13      	ldr	r2, [pc, #76]	@ (8003008 <HAL_GPIO_Init+0x320>)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f ae91 	bne.w	8002cf8 <HAL_GPIO_Init+0x10>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	48000800 	.word	0x48000800
 8002ff4:	48000c00 	.word	0x48000c00
 8002ff8:	48001000 	.word	0x48001000
 8002ffc:	48001400 	.word	0x48001400
 8003000:	48001800 	.word	0x48001800
 8003004:	48001c00 	.word	0x48001c00
 8003008:	40010400 	.word	0x40010400

0800300c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800301a:	e0c9      	b.n	80031b0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800301c:	2201      	movs	r2, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80bc 	beq.w	80031aa <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003032:	4a66      	ldr	r2, [pc, #408]	@ (80031cc <HAL_GPIO_DeInit+0x1c0>)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	3302      	adds	r3, #2
 800303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	220f      	movs	r2, #15
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800305a:	d02b      	beq.n	80030b4 <HAL_GPIO_DeInit+0xa8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a5c      	ldr	r2, [pc, #368]	@ (80031d0 <HAL_GPIO_DeInit+0x1c4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d025      	beq.n	80030b0 <HAL_GPIO_DeInit+0xa4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a5b      	ldr	r2, [pc, #364]	@ (80031d4 <HAL_GPIO_DeInit+0x1c8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01f      	beq.n	80030ac <HAL_GPIO_DeInit+0xa0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a5a      	ldr	r2, [pc, #360]	@ (80031d8 <HAL_GPIO_DeInit+0x1cc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d019      	beq.n	80030a8 <HAL_GPIO_DeInit+0x9c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a59      	ldr	r2, [pc, #356]	@ (80031dc <HAL_GPIO_DeInit+0x1d0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <HAL_GPIO_DeInit+0x98>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <HAL_GPIO_DeInit+0x1d4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00d      	beq.n	80030a0 <HAL_GPIO_DeInit+0x94>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a57      	ldr	r2, [pc, #348]	@ (80031e4 <HAL_GPIO_DeInit+0x1d8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <HAL_GPIO_DeInit+0x90>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a56      	ldr	r2, [pc, #344]	@ (80031e8 <HAL_GPIO_DeInit+0x1dc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <HAL_GPIO_DeInit+0x8c>
 8003094:	2307      	movs	r3, #7
 8003096:	e00e      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 8003098:	2308      	movs	r3, #8
 800309a:	e00c      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 800309c:	2306      	movs	r3, #6
 800309e:	e00a      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 80030a0:	2305      	movs	r3, #5
 80030a2:	e008      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e004      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e002      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_GPIO_DeInit+0xaa>
 80030b4:	2300      	movs	r3, #0
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	f002 0203 	and.w	r2, r2, #3
 80030bc:	0092      	lsls	r2, r2, #2
 80030be:	4093      	lsls	r3, r2
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d132      	bne.n	800312c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80030c6:	4b49      	ldr	r3, [pc, #292]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4947      	ldr	r1, [pc, #284]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80030d4:	4b45      	ldr	r3, [pc, #276]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	43db      	mvns	r3, r3
 80030dc:	4943      	ldr	r1, [pc, #268]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030de:	4013      	ands	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80030e2:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4940      	ldr	r1, [pc, #256]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80030f0:	4b3e      	ldr	r3, [pc, #248]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	493c      	ldr	r1, [pc, #240]	@ (80031ec <HAL_GPIO_DeInit+0x1e0>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800310e:	4a2f      	ldr	r2, [pc, #188]	@ (80031cc <HAL_GPIO_DeInit+0x1c0>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43da      	mvns	r2, r3
 800311e:	482b      	ldr	r0, [pc, #172]	@ (80031cc <HAL_GPIO_DeInit+0x1c0>)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	400a      	ands	r2, r1
 8003126:	3302      	adds	r3, #2
 8003128:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2103      	movs	r1, #3
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	08da      	lsrs	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3208      	adds	r2, #8
 8003148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	08d2      	lsrs	r2, r2, #3
 8003160:	4019      	ands	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2103      	movs	r1, #3
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	2101      	movs	r1, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2103      	movs	r1, #3
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af2f 	bne.w	800301c <HAL_GPIO_DeInit+0x10>
  }
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40010000 	.word	0x40010000
 80031d0:	48000400 	.word	0x48000400
 80031d4:	48000800 	.word	0x48000800
 80031d8:	48000c00 	.word	0x48000c00
 80031dc:	48001000 	.word	0x48001000
 80031e0:	48001400 	.word	0x48001400
 80031e4:	48001800 	.word	0x48001800
 80031e8:	48001c00 	.word	0x48001c00
 80031ec:	40010400 	.word	0x40010400

080031f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe f8f4 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40010400 	.word	0x40010400

08003220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e08d      	b.n	800334e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe fb94 	bl	8001974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	@ 0x24
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	e006      	b.n	80032a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d108      	bne.n	80032c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	e007      	b.n	80032d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e021      	b.n	80033ac <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	@ 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7fe fb55 	bl	8001a30 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	4608      	mov	r0, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	461a      	mov	r2, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	817b      	strh	r3, [r7, #10]
 80033c6:	460b      	mov	r3, r1
 80033c8:	813b      	strh	r3, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	f040 80f9 	bne.w	80035ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_I2C_Mem_Write+0x34>
 80033e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0ed      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Mem_Write+0x4e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0e6      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800340a:	f7fe fe2d 	bl	8002068 <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fac3 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0d1      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2221      	movs	r2, #33	@ 0x21
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	@ 0x40
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800344c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003454:	88f8      	ldrh	r0, [r7, #6]
 8003456:	893a      	ldrh	r2, [r7, #8]
 8003458:	8979      	ldrh	r1, [r7, #10]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4603      	mov	r3, r0
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f9d3 	bl	8003810 <I2C_RequestMemoryWrite>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0a9      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2bff      	cmp	r3, #255	@ 0xff
 8003484:	d90e      	bls.n	80034a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	22ff      	movs	r2, #255	@ 0xff
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	2300      	movs	r3, #0
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fc47 	bl	8003d30 <I2C_TransferConfig>
 80034a2:	e00f      	b.n	80034c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	2300      	movs	r3, #0
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fc36 	bl	8003d30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fac6 	bl	8003a5a <I2C_WaitOnTXISFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e07b      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d034      	beq.n	800357c <HAL_I2C_Mem_Write+0x1c8>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d130      	bne.n	800357c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	@ 0x80
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fa3f 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e04d      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2bff      	cmp	r3, #255	@ 0xff
 800353c:	d90e      	bls.n	800355c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	@ 0xff
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003548:	b2da      	uxtb	r2, r3
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	2300      	movs	r3, #0
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fbeb 	bl	8003d30 <I2C_TransferConfig>
 800355a:	e00f      	b.n	800357c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356a:	b2da      	uxtb	r2, r3
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fbda 	bl	8003d30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d19e      	bne.n	80034c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 faac 	bl	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e01a      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <HAL_I2C_Mem_Write+0x224>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	fe00e800 	.word	0xfe00e800

080035dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	817b      	strh	r3, [r7, #10]
 80035ee:	460b      	mov	r3, r1
 80035f0:	813b      	strh	r3, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b20      	cmp	r3, #32
 8003600:	f040 80fd 	bne.w	80037fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_I2C_Mem_Read+0x34>
 800360a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003616:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0f1      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_I2C_Mem_Read+0x4e>
 8003626:	2302      	movs	r3, #2
 8003628:	e0ea      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003632:	f7fe fd19 	bl	8002068 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2319      	movs	r3, #25
 800363e:	2201      	movs	r2, #1
 8003640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f9af 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0d5      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2222      	movs	r2, #34	@ 0x22
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2240      	movs	r2, #64	@ 0x40
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003674:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800367c:	88f8      	ldrh	r0, [r7, #6]
 800367e:	893a      	ldrh	r2, [r7, #8]
 8003680:	8979      	ldrh	r1, [r7, #10]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4603      	mov	r3, r0
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f913 	bl	80038b8 <I2C_RequestMemoryRead>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0ad      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2bff      	cmp	r3, #255	@ 0xff
 80036ac:	d90e      	bls.n	80036cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	8979      	ldrh	r1, [r7, #10]
 80036bc:	4b52      	ldr	r3, [pc, #328]	@ (8003808 <HAL_I2C_Mem_Read+0x22c>)
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb33 	bl	8003d30 <I2C_TransferConfig>
 80036ca:	e00f      	b.n	80036ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	8979      	ldrh	r1, [r7, #10]
 80036de:	4b4a      	ldr	r3, [pc, #296]	@ (8003808 <HAL_I2C_Mem_Read+0x22c>)
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fb22 	bl	8003d30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	2200      	movs	r2, #0
 80036f4:	2104      	movs	r1, #4
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f956 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07c      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d034      	beq.n	80037ac <HAL_I2C_Mem_Read+0x1d0>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d130      	bne.n	80037ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	2200      	movs	r2, #0
 8003752:	2180      	movs	r1, #128	@ 0x80
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f927 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e04d      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2bff      	cmp	r3, #255	@ 0xff
 800376c:	d90e      	bls.n	800378c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	b2da      	uxtb	r2, r3
 800377a:	8979      	ldrh	r1, [r7, #10]
 800377c:	2300      	movs	r3, #0
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fad3 	bl	8003d30 <I2C_TransferConfig>
 800378a:	e00f      	b.n	80037ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	b2da      	uxtb	r2, r3
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	2300      	movs	r3, #0
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fac2 	bl	8003d30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d19a      	bne.n	80036ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f994 	bl	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e01a      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2220      	movs	r2, #32
 80037d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_I2C_Mem_Read+0x230>)
 80037de:	400b      	ands	r3, r1
 80037e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	80002400 	.word	0x80002400
 800380c:	fe00e800 	.word	0xfe00e800

08003810 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	4b20      	ldr	r3, [pc, #128]	@ (80038b4 <I2C_RequestMemoryWrite+0xa4>)
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fa79 	bl	8003d30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f909 	bl	8003a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e02c      	b.n	80038ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003858:	893b      	ldrh	r3, [r7, #8]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	629a      	str	r2, [r3, #40]	@ 0x28
 8003862:	e015      	b.n	8003890 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	b29b      	uxth	r3, r3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8ef 	bl	8003a5a <I2C_WaitOnTXISFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e012      	b.n	80038ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003886:	893b      	ldrh	r3, [r7, #8]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2200      	movs	r2, #0
 8003898:	2180      	movs	r1, #128	@ 0x80
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f884 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	80002000 	.word	0x80002000

080038b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	460b      	mov	r3, r1
 80038cc:	813b      	strh	r3, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	8979      	ldrh	r1, [r7, #10]
 80038d8:	4b20      	ldr	r3, [pc, #128]	@ (800395c <I2C_RequestMemoryRead+0xa4>)
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fa26 	bl	8003d30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	69b9      	ldr	r1, [r7, #24]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f8b6 	bl	8003a5a <I2C_WaitOnTXISFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e02c      	b.n	8003952 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d105      	bne.n	800390a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	629a      	str	r2, [r3, #40]	@ 0x28
 8003908:	e015      	b.n	8003936 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800390a:	893b      	ldrh	r3, [r7, #8]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	b29b      	uxth	r3, r3
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f89c 	bl	8003a5a <I2C_WaitOnTXISFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e012      	b.n	8003952 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2200      	movs	r2, #0
 800393e:	2140      	movs	r1, #64	@ 0x40
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f831 	bl	80039a8 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	80002000 	.word	0x80002000

08003960 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d103      	bne.n	800397e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d007      	beq.n	800399c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	619a      	str	r2, [r3, #24]
  }
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b8:	e03b      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f8d6 	bl	8003b70 <I2C_IsErrorOccurred>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d02d      	beq.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7fe fb47 	bl	8002068 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d122      	bne.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4013      	ands	r3, r2
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d113      	bne.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00f      	b.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d0b4      	beq.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a66:	e033      	b.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f87f 	bl	8003b70 <I2C_IsErrorOccurred>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e031      	b.n	8003ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d025      	beq.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fe faf0 	bl	8002068 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11a      	bne.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d013      	beq.n	8003ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e007      	b.n	8003ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d1c4      	bne.n	8003a68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af4:	e02f      	b.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f838 	bl	8003b70 <I2C_IsErrorOccurred>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e02d      	b.n	8003b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fe faad 	bl	8002068 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11a      	bne.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d013      	beq.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d1c8      	bne.n	8003af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	@ 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d068      	beq.n	8003c6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ba4:	e049      	b.n	8003c3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d045      	beq.n	8003c3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fa5b 	bl	8002068 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_IsErrorOccurred+0x54>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d13a      	bne.n	8003c3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be6:	d121      	bne.n	8003c2c <I2C_IsErrorOccurred+0xbc>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bee:	d01d      	beq.n	8003c2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d01a      	beq.n	8003c2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c06:	f7fe fa2f 	bl	8002068 <HAL_GetTick>
 8003c0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c0c:	e00e      	b.n	8003c2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c0e:	f7fe fa2b 	bl	8002068 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b19      	cmp	r3, #25
 8003c1a:	d907      	bls.n	8003c2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f043 0320 	orr.w	r3, r3, #32
 8003c22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c2a:	e006      	b.n	8003c3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d1e9      	bne.n	8003c0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d003      	beq.n	8003c50 <I2C_IsErrorOccurred+0xe0>
 8003c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0aa      	beq.n	8003ba6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f043 0308 	orr.w	r3, r3, #8
 8003ca8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01c      	beq.n	8003d1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fe3b 	bl	8003960 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <I2C_IsErrorOccurred+0x1bc>)
 8003cf6:	400b      	ands	r3, r1
 8003cf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	@ 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	fe00e800 	.word	0xfe00e800

08003d30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d48:	7a7b      	ldrb	r3, [r7, #9]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	0d5b      	lsrs	r3, r3, #21
 8003d6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d6e:	4b08      	ldr	r3, [pc, #32]	@ (8003d90 <I2C_TransferConfig+0x60>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	43db      	mvns	r3, r3
 8003d74:	ea02 0103 	and.w	r1, r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	03ff63ff 	.word	0x03ff63ff

08003d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d138      	bne.n	8003e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e032      	b.n	8003e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	@ 0x24
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d139      	bne.n	8003eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e033      	b.n	8003eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2224      	movs	r2, #36	@ 0x24
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0201 	orr.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed4:	d102      	bne.n	8003edc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eda:	e00b      	b.n	8003ef4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003edc:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eea:	d102      	bne.n	8003ef2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ef0:	e000      	b.n	8003ef4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003ef2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40007000 	.word	0x40007000

08003f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d141      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f12:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1e:	d131      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f20:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f26:	4a46      	ldr	r2, [pc, #280]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f30:	4b43      	ldr	r3, [pc, #268]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f38:	4a41      	ldr	r2, [pc, #260]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f40:	4b40      	ldr	r3, [pc, #256]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2232      	movs	r2, #50	@ 0x32
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	3301      	adds	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f56:	e002      	b.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5e:	4b38      	ldr	r3, [pc, #224]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6a:	d102      	bne.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f2      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f72:	4b33      	ldr	r3, [pc, #204]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7e:	d158      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e057      	b.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f84:	4b2e      	ldr	r3, [pc, #184]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f94:	e04d      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9c:	d141      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d131      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fac:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb2:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fbc:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2232      	movs	r2, #50	@ 0x32
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe2:	e002      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fea:	4b15      	ldr	r3, [pc, #84]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff6:	d102      	bne.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f2      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ffe:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400a:	d112      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e011      	b.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004016:	4a0a      	ldr	r2, [pc, #40]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004020:	e007      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004022:	4b07      	ldr	r3, [pc, #28]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800402a:	4a05      	ldr	r2, [pc, #20]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004030:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40007000 	.word	0x40007000
 8004044:	20000004 	.word	0x20000004
 8004048:	431bde83 	.word	0x431bde83

0800404c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f000 bc08 	b.w	8004870 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004060:	4b96      	ldr	r3, [pc, #600]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406a:	4b94      	ldr	r3, [pc, #592]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80e4 	beq.w	800424a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <HAL_RCC_OscConfig+0x4c>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b0c      	cmp	r3, #12
 800408c:	f040 808b 	bne.w	80041a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 8087 	bne.w	80041a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004098:	4b88      	ldr	r3, [pc, #544]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_OscConfig+0x64>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e3df      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	4b81      	ldr	r3, [pc, #516]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_RCC_OscConfig+0x7e>
 80040c0:	4b7e      	ldr	r3, [pc, #504]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040c8:	e005      	b.n	80040d6 <HAL_RCC_OscConfig+0x8a>
 80040ca:	4b7c      	ldr	r3, [pc, #496]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d223      	bcs.n	8004122 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fdfe 	bl	8004ce0 <RCC_SetFlashLatencyFromMSIRange>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e3c0      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ee:	4b73      	ldr	r3, [pc, #460]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a72      	ldr	r2, [pc, #456]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b70      	ldr	r3, [pc, #448]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	496d      	ldr	r1, [pc, #436]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800410c:	4b6b      	ldr	r3, [pc, #428]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	4968      	ldr	r1, [pc, #416]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	e025      	b.n	800416e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004122:	4b66      	ldr	r3, [pc, #408]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a65      	ldr	r2, [pc, #404]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004128:	f043 0308 	orr.w	r3, r3, #8
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b63      	ldr	r3, [pc, #396]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4960      	ldr	r1, [pc, #384]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004140:	4b5e      	ldr	r3, [pc, #376]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	495b      	ldr	r1, [pc, #364]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fdbe 	bl	8004ce0 <RCC_SetFlashLatencyFromMSIRange>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e380      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800416e:	f000 fcc1 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004172:	4602      	mov	r2, r0
 8004174:	4b51      	ldr	r3, [pc, #324]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	4950      	ldr	r1, [pc, #320]	@ (80042c0 <HAL_RCC_OscConfig+0x274>)
 8004180:	5ccb      	ldrb	r3, [r1, r3]
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a4e      	ldr	r2, [pc, #312]	@ (80042c4 <HAL_RCC_OscConfig+0x278>)
 800418c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800418e:	4b4e      	ldr	r3, [pc, #312]	@ (80042c8 <HAL_RCC_OscConfig+0x27c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd fcfa 	bl	8001b8c <HAL_InitTick>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d052      	beq.n	8004248 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	e364      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d032      	beq.n	8004214 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ae:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a42      	ldr	r2, [pc, #264]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ba:	f7fd ff55 	bl	8002068 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c2:	f7fd ff51 	bl	8002068 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e34d      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d4:	4b39      	ldr	r3, [pc, #228]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e0:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a35      	ldr	r2, [pc, #212]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041e6:	f043 0308 	orr.w	r3, r3, #8
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b33      	ldr	r3, [pc, #204]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4930      	ldr	r1, [pc, #192]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fe:	4b2f      	ldr	r3, [pc, #188]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	492b      	ldr	r1, [pc, #172]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
 8004212:	e01a      	b.n	800424a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004214:	4b29      	ldr	r3, [pc, #164]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a28      	ldr	r2, [pc, #160]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004220:	f7fd ff22 	bl	8002068 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004228:	f7fd ff1e 	bl	8002068 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e31a      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1dc>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d073      	beq.n	800433e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d005      	beq.n	8004268 <HAL_RCC_OscConfig+0x21c>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d10e      	bne.n	8004280 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d10b      	bne.n	8004280 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	4b14      	ldr	r3, [pc, #80]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d063      	beq.n	800433c <HAL_RCC_OscConfig+0x2f0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d15f      	bne.n	800433c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e2f7      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x24c>
 800428a:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a0b      	ldr	r2, [pc, #44]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e025      	b.n	80042e4 <HAL_RCC_OscConfig+0x298>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042a0:	d114      	bne.n	80042cc <HAL_RCC_OscConfig+0x280>
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b03      	ldr	r3, [pc, #12]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a02      	ldr	r2, [pc, #8]	@ (80042bc <HAL_RCC_OscConfig+0x270>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e013      	b.n	80042e4 <HAL_RCC_OscConfig+0x298>
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08009670 	.word	0x08009670
 80042c4:	20000004 	.word	0x20000004
 80042c8:	2000003c 	.word	0x2000003c
 80042cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b9d      	ldr	r3, [pc, #628]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a9c      	ldr	r2, [pc, #624]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd febc 	bl	8002068 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd feb8 	bl	8002068 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	@ 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e2b4      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004306:	4b92      	ldr	r3, [pc, #584]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x2a8>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fea8 	bl	8002068 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fea4 	bl	8002068 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e2a0      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432e:	4b88      	ldr	r3, [pc, #544]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x2d0>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d060      	beq.n	800440c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x310>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d119      	bne.n	800438a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d116      	bne.n	800438a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435c:	4b7c      	ldr	r3, [pc, #496]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x328>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e27d      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b76      	ldr	r3, [pc, #472]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	4973      	ldr	r1, [pc, #460]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004388:	e040      	b.n	800440c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d023      	beq.n	80043da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004392:	4b6f      	ldr	r3, [pc, #444]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6e      	ldr	r2, [pc, #440]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd fe63 	bl	8002068 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fd fe5f 	bl	8002068 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e25b      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b8:	4b65      	ldr	r3, [pc, #404]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c4:	4b62      	ldr	r3, [pc, #392]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	495f      	ldr	r1, [pc, #380]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
 80043d8:	e018      	b.n	800440c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043da:	4b5d      	ldr	r3, [pc, #372]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a5c      	ldr	r2, [pc, #368]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80043e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fd fe3f 	bl	8002068 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ee:	f7fd fe3b 	bl	8002068 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e237      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004400:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d03c      	beq.n	8004492 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01c      	beq.n	800445a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004420:	4b4b      	ldr	r3, [pc, #300]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004426:	4a4a      	ldr	r2, [pc, #296]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd fe1a 	bl	8002068 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fd fe16 	bl	8002068 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e212      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444a:	4b41      	ldr	r3, [pc, #260]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ef      	beq.n	8004438 <HAL_RCC_OscConfig+0x3ec>
 8004458:	e01b      	b.n	8004492 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445a:	4b3d      	ldr	r3, [pc, #244]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004460:	4a3b      	ldr	r2, [pc, #236]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fd fdfd 	bl	8002068 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004472:	f7fd fdf9 	bl	8002068 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1f5      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004484:	4b32      	ldr	r3, [pc, #200]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1ef      	bne.n	8004472 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80a6 	beq.w	80045ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a0:	2300      	movs	r3, #0
 80044a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b4:	4a26      	ldr	r2, [pc, #152]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80044bc:	4b24      	ldr	r3, [pc, #144]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044cc:	4b21      	ldr	r3, [pc, #132]	@ (8004554 <HAL_RCC_OscConfig+0x508>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d118      	bne.n	800450a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004554 <HAL_RCC_OscConfig+0x508>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_RCC_OscConfig+0x508>)
 80044de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e4:	f7fd fdc0 	bl	8002068 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fd fdbc 	bl	8002068 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1b8      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <HAL_RCC_OscConfig+0x508>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_RCC_OscConfig+0x4d8>
 8004512:	4b0f      	ldr	r3, [pc, #60]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004518:	4a0d      	ldr	r2, [pc, #52]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004522:	e029      	b.n	8004578 <HAL_RCC_OscConfig+0x52c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d115      	bne.n	8004558 <HAL_RCC_OscConfig+0x50c>
 800452c:	4b08      	ldr	r3, [pc, #32]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004532:	4a07      	ldr	r2, [pc, #28]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800453c:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004542:	4a03      	ldr	r2, [pc, #12]	@ (8004550 <HAL_RCC_OscConfig+0x504>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800454c:	e014      	b.n	8004578 <HAL_RCC_OscConfig+0x52c>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	40007000 	.word	0x40007000
 8004558:	4b9d      	ldr	r3, [pc, #628]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455e:	4a9c      	ldr	r2, [pc, #624]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004568:	4b99      	ldr	r3, [pc, #612]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	4a98      	ldr	r2, [pc, #608]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d016      	beq.n	80045ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd fd72 	bl	8002068 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004586:	e00a      	b.n	800459e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004588:	f7fd fd6e 	bl	8002068 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e168      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459e:	4b8c      	ldr	r3, [pc, #560]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ed      	beq.n	8004588 <HAL_RCC_OscConfig+0x53c>
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fd fd5b 	bl	8002068 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fd fd57 	bl	8002068 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e151      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045cc:	4b80      	ldr	r3, [pc, #512]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1ed      	bne.n	80045b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045da:	7ffb      	ldrb	r3, [r7, #31]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d105      	bne.n	80045ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e0:	4b7b      	ldr	r3, [pc, #492]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e4:	4a7a      	ldr	r2, [pc, #488]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 80045e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d03c      	beq.n	8004672 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01c      	beq.n	800463a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004600:	4b73      	ldr	r3, [pc, #460]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004606:	4a72      	ldr	r2, [pc, #456]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd fd2a 	bl	8002068 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004618:	f7fd fd26 	bl	8002068 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e122      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800462a:	4b69      	ldr	r3, [pc, #420]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800462c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ef      	beq.n	8004618 <HAL_RCC_OscConfig+0x5cc>
 8004638:	e01b      	b.n	8004672 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800463a:	4b65      	ldr	r3, [pc, #404]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800463c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004640:	4a63      	ldr	r2, [pc, #396]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fd fd0d 	bl	8002068 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004652:	f7fd fd09 	bl	8002068 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e105      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004664:	4b5a      	ldr	r3, [pc, #360]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ef      	bne.n	8004652 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80f9 	beq.w	800486e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	2b02      	cmp	r3, #2
 8004682:	f040 80cf 	bne.w	8004824 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004686:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0203 	and.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	429a      	cmp	r2, r3
 8004698:	d12c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	3b01      	subs	r3, #1
 80046a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d123      	bne.n	80046f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d11b      	bne.n	80046f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d113      	bne.n	80046f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	3b01      	subs	r3, #1
 80046da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d109      	bne.n	80046f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	3b01      	subs	r3, #1
 80046ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d071      	beq.n	80047d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d068      	beq.n	80047cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046fa:	4b35      	ldr	r3, [pc, #212]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004706:	4b32      	ldr	r3, [pc, #200]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0ac      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004716:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800471c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004720:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004722:	f7fd fca1 	bl	8002068 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472a:	f7fd fc9d 	bl	8002068 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e099      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004748:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <HAL_RCC_OscConfig+0x788>)
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004758:	3a01      	subs	r2, #1
 800475a:	0112      	lsls	r2, r2, #4
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004762:	0212      	lsls	r2, r2, #8
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800476a:	0852      	lsrs	r2, r2, #1
 800476c:	3a01      	subs	r2, #1
 800476e:	0552      	lsls	r2, r2, #21
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004782:	06d2      	lsls	r2, r2, #27
 8004784:	430a      	orrs	r2, r1
 8004786:	4912      	ldr	r1, [pc, #72]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004788:	4313      	orrs	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800478c:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0f      	ldr	r2, [pc, #60]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004798:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4a0c      	ldr	r2, [pc, #48]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 800479e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047a4:	f7fd fc60 	bl	8002068 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fd fc5c 	bl	8002068 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e058      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <HAL_RCC_OscConfig+0x784>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ca:	e050      	b.n	800486e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e04f      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d8:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d144      	bne.n	800486e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047e4:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 80047ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f0:	4b21      	ldr	r3, [pc, #132]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a20      	ldr	r2, [pc, #128]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047fc:	f7fd fc34 	bl	8002068 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fd fc30 	bl	8002068 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e02c      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x7b8>
 8004822:	e024      	b.n	800486e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d01f      	beq.n	800486a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b13      	ldr	r3, [pc, #76]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a12      	ldr	r2, [pc, #72]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 8004830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd fc17 	bl	8002068 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483e:	f7fd fc13 	bl	8002068 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e00f      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004850:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f0      	bne.n	800483e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	4905      	ldr	r1, [pc, #20]	@ (8004878 <HAL_RCC_OscConfig+0x82c>)
 8004862:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_OscConfig+0x830>)
 8004864:	4013      	ands	r3, r2
 8004866:	60cb      	str	r3, [r1, #12]
 8004868:	e001      	b.n	800486e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	feeefffc 	.word	0xfeeefffc

08004880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e11d      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b90      	ldr	r3, [pc, #576]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d910      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b8d      	ldr	r3, [pc, #564]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 020f 	bic.w	r2, r3, #15
 80048ae:	498b      	ldr	r1, [pc, #556]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b89      	ldr	r3, [pc, #548]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e105      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	4b81      	ldr	r3, [pc, #516]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d908      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	497b      	ldr	r1, [pc, #492]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d079      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d11e      	bne.n	8004948 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490a:	4b75      	ldr	r3, [pc, #468]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0dc      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800491a:	f000 fa3b 	bl	8004d94 <RCC_GetSysClockFreqFromPLLSource>
 800491e:	4603      	mov	r3, r0
 8004920:	4a70      	ldr	r2, [pc, #448]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d946      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004926:	4b6e      	ldr	r3, [pc, #440]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d140      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004932:	4b6b      	ldr	r3, [pc, #428]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800493a:	4a69      	ldr	r2, [pc, #420]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 800493c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004940:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	e035      	b.n	80049b4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d107      	bne.n	8004960 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004950:	4b63      	ldr	r3, [pc, #396]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d115      	bne.n	8004988 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0b9      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004968:	4b5d      	ldr	r3, [pc, #372]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0ad      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004978:	4b59      	ldr	r3, [pc, #356]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0a5      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004988:	f000 f8b4 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 800498c:	4603      	mov	r3, r0
 800498e:	4a55      	ldr	r2, [pc, #340]	@ (8004ae4 <HAL_RCC_ClockConfig+0x264>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d90f      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004994:	4b52      	ldr	r3, [pc, #328]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049a0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049a8:	4a4d      	ldr	r2, [pc, #308]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049b4:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 0203 	bic.w	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4947      	ldr	r1, [pc, #284]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c6:	f7fd fb4f 	bl	8002068 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049cc:	e00a      	b.n	80049e4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ce:	f7fd fb4b 	bl	8002068 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049dc:	4293      	cmp	r3, r2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e077      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 020c 	and.w	r2, r3, #12
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d1eb      	bne.n	80049ce <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b80      	cmp	r3, #128	@ 0x80
 80049fa:	d105      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049fc:	4b38      	ldr	r3, [pc, #224]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a37      	ldr	r2, [pc, #220]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d010      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d208      	bcs.n	8004a36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a24:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	492b      	ldr	r1, [pc, #172]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a36:	4b29      	ldr	r3, [pc, #164]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d210      	bcs.n	8004a66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a44:	4b25      	ldr	r3, [pc, #148]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 020f 	bic.w	r2, r3, #15
 8004a4c:	4923      	ldr	r1, [pc, #140]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a54:	4b21      	ldr	r3, [pc, #132]	@ (8004adc <HAL_RCC_ClockConfig+0x25c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d001      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e036      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a72:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4918      	ldr	r1, [pc, #96]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a90:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4910      	ldr	r1, [pc, #64]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa4:	f000 f826 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <HAL_RCC_ClockConfig+0x260>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	490c      	ldr	r1, [pc, #48]	@ (8004ae8 <HAL_RCC_ClockConfig+0x268>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8004aec <HAL_RCC_ClockConfig+0x26c>)
 8004ac2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <HAL_RCC_ClockConfig+0x270>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fd f85f 	bl	8001b8c <HAL_InitTick>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40022000 	.word	0x40022000
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	04c4b400 	.word	0x04c4b400
 8004ae8:	08009670 	.word	0x08009670
 8004aec:	20000004 	.word	0x20000004
 8004af0:	2000003c 	.word	0x2000003c

08004af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	@ 0x24
 8004af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b02:	4b3e      	ldr	r3, [pc, #248]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x34>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d121      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d11e      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b28:	4b34      	ldr	r3, [pc, #208]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b34:	4b31      	ldr	r3, [pc, #196]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	e005      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b44:	4b2d      	ldr	r3, [pc, #180]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b50:	4a2b      	ldr	r2, [pc, #172]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10d      	bne.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d102      	bne.n	8004b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b6c:	4b25      	ldr	r3, [pc, #148]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e004      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b78:	4b23      	ldr	r3, [pc, #140]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d134      	bne.n	8004bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b82:	4b1e      	ldr	r3, [pc, #120]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8004b98:	e005      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b9c:	617b      	str	r3, [r7, #20]
      break;
 8004b9e:	e005      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ba0:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ba2:	617b      	str	r3, [r7, #20]
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	617b      	str	r3, [r7, #20]
      break;
 8004baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bac:	4b13      	ldr	r3, [pc, #76]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bba:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	fb03 f202 	mul.w	r2, r3, r2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	0e5b      	lsrs	r3, r3, #25
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bec:	69bb      	ldr	r3, [r7, #24]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3724      	adds	r7, #36	@ 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	08009688 	.word	0x08009688
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000004 	.word	0x20000004

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b06      	ldr	r3, [pc, #24]	@ (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4904      	ldr	r1, [pc, #16]	@ (8004c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	08009680 	.word	0x08009680

08004c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c54:	f7ff ffda 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0adb      	lsrs	r3, r3, #11
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4904      	ldr	r1, [pc, #16]	@ (8004c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	08009680 	.word	0x08009680

08004c7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	220f      	movs	r2, #15
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c8c:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0203 	and.w	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004cbe:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <HAL_RCC_GetClockConfig+0x60>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40022000 	.word	0x40022000

08004ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cec:	4b27      	ldr	r3, [pc, #156]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cf8:	f7ff f8e4 	bl	8003ec4 <HAL_PWREx_GetVoltageRange>
 8004cfc:	6178      	str	r0, [r7, #20]
 8004cfe:	e014      	b.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b22      	ldr	r3, [pc, #136]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d04:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d18:	f7ff f8d4 	bl	8003ec4 <HAL_PWREx_GetVoltageRange>
 8004d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d22:	4a1a      	ldr	r2, [pc, #104]	@ (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d30:	d10b      	bne.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b80      	cmp	r3, #128	@ 0x80
 8004d36:	d913      	bls.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d3c:	d902      	bls.n	8004d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d3e:	2302      	movs	r3, #2
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e00d      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d44:	2301      	movs	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	e00a      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d4e:	d902      	bls.n	8004d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004d50:	2302      	movs	r3, #2
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e004      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b70      	cmp	r3, #112	@ 0x70
 8004d5a:	d101      	bne.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 020f 	bic.w	r2, r3, #15
 8004d68:	4909      	ldr	r1, [pc, #36]	@ (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d001      	beq.n	8004d82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40022000 	.word	0x40022000

08004d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d00b      	beq.n	8004dc2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d825      	bhi.n	8004dfc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d008      	beq.n	8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11f      	bne.n	8004dfc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004dbe:	613b      	str	r3, [r7, #16]
    break;
 8004dc0:	e01f      	b.n	8004e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004dc2:	4b25      	ldr	r3, [pc, #148]	@ (8004e58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004dc4:	613b      	str	r3, [r7, #16]
    break;
 8004dc6:	e01c      	b.n	8004e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc8:	4b21      	ldr	r3, [pc, #132]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e005      	b.n	8004df0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004df0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	613b      	str	r3, [r7, #16]
    break;
 8004dfa:	e002      	b.n	8004e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
    break;
 8004e00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e02:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	fb03 f202 	mul.w	r2, r3, r2
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e28:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	0e5b      	lsrs	r3, r3, #25
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	3301      	adds	r3, #1
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e42:	683b      	ldr	r3, [r7, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40021000 	.word	0x40021000
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	007a1200 	.word	0x007a1200
 8004e5c:	08009688 	.word	0x08009688

08004e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e68:	2300      	movs	r3, #0
 8004e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d040      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d02a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e84:	2b80      	cmp	r3, #128	@ 0x80
 8004e86:	d825      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e88:	2b60      	cmp	r3, #96	@ 0x60
 8004e8a:	d026      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e8c:	2b60      	cmp	r3, #96	@ 0x60
 8004e8e:	d821      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d006      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d81d      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004ea0:	e018      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ea2:	4b89      	ldr	r3, [pc, #548]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4a88      	ldr	r2, [pc, #544]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eae:	e015      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fb02 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec0:	e00c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3320      	adds	r3, #32
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fbed 	bl	80056a8 <RCCEx_PLLSAI2_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ee2:	4b79      	ldr	r3, [pc, #484]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ee8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef0:	4975      	ldr	r1, [pc, #468]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004ef8:	e001      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d047      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f12:	d030      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f18:	d82a      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f1e:	d02a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f24:	d824      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f30:	d81e      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f3c:	e018      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f3e:	4b62      	ldr	r3, [pc, #392]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4a61      	ldr	r2, [pc, #388]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f4a:	e015      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fab4 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f5c:	e00c      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3320      	adds	r3, #32
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fb9f 	bl	80056a8 <RCCEx_PLLSAI2_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	74fb      	strb	r3, [r7, #19]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7e:	4b52      	ldr	r3, [pc, #328]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	494e      	ldr	r1, [pc, #312]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004f94:	e001      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 809f 	beq.w	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fac:	4b46      	ldr	r3, [pc, #280]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc6:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fce:	4b3e      	ldr	r3, [pc, #248]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fea:	f7fd f83d 	bl	8002068 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ff0:	e009      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff2:	f7fd f839 	bl	8002068 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d902      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	74fb      	strb	r3, [r7, #19]
        break;
 8005004:	e005      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005006:	4b31      	ldr	r3, [pc, #196]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ef      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d15b      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005018:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005022:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01f      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	429a      	cmp	r2, r3
 8005034:	d019      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005036:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005040:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005042:	4b21      	ldr	r3, [pc, #132]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005048:	4a1f      	ldr	r2, [pc, #124]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005052:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005062:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d016      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fc fff8 	bl	8002068 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	e00b      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fc fff4 	bl	8002068 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d902      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	74fb      	strb	r3, [r7, #19]
            break;
 8005092:	e006      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ec      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10c      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a8:	4b07      	ldr	r3, [pc, #28]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	4903      	ldr	r1, [pc, #12]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	74bb      	strb	r3, [r7, #18]
 80050c6:	e005      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d4:	7c7b      	ldrb	r3, [r7, #17]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4ba0      	ldr	r3, [pc, #640]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	4a9f      	ldr	r2, [pc, #636]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f2:	4b9a      	ldr	r3, [pc, #616]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f023 0203 	bic.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005100:	4996      	ldr	r1, [pc, #600]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005114:	4b91      	ldr	r3, [pc, #580]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f023 020c 	bic.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	498e      	ldr	r1, [pc, #568]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005136:	4b89      	ldr	r3, [pc, #548]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005144:	4985      	ldr	r1, [pc, #532]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005158:	4b80      	ldr	r3, [pc, #512]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005166:	497d      	ldr	r1, [pc, #500]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800517a:	4b78      	ldr	r3, [pc, #480]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005188:	4974      	ldr	r1, [pc, #464]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519c:	4b6f      	ldr	r3, [pc, #444]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	496c      	ldr	r1, [pc, #432]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b67      	ldr	r3, [pc, #412]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051cc:	4963      	ldr	r1, [pc, #396]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051e0:	4b5e      	ldr	r3, [pc, #376]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ee:	495b      	ldr	r1, [pc, #364]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005202:	4b56      	ldr	r3, [pc, #344]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005210:	4952      	ldr	r1, [pc, #328]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005224:	4b4d      	ldr	r3, [pc, #308]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005232:	494a      	ldr	r1, [pc, #296]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005246:	4b45      	ldr	r3, [pc, #276]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	4941      	ldr	r1, [pc, #260]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005268:	4b3c      	ldr	r3, [pc, #240]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005276:	4939      	ldr	r1, [pc, #228]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800528a:	4b34      	ldr	r3, [pc, #208]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005298:	4930      	ldr	r1, [pc, #192]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052a8:	d106      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052aa:	4b2c      	ldr	r3, [pc, #176]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052b4:	60d3      	str	r3, [r2, #12]
 80052b6:	e011      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f8f9 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d04d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f0:	d108      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80052f2:	4b1a      	ldr	r3, [pc, #104]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f8:	4a18      	ldr	r2, [pc, #96]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005302:	e012      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005304:	4b15      	ldr	r3, [pc, #84]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800530a:	4a14      	ldr	r2, [pc, #80]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005310:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005314:	4b11      	ldr	r3, [pc, #68]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005322:	490e      	ldr	r1, [pc, #56]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005332:	d106      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005334:	4b09      	ldr	r3, [pc, #36]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a08      	ldr	r2, [pc, #32]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533e:	60d3      	str	r3, [r2, #12]
 8005340:	e020      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800534a:	d109      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800534c:	4b03      	ldr	r3, [pc, #12]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a02      	ldr	r2, [pc, #8]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005356:	60d3      	str	r3, [r2, #12]
 8005358:	e014      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005368:	d10c      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3304      	adds	r3, #4
 800536e:	2101      	movs	r1, #1
 8005370:	4618      	mov	r0, r3
 8005372:	f000 f8a5 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d028      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005390:	4b4a      	ldr	r3, [pc, #296]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800539e:	4947      	ldr	r1, [pc, #284]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ae:	d106      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b42      	ldr	r3, [pc, #264]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a41      	ldr	r2, [pc, #260]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	e011      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	2101      	movs	r1, #1
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f876 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01e      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ee:	4b33      	ldr	r3, [pc, #204]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fe:	492f      	ldr	r1, [pc, #188]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800540c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005410:	d10c      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2102      	movs	r1, #2
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f851 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00b      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005438:	4b20      	ldr	r3, [pc, #128]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800543e:	f023 0204 	bic.w	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005448:	491c      	ldr	r1, [pc, #112]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800545c:	4b17      	ldr	r3, [pc, #92]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005462:	f023 0218 	bic.w	r2, r3, #24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546c:	4913      	ldr	r1, [pc, #76]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d017      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005480:	4b0e      	ldr	r3, [pc, #56]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005490:	490a      	ldr	r1, [pc, #40]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800549e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a4:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a04      	ldr	r2, [pc, #16]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000

080054c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ce:	4b72      	ldr	r3, [pc, #456]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054da:	4b6f      	ldr	r3, [pc, #444]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0203 	and.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d103      	bne.n	80054f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
       ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d142      	bne.n	8005578 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e03f      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d018      	beq.n	8005532 <RCCEx_PLLSAI1_Config+0x72>
 8005500:	2b03      	cmp	r3, #3
 8005502:	d825      	bhi.n	8005550 <RCCEx_PLLSAI1_Config+0x90>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d002      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x4e>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d009      	beq.n	8005520 <RCCEx_PLLSAI1_Config+0x60>
 800550c:	e020      	b.n	8005550 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550e:	4b62      	ldr	r3, [pc, #392]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11d      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e01a      	b.n	8005556 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005520:	4b5d      	ldr	r3, [pc, #372]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005530:	e013      	b.n	800555a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005532:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553e:	4b56      	ldr	r3, [pc, #344]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554e:	e006      	b.n	800555e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e004      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800555e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005566:	4b4c      	ldr	r3, [pc, #304]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 0203 	bic.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4949      	ldr	r1, [pc, #292]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 8086 	bne.w	800568c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005580:	4b45      	ldr	r3, [pc, #276]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a44      	ldr	r2, [pc, #272]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800558a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558c:	f7fc fd6c 	bl	8002068 <HAL_GetTick>
 8005590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005592:	e009      	b.n	80055a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005594:	f7fc fd68 	bl	8002068 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d902      	bls.n	80055a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	73fb      	strb	r3, [r7, #15]
        break;
 80055a6:	e005      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1ef      	bne.n	8005594 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d168      	bne.n	800568c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d113      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c0:	4b35      	ldr	r3, [pc, #212]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	4b35      	ldr	r3, [pc, #212]	@ (800569c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68d2      	ldr	r2, [r2, #12]
 80055d2:	06d2      	lsls	r2, r2, #27
 80055d4:	4311      	orrs	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	3a01      	subs	r2, #1
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	430a      	orrs	r2, r1
 80055e0:	492d      	ldr	r1, [pc, #180]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	610b      	str	r3, [r1, #16]
 80055e6:	e02d      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d115      	bne.n	800561a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	4b2b      	ldr	r3, [pc, #172]	@ (80056a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6892      	ldr	r2, [r2, #8]
 80055fa:	0211      	lsls	r1, r2, #8
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6912      	ldr	r2, [r2, #16]
 8005600:	0852      	lsrs	r2, r2, #1
 8005602:	3a01      	subs	r2, #1
 8005604:	0552      	lsls	r2, r2, #21
 8005606:	4311      	orrs	r1, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6852      	ldr	r2, [r2, #4]
 800560c:	3a01      	subs	r2, #1
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	430a      	orrs	r2, r1
 8005612:	4921      	ldr	r1, [pc, #132]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
 8005618:	e014      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800561a:	4b1f      	ldr	r3, [pc, #124]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	4b21      	ldr	r3, [pc, #132]	@ (80056a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6892      	ldr	r2, [r2, #8]
 8005626:	0211      	lsls	r1, r2, #8
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6952      	ldr	r2, [r2, #20]
 800562c:	0852      	lsrs	r2, r2, #1
 800562e:	3a01      	subs	r2, #1
 8005630:	0652      	lsls	r2, r2, #25
 8005632:	4311      	orrs	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6852      	ldr	r2, [r2, #4]
 8005638:	3a01      	subs	r2, #1
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	430a      	orrs	r2, r1
 800563e:	4916      	ldr	r1, [pc, #88]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005644:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a13      	ldr	r2, [pc, #76]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800564a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800564e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fc fd0a 	bl	8002068 <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005658:	f7fc fd06 	bl	8002068 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
          break;
 800566a:	e005      	b.n	8005678 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800566c:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ef      	beq.n	8005658 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800567e:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	4904      	ldr	r1, [pc, #16]	@ (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005688:	4313      	orrs	r3, r2
 800568a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	07ff800f 	.word	0x07ff800f
 80056a0:	ff9f800f 	.word	0xff9f800f
 80056a4:	f9ff800f 	.word	0xf9ff800f

080056a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b6:	4b72      	ldr	r3, [pc, #456]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00e      	beq.n	80056e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0203 	and.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d103      	bne.n	80056da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
       ||
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d142      	bne.n	8005760 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
 80056de:	e03f      	b.n	8005760 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d018      	beq.n	800571a <RCCEx_PLLSAI2_Config+0x72>
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d825      	bhi.n	8005738 <RCCEx_PLLSAI2_Config+0x90>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <RCCEx_PLLSAI2_Config+0x4e>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d009      	beq.n	8005708 <RCCEx_PLLSAI2_Config+0x60>
 80056f4:	e020      	b.n	8005738 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056f6:	4b62      	ldr	r3, [pc, #392]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11d      	bne.n	800573e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005706:	e01a      	b.n	800573e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005708:	4b5d      	ldr	r3, [pc, #372]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005718:	e013      	b.n	8005742 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800571a:	4b59      	ldr	r3, [pc, #356]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005726:	4b56      	ldr	r3, [pc, #344]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005736:	e006      	b.n	8005746 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e004      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005746:	bf00      	nop
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800574e:	4b4c      	ldr	r3, [pc, #304]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4949      	ldr	r1, [pc, #292]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 8086 	bne.w	8005874 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005768:	4b45      	ldr	r3, [pc, #276]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a44      	ldr	r2, [pc, #272]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005774:	f7fc fc78 	bl	8002068 <HAL_GetTick>
 8005778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800577a:	e009      	b.n	8005790 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800577c:	f7fc fc74 	bl	8002068 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d902      	bls.n	8005790 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	73fb      	strb	r3, [r7, #15]
        break;
 800578e:	e005      	b.n	800579c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005790:	4b3b      	ldr	r3, [pc, #236]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ef      	bne.n	800577c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d168      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d113      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a8:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	4b35      	ldr	r3, [pc, #212]	@ (8005884 <RCCEx_PLLSAI2_Config+0x1dc>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6892      	ldr	r2, [r2, #8]
 80057b4:	0211      	lsls	r1, r2, #8
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	06d2      	lsls	r2, r2, #27
 80057bc:	4311      	orrs	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6852      	ldr	r2, [r2, #4]
 80057c2:	3a01      	subs	r2, #1
 80057c4:	0112      	lsls	r2, r2, #4
 80057c6:	430a      	orrs	r2, r1
 80057c8:	492d      	ldr	r1, [pc, #180]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	614b      	str	r3, [r1, #20]
 80057ce:	e02d      	b.n	800582c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d115      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	4b2b      	ldr	r3, [pc, #172]	@ (8005888 <RCCEx_PLLSAI2_Config+0x1e0>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	0211      	lsls	r1, r2, #8
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6912      	ldr	r2, [r2, #16]
 80057e8:	0852      	lsrs	r2, r2, #1
 80057ea:	3a01      	subs	r2, #1
 80057ec:	0552      	lsls	r2, r2, #21
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	3a01      	subs	r2, #1
 80057f6:	0112      	lsls	r2, r2, #4
 80057f8:	430a      	orrs	r2, r1
 80057fa:	4921      	ldr	r1, [pc, #132]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	614b      	str	r3, [r1, #20]
 8005800:	e014      	b.n	800582c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005802:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	4b21      	ldr	r3, [pc, #132]	@ (800588c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	0211      	lsls	r1, r2, #8
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6952      	ldr	r2, [r2, #20]
 8005814:	0852      	lsrs	r2, r2, #1
 8005816:	3a01      	subs	r2, #1
 8005818:	0652      	lsls	r2, r2, #25
 800581a:	4311      	orrs	r1, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6852      	ldr	r2, [r2, #4]
 8005820:	3a01      	subs	r2, #1
 8005822:	0112      	lsls	r2, r2, #4
 8005824:	430a      	orrs	r2, r1
 8005826:	4916      	ldr	r1, [pc, #88]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005828:	4313      	orrs	r3, r2
 800582a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a13      	ldr	r2, [pc, #76]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc fc16 	bl	8002068 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800583e:	e009      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005840:	f7fc fc12 	bl	8002068 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d902      	bls.n	8005854 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	73fb      	strb	r3, [r7, #15]
          break;
 8005852:	e005      	b.n	8005860 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ef      	beq.n	8005840 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005866:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	4904      	ldr	r1, [pc, #16]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005870:	4313      	orrs	r3, r2
 8005872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	07ff800f 	.word	0x07ff800f
 8005888:	ff9f800f 	.word	0xff9f800f
 800588c:	f9ff800f 	.word	0xf9ff800f

08005890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e049      	b.n	8005936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc f8de 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fa9e 	bl	8005e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e04f      	b.n	80059f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a23      	ldr	r2, [pc, #140]	@ (8005a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005982:	d018      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1f      	ldr	r2, [pc, #124]	@ (8005a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1e      	ldr	r2, [pc, #120]	@ (8005a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a19      	ldr	r2, [pc, #100]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d115      	bne.n	80059e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	4b17      	ldr	r3, [pc, #92]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80059be:	4013      	ands	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d015      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ce:	d011      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e0:	e008      	b.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e000      	b.n	80059f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	00010007 	.word	0x00010007

08005a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0202 	mvn.w	r2, #2
 8005a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9b2 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9a4 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f9b5 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0204 	mvn.w	r2, #4
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f98c 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f97e 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f98f 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0208 	mvn.w	r2, #8
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2204      	movs	r2, #4
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f966 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f958 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f969 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d020      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01b      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f940 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f932 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f943 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb fcc4 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fafd 	bl	80061b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00c      	beq.n	8005bde <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 faf5 	bl	80061c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00c      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8fd 	bl	8005dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00c      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f06f 0220 	mvn.w	r2, #32
 8005c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fabd 	bl	80061a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_TIM_ConfigClockSource+0x1c>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e0b6      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x18a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c68:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c86:	d03e      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xd8>
 8005c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c8c:	f200 8087 	bhi.w	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c94:	f000 8086 	beq.w	8005da4 <HAL_TIM_ConfigClockSource+0x176>
 8005c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c9c:	d87f      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005c9e:	2b70      	cmp	r3, #112	@ 0x70
 8005ca0:	d01a      	beq.n	8005cd8 <HAL_TIM_ConfigClockSource+0xaa>
 8005ca2:	2b70      	cmp	r3, #112	@ 0x70
 8005ca4:	d87b      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005ca6:	2b60      	cmp	r3, #96	@ 0x60
 8005ca8:	d050      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0x11e>
 8005caa:	2b60      	cmp	r3, #96	@ 0x60
 8005cac:	d877      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005cae:	2b50      	cmp	r3, #80	@ 0x50
 8005cb0:	d03c      	beq.n	8005d2c <HAL_TIM_ConfigClockSource+0xfe>
 8005cb2:	2b50      	cmp	r3, #80	@ 0x50
 8005cb4:	d873      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d058      	beq.n	8005d6c <HAL_TIM_ConfigClockSource+0x13e>
 8005cba:	2b40      	cmp	r3, #64	@ 0x40
 8005cbc:	d86f      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005cbe:	2b30      	cmp	r3, #48	@ 0x30
 8005cc0:	d064      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x15e>
 8005cc2:	2b30      	cmp	r3, #48	@ 0x30
 8005cc4:	d86b      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d060      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x15e>
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d867      	bhi.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05c      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x15e>
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d05a      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0x15e>
 8005cd6:	e062      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce8:	f000 f9b2 	bl	8006050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cfa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e04f      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d16:	f000 f99b 	bl	8006050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d28:	609a      	str	r2, [r3, #8]
      break;
 8005d2a:	e03c      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f000 f90f 	bl	8005f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2150      	movs	r1, #80	@ 0x50
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 f968 	bl	800601a <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e02c      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f000 f92e 	bl	8005fba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2160      	movs	r1, #96	@ 0x60
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f958 	bl	800601a <TIM_ITRx_SetConfig>
      break;
 8005d6a:	e01c      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f000 f8ef 	bl	8005f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2140      	movs	r1, #64	@ 0x40
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f948 	bl	800601a <TIM_ITRx_SetConfig>
      break;
 8005d8a:	e00c      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 f93f 	bl	800601a <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e003      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
      break;
 8005da2:	e000      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005da4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a46      	ldr	r2, [pc, #280]	@ (8005f3c <TIM_Base_SetConfig+0x12c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	d00f      	beq.n	8005e50 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a43      	ldr	r2, [pc, #268]	@ (8005f40 <TIM_Base_SetConfig+0x130>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <TIM_Base_SetConfig+0x40>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a42      	ldr	r2, [pc, #264]	@ (8005f44 <TIM_Base_SetConfig+0x134>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_Base_SetConfig+0x40>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a41      	ldr	r2, [pc, #260]	@ (8005f48 <TIM_Base_SetConfig+0x138>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_Base_SetConfig+0x40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a40      	ldr	r2, [pc, #256]	@ (8005f4c <TIM_Base_SetConfig+0x13c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d108      	bne.n	8005e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <TIM_Base_SetConfig+0x12c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e70:	d01b      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a32      	ldr	r2, [pc, #200]	@ (8005f40 <TIM_Base_SetConfig+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d017      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a31      	ldr	r2, [pc, #196]	@ (8005f44 <TIM_Base_SetConfig+0x134>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a30      	ldr	r2, [pc, #192]	@ (8005f48 <TIM_Base_SetConfig+0x138>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f4c <TIM_Base_SetConfig+0x13c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2e      	ldr	r2, [pc, #184]	@ (8005f50 <TIM_Base_SetConfig+0x140>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f54 <TIM_Base_SetConfig+0x144>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_Base_SetConfig+0x9a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f58 <TIM_Base_SetConfig+0x148>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d108      	bne.n	8005ebc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <TIM_Base_SetConfig+0x12c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <TIM_Base_SetConfig+0xf8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <TIM_Base_SetConfig+0x13c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_Base_SetConfig+0xf8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <TIM_Base_SetConfig+0x140>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_Base_SetConfig+0xf8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a16      	ldr	r2, [pc, #88]	@ (8005f54 <TIM_Base_SetConfig+0x144>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_Base_SetConfig+0xf8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <TIM_Base_SetConfig+0x148>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d103      	bne.n	8005f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d105      	bne.n	8005f2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	611a      	str	r2, [r3, #16]
  }
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800

08005f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f023 030a 	bic.w	r3, r3, #10
 8005f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b087      	sub	sp, #28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f023 0210 	bic.w	r2, r3, #16
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	031b      	lsls	r3, r3, #12
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	f043 0307 	orr.w	r3, r3, #7
 800603c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800606a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	431a      	orrs	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4313      	orrs	r3, r2
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e068      	b.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2d      	ldr	r2, [pc, #180]	@ (800618c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d108      	bne.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80060e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1e      	ldr	r2, [pc, #120]	@ (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01d      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611a:	d018      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1b      	ldr	r2, [pc, #108]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1a      	ldr	r2, [pc, #104]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00e      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a18      	ldr	r2, [pc, #96]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a13      	ldr	r2, [pc, #76]	@ (800618c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d10c      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4313      	orrs	r3, r2
 800615e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40012c00 	.word	0x40012c00
 800618c:	40013400 	.word	0x40013400
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40014000 	.word	0x40014000

080061a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e042      	b.n	8006274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7fb fc5d 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2224      	movs	r2, #36	@ 0x24
 800620a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ff14 	bl	8007054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fc15 	bl	8006a5c <UART_SetConfig>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e01b      	b.n	8006274 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800624a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800625a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 ff93 	bl	8007198 <UART_CheckIdleState>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006292:	2b20      	cmp	r3, #32
 8006294:	d17b      	bne.n	800638e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_UART_Transmit+0x26>
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e074      	b.n	8006390 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2221      	movs	r2, #33	@ 0x21
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b6:	f7fb fed7 	bl	8002068 <HAL_GetTick>
 80062ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d4:	d108      	bne.n	80062e8 <HAL_UART_Transmit+0x6c>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d104      	bne.n	80062e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	e003      	b.n	80062f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062f0:	e030      	b.n	8006354 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2200      	movs	r2, #0
 80062fa:	2180      	movs	r1, #128	@ 0x80
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fff5 	bl	80072ec <UART_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e03d      	b.n	8006390 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006326:	b292      	uxth	r2, r2
 8006328:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	3302      	adds	r3, #2
 800632e:	61bb      	str	r3, [r7, #24]
 8006330:	e007      	b.n	8006342 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	781a      	ldrb	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1c8      	bne.n	80062f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	2140      	movs	r1, #64	@ 0x40
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 ffbe 	bl	80072ec <UART_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e006      	b.n	8006390 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b0ba      	sub	sp, #232	@ 0xe8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80063c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063c6:	4013      	ands	r3, r2
 80063c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80063cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11b      	bne.n	800640c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d015      	beq.n	800640c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8300 	beq.w	8006a02 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
      }
      return;
 800640a:	e2fa      	b.n	8006a02 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800640c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8123 	beq.w	800665c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006416:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800641a:	4b8d      	ldr	r3, [pc, #564]	@ (8006650 <HAL_UART_IRQHandler+0x2b8>)
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006426:	4b8b      	ldr	r3, [pc, #556]	@ (8006654 <HAL_UART_IRQHandler+0x2bc>)
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8116 	beq.w	800665c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d011      	beq.n	8006460 <HAL_UART_IRQHandler+0xc8>
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2201      	movs	r2, #1
 800644e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d011      	beq.n	8006490 <HAL_UART_IRQHandler+0xf8>
 800646c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2202      	movs	r2, #2
 800647e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006486:	f043 0204 	orr.w	r2, r3, #4
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d011      	beq.n	80064c0 <HAL_UART_IRQHandler+0x128>
 800649c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2204      	movs	r2, #4
 80064ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b6:	f043 0202 	orr.w	r2, r3, #2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d017      	beq.n	80064fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006650 <HAL_UART_IRQHandler+0x2b8>)
 80064de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2208      	movs	r2, #8
 80064ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f2:	f043 0208 	orr.w	r2, r3, #8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006504:	2b00      	cmp	r3, #0
 8006506:	d012      	beq.n	800652e <HAL_UART_IRQHandler+0x196>
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00c      	beq.n	800652e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800651c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8266 	beq.w	8006a06 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006574:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d005      	beq.n	8006592 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800658a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800658e:	2b00      	cmp	r3, #0
 8006590:	d054      	beq.n	800663c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 ff17 	bl	80073c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a2:	2b40      	cmp	r3, #64	@ 0x40
 80065a4:	d146      	bne.n	8006634 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1d9      	bne.n	80065a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d017      	beq.n	800662c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006602:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <HAL_UART_IRQHandler+0x2c0>)
 8006604:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800660c:	4618      	mov	r0, r3
 800660e:	f7fc face 	bl	8002bae <HAL_DMA_Abort_IT>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d019      	beq.n	800664c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006626:	4610      	mov	r0, r2
 8006628:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662a:	e00f      	b.n	800664c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f9ff 	bl	8006a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006632:	e00b      	b.n	800664c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f9fb 	bl	8006a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663a:	e007      	b.n	800664c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9f7 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800664a:	e1dc      	b.n	8006a06 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	bf00      	nop
    return;
 800664e:	e1da      	b.n	8006a06 <HAL_UART_IRQHandler+0x66e>
 8006650:	10000001 	.word	0x10000001
 8006654:	04000120 	.word	0x04000120
 8006658:	08007493 	.word	0x08007493

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006660:	2b01      	cmp	r3, #1
 8006662:	f040 8170 	bne.w	8006946 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8169 	beq.w	8006946 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8162 	beq.w	8006946 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2210      	movs	r2, #16
 8006688:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006694:	2b40      	cmp	r3, #64	@ 0x40
 8006696:	f040 80d8 	bne.w	800684a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80af 	beq.w	8006810 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066bc:	429a      	cmp	r2, r3
 80066be:	f080 80a7 	bcs.w	8006810 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 8087 	bne.w	80067ee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800670a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800670e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1da      	bne.n	80066e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800673a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3308      	adds	r3, #8
 800674a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800674e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006752:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006756:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e1      	bne.n	800672a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3308      	adds	r3, #8
 8006786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800678a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800678c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006790:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e3      	bne.n	8006766 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e4      	bne.n	80067ac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fc f984 	bl	8002af6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006800:	b29b      	uxth	r3, r3
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	b29b      	uxth	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f91b 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800680e:	e0fc      	b.n	8006a0a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800681a:	429a      	cmp	r2, r3
 800681c:	f040 80f5 	bne.w	8006a0a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b20      	cmp	r3, #32
 8006830:	f040 80eb 	bne.w	8006a0a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f8fe 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
      return;
 8006848:	e0df      	b.n	8006a0a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006856:	b29b      	uxth	r3, r3
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80d1 	beq.w	8006a0e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800686c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80cc 	beq.w	8006a0e <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800688a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006898:	647b      	str	r3, [r7, #68]	@ 0x44
 800689a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800689e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e4      	bne.n	8006876 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	623b      	str	r3, [r7, #32]
   return(result);
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80068d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e1      	bne.n	80068ac <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60fb      	str	r3, [r7, #12]
   return(result);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 0310 	bic.w	r3, r3, #16
 8006910:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	69b9      	ldr	r1, [r7, #24]
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	617b      	str	r3, [r7, #20]
   return(result);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e4      	bne.n	80068fc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f880 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006944:	e063      	b.n	8006a0e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00e      	beq.n	8006970 <HAL_UART_IRQHandler+0x5d8>
 8006952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006966:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fdd3 	bl	8007514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800696e:	e051      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006978:	2b00      	cmp	r3, #0
 800697a:	d014      	beq.n	80069a6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006984:	2b00      	cmp	r3, #0
 8006986:	d105      	bne.n	8006994 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800698c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006998:	2b00      	cmp	r3, #0
 800699a:	d03a      	beq.n	8006a12 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
    }
    return;
 80069a4:	e035      	b.n	8006a12 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <HAL_UART_IRQHandler+0x62e>
 80069b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fd7d 	bl	80074be <UART_EndTransmit_IT>
    return;
 80069c4:	e026      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_UART_IRQHandler+0x64e>
 80069d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fdac 	bl	800753c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069e4:	e016      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d010      	beq.n	8006a14 <HAL_UART_IRQHandler+0x67c>
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da0c      	bge.n	8006a14 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fd94 	bl	8007528 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a00:	e008      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
      return;
 8006a02:	bf00      	nop
 8006a04:	e006      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
    return;
 8006a06:	bf00      	nop
 8006a08:	e004      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
      return;
 8006a0a:	bf00      	nop
 8006a0c:	e002      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
      return;
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <HAL_UART_IRQHandler+0x67c>
    return;
 8006a12:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a14:	37e8      	adds	r7, #232	@ 0xe8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop

08006a1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a60:	b08c      	sub	sp, #48	@ 0x30
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4baa      	ldr	r3, [pc, #680]	@ (8006d34 <UART_SetConfig+0x2d8>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a9f      	ldr	r2, [pc, #636]	@ (8006d38 <UART_SetConfig+0x2dc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006ad2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	f023 010f 	bic.w	r1, r3, #15
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a90      	ldr	r2, [pc, #576]	@ (8006d3c <UART_SetConfig+0x2e0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d125      	bne.n	8006b4c <UART_SetConfig+0xf0>
 8006b00:	4b8f      	ldr	r3, [pc, #572]	@ (8006d40 <UART_SetConfig+0x2e4>)
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d81a      	bhi.n	8006b44 <UART_SetConfig+0xe8>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <UART_SetConfig+0xb8>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b25 	.word	0x08006b25
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b3d 	.word	0x08006b3d
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e116      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e112      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006b34:	2304      	movs	r3, #4
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3a:	e10e      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e10a      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e106      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a7c      	ldr	r2, [pc, #496]	@ (8006d44 <UART_SetConfig+0x2e8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d138      	bne.n	8006bc8 <UART_SetConfig+0x16c>
 8006b56:	4b7a      	ldr	r3, [pc, #488]	@ (8006d40 <UART_SetConfig+0x2e4>)
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b5c:	f003 030c 	and.w	r3, r3, #12
 8006b60:	2b0c      	cmp	r3, #12
 8006b62:	d82d      	bhi.n	8006bc0 <UART_SetConfig+0x164>
 8006b64:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <UART_SetConfig+0x110>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006bc1 	.word	0x08006bc1
 8006b74:	08006bc1 	.word	0x08006bc1
 8006b78:	08006bc1 	.word	0x08006bc1
 8006b7c:	08006bb1 	.word	0x08006bb1
 8006b80:	08006bc1 	.word	0x08006bc1
 8006b84:	08006bc1 	.word	0x08006bc1
 8006b88:	08006bc1 	.word	0x08006bc1
 8006b8c:	08006ba9 	.word	0x08006ba9
 8006b90:	08006bc1 	.word	0x08006bc1
 8006b94:	08006bc1 	.word	0x08006bc1
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e0d8      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e0d4      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e0d0      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e0cc      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e0c8      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8006d48 <UART_SetConfig+0x2ec>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d125      	bne.n	8006c1e <UART_SetConfig+0x1c2>
 8006bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d40 <UART_SetConfig+0x2e4>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bdc:	2b30      	cmp	r3, #48	@ 0x30
 8006bde:	d016      	beq.n	8006c0e <UART_SetConfig+0x1b2>
 8006be0:	2b30      	cmp	r3, #48	@ 0x30
 8006be2:	d818      	bhi.n	8006c16 <UART_SetConfig+0x1ba>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d00a      	beq.n	8006bfe <UART_SetConfig+0x1a2>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d814      	bhi.n	8006c16 <UART_SetConfig+0x1ba>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <UART_SetConfig+0x19a>
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d008      	beq.n	8006c06 <UART_SetConfig+0x1aa>
 8006bf4:	e00f      	b.n	8006c16 <UART_SetConfig+0x1ba>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfc:	e0ad      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c04:	e0a9      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c06:	2304      	movs	r3, #4
 8006c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0c:	e0a5      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c0e:	2308      	movs	r3, #8
 8006c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c14:	e0a1      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c16:	2310      	movs	r3, #16
 8006c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1c:	e09d      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a4a      	ldr	r2, [pc, #296]	@ (8006d4c <UART_SetConfig+0x2f0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d125      	bne.n	8006c74 <UART_SetConfig+0x218>
 8006c28:	4b45      	ldr	r3, [pc, #276]	@ (8006d40 <UART_SetConfig+0x2e4>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c34:	d016      	beq.n	8006c64 <UART_SetConfig+0x208>
 8006c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c38:	d818      	bhi.n	8006c6c <UART_SetConfig+0x210>
 8006c3a:	2b80      	cmp	r3, #128	@ 0x80
 8006c3c:	d00a      	beq.n	8006c54 <UART_SetConfig+0x1f8>
 8006c3e:	2b80      	cmp	r3, #128	@ 0x80
 8006c40:	d814      	bhi.n	8006c6c <UART_SetConfig+0x210>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <UART_SetConfig+0x1f0>
 8006c46:	2b40      	cmp	r3, #64	@ 0x40
 8006c48:	d008      	beq.n	8006c5c <UART_SetConfig+0x200>
 8006c4a:	e00f      	b.n	8006c6c <UART_SetConfig+0x210>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e082      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c54:	2302      	movs	r3, #2
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e07e      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e07a      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c64:	2308      	movs	r3, #8
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e076      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c72:	e072      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a35      	ldr	r2, [pc, #212]	@ (8006d50 <UART_SetConfig+0x2f4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d12a      	bne.n	8006cd4 <UART_SetConfig+0x278>
 8006c7e:	4b30      	ldr	r3, [pc, #192]	@ (8006d40 <UART_SetConfig+0x2e4>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c8c:	d01a      	beq.n	8006cc4 <UART_SetConfig+0x268>
 8006c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c92:	d81b      	bhi.n	8006ccc <UART_SetConfig+0x270>
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c98:	d00c      	beq.n	8006cb4 <UART_SetConfig+0x258>
 8006c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c9e:	d815      	bhi.n	8006ccc <UART_SetConfig+0x270>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <UART_SetConfig+0x250>
 8006ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca8:	d008      	beq.n	8006cbc <UART_SetConfig+0x260>
 8006caa:	e00f      	b.n	8006ccc <UART_SetConfig+0x270>
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb2:	e052      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cba:	e04e      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc2:	e04a      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cca:	e046      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd2:	e042      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a17      	ldr	r2, [pc, #92]	@ (8006d38 <UART_SetConfig+0x2dc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d13a      	bne.n	8006d54 <UART_SetConfig+0x2f8>
 8006cde:	4b18      	ldr	r3, [pc, #96]	@ (8006d40 <UART_SetConfig+0x2e4>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cec:	d01a      	beq.n	8006d24 <UART_SetConfig+0x2c8>
 8006cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cf2:	d81b      	bhi.n	8006d2c <UART_SetConfig+0x2d0>
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf8:	d00c      	beq.n	8006d14 <UART_SetConfig+0x2b8>
 8006cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cfe:	d815      	bhi.n	8006d2c <UART_SetConfig+0x2d0>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <UART_SetConfig+0x2b0>
 8006d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d08:	d008      	beq.n	8006d1c <UART_SetConfig+0x2c0>
 8006d0a:	e00f      	b.n	8006d2c <UART_SetConfig+0x2d0>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e022      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006d14:	2302      	movs	r3, #2
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	e01e      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d22:	e01a      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006d24:	2308      	movs	r3, #8
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2a:	e016      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d32:	e012      	b.n	8006d5a <UART_SetConfig+0x2fe>
 8006d34:	cfff69f3 	.word	0xcfff69f3
 8006d38:	40008000 	.word	0x40008000
 8006d3c:	40013800 	.word	0x40013800
 8006d40:	40021000 	.word	0x40021000
 8006d44:	40004400 	.word	0x40004400
 8006d48:	40004800 	.word	0x40004800
 8006d4c:	40004c00 	.word	0x40004c00
 8006d50:	40005000 	.word	0x40005000
 8006d54:	2310      	movs	r3, #16
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4aae      	ldr	r2, [pc, #696]	@ (8007018 <UART_SetConfig+0x5bc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	f040 8097 	bne.w	8006e94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d823      	bhi.n	8006db6 <UART_SetConfig+0x35a>
 8006d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d74 <UART_SetConfig+0x318>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08006db7 	.word	0x08006db7
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006db7 	.word	0x08006db7
 8006d84:	08006da7 	.word	0x08006da7
 8006d88:	08006db7 	.word	0x08006db7
 8006d8c:	08006db7 	.word	0x08006db7
 8006d90:	08006db7 	.word	0x08006db7
 8006d94:	08006daf 	.word	0x08006daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d98:	f7fd ff44 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d9e:	e010      	b.n	8006dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da0:	4b9e      	ldr	r3, [pc, #632]	@ (800701c <UART_SetConfig+0x5c0>)
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006da4:	e00d      	b.n	8006dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da6:	f7fd fea5 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8006daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dac:	e009      	b.n	8006dc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006db4:	e005      	b.n	8006dc2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006dc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8130 	beq.w	800702a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	4a94      	ldr	r2, [pc, #592]	@ (8007020 <UART_SetConfig+0x5c4>)
 8006dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ddc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d305      	bcc.n	8006dfa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d903      	bls.n	8006e02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e00:	e113      	b.n	800702a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	2200      	movs	r2, #0
 8006e06:	60bb      	str	r3, [r7, #8]
 8006e08:	60fa      	str	r2, [r7, #12]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	4a84      	ldr	r2, [pc, #528]	@ (8007020 <UART_SetConfig+0x5c4>)
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2200      	movs	r2, #0
 8006e18:	603b      	str	r3, [r7, #0]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e24:	f7f9 fe5a 	bl	8000adc <__aeabi_uldivmod>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	f04f 0300 	mov.w	r3, #0
 8006e38:	020b      	lsls	r3, r1, #8
 8006e3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e3e:	0202      	lsls	r2, r0, #8
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	6849      	ldr	r1, [r1, #4]
 8006e44:	0849      	lsrs	r1, r1, #1
 8006e46:	2000      	movs	r0, #0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	eb12 0804 	adds.w	r8, r2, r4
 8006e50:	eb43 0905 	adc.w	r9, r3, r5
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	469a      	mov	sl, r3
 8006e5c:	4693      	mov	fp, r2
 8006e5e:	4652      	mov	r2, sl
 8006e60:	465b      	mov	r3, fp
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fe39 	bl	8000adc <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4613      	mov	r3, r2
 8006e70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e78:	d308      	bcc.n	8006e8c <UART_SetConfig+0x430>
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e80:	d204      	bcs.n	8006e8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a3a      	ldr	r2, [r7, #32]
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e0ce      	b.n	800702a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e92:	e0ca      	b.n	800702a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e9c:	d166      	bne.n	8006f6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d827      	bhi.n	8006ef6 <UART_SetConfig+0x49a>
 8006ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eac <UART_SetConfig+0x450>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	08006ef7 	.word	0x08006ef7
 8006ebc:	08006ee7 	.word	0x08006ee7
 8006ec0:	08006ef7 	.word	0x08006ef7
 8006ec4:	08006ef7 	.word	0x08006ef7
 8006ec8:	08006ef7 	.word	0x08006ef7
 8006ecc:	08006eef 	.word	0x08006eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed0:	f7fd fea8 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006ed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ed6:	e014      	b.n	8006f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed8:	f7fd feba 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 8006edc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ede:	e010      	b.n	8006f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800701c <UART_SetConfig+0x5c0>)
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ee4:	e00d      	b.n	8006f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ee6:	f7fd fe05 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8006eea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eec:	e009      	b.n	8006f02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ef4:	e005      	b.n	8006f02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8090 	beq.w	800702a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	4a44      	ldr	r2, [pc, #272]	@ (8007020 <UART_SetConfig+0x5c4>)
 8006f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f1c:	005a      	lsls	r2, r3, #1
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	441a      	add	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	d916      	bls.n	8006f64 <UART_SetConfig+0x508>
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f3c:	d212      	bcs.n	8006f64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f023 030f 	bic.w	r3, r3, #15
 8006f46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	8bfb      	ldrh	r3, [r7, #30]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	8bfa      	ldrh	r2, [r7, #30]
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e062      	b.n	800702a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f6a:	e05e      	b.n	800702a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d828      	bhi.n	8006fc6 <UART_SetConfig+0x56a>
 8006f74:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <UART_SetConfig+0x520>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fd fe40 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fa6:	e014      	b.n	8006fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fd fe52 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 8006fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800701c <UART_SetConfig+0x5c0>)
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fd fd9d 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8006fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fc4:	e005      	b.n	8006fd2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d028      	beq.n	800702a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fdc:	4a10      	ldr	r2, [pc, #64]	@ (8007020 <UART_SetConfig+0x5c4>)
 8006fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	441a      	add	r2, r3
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	d910      	bls.n	8007024 <UART_SetConfig+0x5c8>
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007008:	d20c      	bcs.n	8007024 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	b29a      	uxth	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60da      	str	r2, [r3, #12]
 8007014:	e009      	b.n	800702a <UART_SetConfig+0x5ce>
 8007016:	bf00      	nop
 8007018:	40008000 	.word	0x40008000
 800701c:	00f42400 	.word	0x00f42400
 8007020:	080096b8 	.word	0x080096b8
      }
      else
      {
        ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2201      	movs	r2, #1
 800702e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2201      	movs	r2, #1
 8007036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2200      	movs	r2, #0
 8007044:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007046:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800704a:	4618      	mov	r0, r3
 800704c:	3730      	adds	r7, #48	@ 0x30
 800704e:	46bd      	mov	sp, r7
 8007050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01a      	beq.n	800716a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007152:	d10a      	bne.n	800716a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b098      	sub	sp, #96	@ 0x60
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071a8:	f7fa ff5e 	bl	8002068 <HAL_GetTick>
 80071ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d12f      	bne.n	800721c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c4:	2200      	movs	r2, #0
 80071c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f88e 	bl	80072ec <UART_WaitOnFlagUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d022      	beq.n	800721c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e063      	b.n	80072e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b04      	cmp	r3, #4
 8007228:	d149      	bne.n	80072be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800722a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007232:	2200      	movs	r2, #0
 8007234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f857 	bl	80072ec <UART_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d03c      	beq.n	80072be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	623b      	str	r3, [r7, #32]
   return(result);
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007262:	633b      	str	r3, [r7, #48]	@ 0x30
 8007264:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	60fb      	str	r3, [r7, #12]
   return(result);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007296:	61fa      	str	r2, [r7, #28]
 8007298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	69b9      	ldr	r1, [r7, #24]
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	617b      	str	r3, [r7, #20]
   return(result);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e012      	b.n	80072e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3758      	adds	r7, #88	@ 0x58
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	4613      	mov	r3, r2
 80072fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072fc:	e04f      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d04b      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007306:	f7fa feaf 	bl	8002068 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	429a      	cmp	r2, r3
 8007314:	d302      	bcc.n	800731c <UART_WaitOnFlagUntilTimeout+0x30>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e04e      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d037      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0xb2>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d034      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b40      	cmp	r3, #64	@ 0x40
 8007338:	d031      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b08      	cmp	r3, #8
 8007346:	d110      	bne.n	800736a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2208      	movs	r2, #8
 800734e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f838 	bl	80073c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2208      	movs	r2, #8
 800735a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e029      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007378:	d111      	bne.n	800739e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f81e 	bl	80073c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e00f      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4013      	ands	r3, r2
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	bf0c      	ite	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	2300      	movne	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d0a0      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b095      	sub	sp, #84	@ 0x54
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007424:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007426:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800742a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e3      	bne.n	8007400 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d118      	bne.n	8007472 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	60bb      	str	r3, [r7, #8]
   return(result);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f023 0310 	bic.w	r3, r3, #16
 8007454:	647b      	str	r3, [r7, #68]	@ 0x44
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	613b      	str	r3, [r7, #16]
   return(result);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007486:	bf00      	nop
 8007488:	3754      	adds	r7, #84	@ 0x54
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fabd 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b088      	sub	sp, #32
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6979      	ldr	r1, [r7, #20]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	613b      	str	r3, [r7, #16]
   return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e6      	bne.n	80074c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fa88 	bl	8006a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750c:	bf00      	nop
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UARTEx_DisableFifoMode+0x16>
 8007562:	2302      	movs	r3, #2
 8007564:	e027      	b.n	80075b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2224      	movs	r2, #36	@ 0x24
 8007572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0201 	bic.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007594:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e02d      	b.n	8007636 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2224      	movs	r2, #36	@ 0x24
 80075e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f850 	bl	80076bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007652:	2302      	movs	r3, #2
 8007654:	e02d      	b.n	80076b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2224      	movs	r2, #36	@ 0x24
 8007662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f812 	bl	80076bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d108      	bne.n	80076de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076dc:	e031      	b.n	8007742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076de:	2308      	movs	r3, #8
 80076e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076e2:	2308      	movs	r3, #8
 80076e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	0e5b      	lsrs	r3, r3, #25
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	0f5b      	lsrs	r3, r3, #29
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	7b3a      	ldrb	r2, [r7, #12]
 800770a:	4911      	ldr	r1, [pc, #68]	@ (8007750 <UARTEx_SetNbDataToProcess+0x94>)
 800770c:	5c8a      	ldrb	r2, [r1, r2]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007712:	7b3a      	ldrb	r2, [r7, #12]
 8007714:	490f      	ldr	r1, [pc, #60]	@ (8007754 <UARTEx_SetNbDataToProcess+0x98>)
 8007716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007718:	fb93 f3f2 	sdiv	r3, r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	7b7a      	ldrb	r2, [r7, #13]
 8007728:	4909      	ldr	r1, [pc, #36]	@ (8007750 <UARTEx_SetNbDataToProcess+0x94>)
 800772a:	5c8a      	ldrb	r2, [r1, r2]
 800772c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007730:	7b7a      	ldrb	r2, [r7, #13]
 8007732:	4908      	ldr	r1, [pc, #32]	@ (8007754 <UARTEx_SetNbDataToProcess+0x98>)
 8007734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007736:	fb93 f3f2 	sdiv	r3, r3, r2
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	080096d0 	.word	0x080096d0
 8007754:	080096d8 	.word	0x080096d8

08007758 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800776a:	2b84      	cmp	r3, #132	@ 0x84
 800776c:	d005      	beq.n	800777a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800776e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	3303      	adds	r3, #3
 8007778:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800777a:	68fb      	ldr	r3, [r7, #12]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800778c:	f000 fae4 	bl	8007d58 <vTaskStartScheduler>
  
  return osOK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	bd80      	pop	{r7, pc}

08007796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007798:	b089      	sub	sp, #36	@ 0x24
 800779a:	af04      	add	r7, sp, #16
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d020      	beq.n	80077ea <osThreadCreate+0x54>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01c      	beq.n	80077ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685c      	ldr	r4, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691e      	ldr	r6, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff ffc8 	bl	8007758 <makeFreeRtosPriority>
 80077c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	9100      	str	r1, [sp, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	4632      	mov	r2, r6
 80077dc:	4629      	mov	r1, r5
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 f8ed 	bl	80079be <xTaskCreateStatic>
 80077e4:	4603      	mov	r3, r0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e01c      	b.n	8007824 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685c      	ldr	r4, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ffaa 	bl	8007758 <makeFreeRtosPriority>
 8007804:	4602      	mov	r2, r0
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	9200      	str	r2, [sp, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	4632      	mov	r2, r6
 8007812:	4629      	mov	r1, r5
 8007814:	4620      	mov	r0, r4
 8007816:	f000 f932 	bl	8007a7e <xTaskCreate>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800782e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <osDelay+0x16>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	e000      	b.n	8007846 <osDelay+0x18>
 8007844:	2301      	movs	r3, #1
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fa50 	bl	8007cec <vTaskDelay>
  
  return osOK;
 800784c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f103 0208 	add.w	r2, r3, #8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f04f 32ff 	mov.w	r2, #4294967295
 800786e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f103 0208 	add.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f103 0208 	add.w	r2, r3, #8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d103      	bne.n	8007918 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e00c      	b.n	8007932 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3308      	adds	r3, #8
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e002      	b.n	8007926 <vListInsert+0x2e>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	429a      	cmp	r2, r3
 8007930:	d2f6      	bcs.n	8007920 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6892      	ldr	r2, [r2, #8]
 8007980:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6852      	ldr	r2, [r2, #4]
 800798a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	429a      	cmp	r2, r3
 8007994:	d103      	bne.n	800799e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	1e5a      	subs	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b08e      	sub	sp, #56	@ 0x38
 80079c2:	af04      	add	r7, sp, #16
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10b      	bne.n	8007a08 <xTaskCreateStatic+0x4a>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	61fb      	str	r3, [r7, #28]
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	e7fd      	b.n	8007a04 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a08:	2354      	movs	r3, #84	@ 0x54
 8007a0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b54      	cmp	r3, #84	@ 0x54
 8007a10:	d00b      	beq.n	8007a2a <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	61bb      	str	r3, [r7, #24]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01e      	beq.n	8007a70 <xTaskCreateStatic+0xb2>
 8007a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01b      	beq.n	8007a70 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a40:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	9302      	str	r3, [sp, #8]
 8007a52:	f107 0314 	add.w	r3, r7, #20
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68b9      	ldr	r1, [r7, #8]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f850 	bl	8007b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a6a:	f000 f8d5 	bl	8007c18 <prvAddNewTaskToReadyList>
 8007a6e:	e001      	b.n	8007a74 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a74:	697b      	ldr	r3, [r7, #20]
	}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3728      	adds	r7, #40	@ 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b08c      	sub	sp, #48	@ 0x30
 8007a82:	af04      	add	r7, sp, #16
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	603b      	str	r3, [r7, #0]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fed0 	bl	8008838 <pvPortMalloc>
 8007a98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00e      	beq.n	8007abe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007aa0:	2054      	movs	r0, #84	@ 0x54
 8007aa2:	f000 fec9 	bl	8008838 <pvPortMalloc>
 8007aa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ab4:	e005      	b.n	8007ac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ab6:	6978      	ldr	r0, [r7, #20]
 8007ab8:	f000 ff8c 	bl	80089d4 <vPortFree>
 8007abc:	e001      	b.n	8007ac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ad0:	88fa      	ldrh	r2, [r7, #6]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9303      	str	r3, [sp, #12]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	9302      	str	r3, [sp, #8]
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68b9      	ldr	r1, [r7, #8]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f80e 	bl	8007b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007aec:	69f8      	ldr	r0, [r7, #28]
 8007aee:	f000 f893 	bl	8007c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007af2:	2301      	movs	r3, #1
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	e002      	b.n	8007afe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007afe:	69bb      	ldr	r3, [r7, #24]
	}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b20:	3b01      	subs	r3, #1
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	617b      	str	r3, [r7, #20]
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	e7fd      	b.n	8007b4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01f      	beq.n	8007b98 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e012      	b.n	8007b84 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	7819      	ldrb	r1, [r3, #0]
 8007b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3334      	adds	r3, #52	@ 0x34
 8007b6e:	460a      	mov	r2, r1
 8007b70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d006      	beq.n	8007b8c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3301      	adds	r3, #1
 8007b82:	61fb      	str	r3, [r7, #28]
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d9e9      	bls.n	8007b5e <prvInitialiseNewTask+0x56>
 8007b8a:	e000      	b.n	8007b8e <prvInitialiseNewTask+0x86>
			{
				break;
 8007b8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b96:	e003      	b.n	8007ba0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d901      	bls.n	8007baa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ba6:	2306      	movs	r3, #6
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bb4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	2200      	movs	r2, #0
 8007bba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fe68 	bl	8007896 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	3318      	adds	r3, #24
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff fe63 	bl	8007896 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	f1c3 0207 	rsb	r2, r3, #7
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	2200      	movs	r2, #0
 8007bea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	69b8      	ldr	r0, [r7, #24]
 8007bfa:	f000 fc0d 	bl	8008418 <pxPortInitialiseStack>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c10:	bf00      	nop
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c20:	f000 fd2a 	bl	8008678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c24:	4b2a      	ldr	r3, [pc, #168]	@ (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a29      	ldr	r2, [pc, #164]	@ (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c2e:	4b29      	ldr	r3, [pc, #164]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c36:	4a27      	ldr	r2, [pc, #156]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c3c:	4b24      	ldr	r3, [pc, #144]	@ (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d110      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c44:	f000 fac4 	bl	80081d0 <prvInitialiseTaskLists>
 8007c48:	e00d      	b.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c4a:	4b23      	ldr	r3, [pc, #140]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c52:	4b20      	ldr	r3, [pc, #128]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d802      	bhi.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c60:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c66:	4b1d      	ldr	r3, [pc, #116]	@ (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	4b19      	ldr	r3, [pc, #100]	@ (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ce4 <prvAddNewTaskToReadyList+0xcc>)
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7ff fe09 	bl	80078b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c9e:	f000 fd1d 	bl	80086dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00e      	beq.n	8007cc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007caa:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d207      	bcs.n	8007cc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <prvAddNewTaskToReadyList+0xd0>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200006ec 	.word	0x200006ec
 8007cd4:	200005ec 	.word	0x200005ec
 8007cd8:	200006f8 	.word	0x200006f8
 8007cdc:	20000708 	.word	0x20000708
 8007ce0:	200006f4 	.word	0x200006f4
 8007ce4:	200005f0 	.word	0x200005f0
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d018      	beq.n	8007d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cfe:	4b14      	ldr	r3, [pc, #80]	@ (8007d50 <vTaskDelay+0x64>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <vTaskDelay+0x32>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	e7fd      	b.n	8007d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d1e:	f000 f87d 	bl	8007e1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d22:	2100      	movs	r1, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fb11 	bl	800834c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d2a:	f000 f885 	bl	8007e38 <xTaskResumeAll>
 8007d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d107      	bne.n	8007d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d36:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <vTaskDelay+0x68>)
 8007d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000714 	.word	0x20000714
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	@ 0x28
 8007d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d66:	463a      	mov	r2, r7
 8007d68:	1d39      	adds	r1, r7, #4
 8007d6a:	f107 0308 	add.w	r3, r7, #8
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f9 f82c 	bl	8000dcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	9202      	str	r2, [sp, #8]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	460a      	mov	r2, r1
 8007d86:	491f      	ldr	r1, [pc, #124]	@ (8007e04 <vTaskStartScheduler+0xac>)
 8007d88:	481f      	ldr	r0, [pc, #124]	@ (8007e08 <vTaskStartScheduler+0xb0>)
 8007d8a:	f7ff fe18 	bl	80079be <xTaskCreateStatic>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4a1e      	ldr	r2, [pc, #120]	@ (8007e0c <vTaskStartScheduler+0xb4>)
 8007d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d94:	4b1d      	ldr	r3, [pc, #116]	@ (8007e0c <vTaskStartScheduler+0xb4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e001      	b.n	8007da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d116      	bne.n	8007dda <vTaskStartScheduler+0x82>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	613b      	str	r3, [r7, #16]
}
 8007dbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc0:	4b13      	ldr	r3, [pc, #76]	@ (8007e10 <vTaskStartScheduler+0xb8>)
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dc8:	4b12      	ldr	r3, [pc, #72]	@ (8007e14 <vTaskStartScheduler+0xbc>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dce:	4b12      	ldr	r3, [pc, #72]	@ (8007e18 <vTaskStartScheduler+0xc0>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dd4:	f000 fbac 	bl	8008530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dd8:	e00f      	b.n	8007dfa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d10b      	bne.n	8007dfa <vTaskStartScheduler+0xa2>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	60fb      	str	r3, [r7, #12]
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	e7fd      	b.n	8007df6 <vTaskStartScheduler+0x9e>
}
 8007dfa:	bf00      	nop
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	08009668 	.word	0x08009668
 8007e08:	080081a1 	.word	0x080081a1
 8007e0c:	20000710 	.word	0x20000710
 8007e10:	2000070c 	.word	0x2000070c
 8007e14:	200006f8 	.word	0x200006f8
 8007e18:	200006f0 	.word	0x200006f0

08007e1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e20:	4b04      	ldr	r3, [pc, #16]	@ (8007e34 <vTaskSuspendAll+0x18>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	4a03      	ldr	r2, [pc, #12]	@ (8007e34 <vTaskSuspendAll+0x18>)
 8007e28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e2a:	bf00      	nop
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	20000714 	.word	0x20000714

08007e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e46:	4b42      	ldr	r3, [pc, #264]	@ (8007f50 <xTaskResumeAll+0x118>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <xTaskResumeAll+0x2e>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	603b      	str	r3, [r7, #0]
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	e7fd      	b.n	8007e62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e66:	f000 fc07 	bl	8008678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e6a:	4b39      	ldr	r3, [pc, #228]	@ (8007f50 <xTaskResumeAll+0x118>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4a37      	ldr	r2, [pc, #220]	@ (8007f50 <xTaskResumeAll+0x118>)
 8007e72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e74:	4b36      	ldr	r3, [pc, #216]	@ (8007f50 <xTaskResumeAll+0x118>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d161      	bne.n	8007f40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e7c:	4b35      	ldr	r3, [pc, #212]	@ (8007f54 <xTaskResumeAll+0x11c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05d      	beq.n	8007f40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e84:	e02e      	b.n	8007ee4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e86:	4b34      	ldr	r3, [pc, #208]	@ (8007f58 <xTaskResumeAll+0x120>)
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3318      	adds	r3, #24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff fd69 	bl	800796a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fd64 	bl	800796a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	409a      	lsls	r2, r3
 8007eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8007f5c <xTaskResumeAll+0x124>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f5c <xTaskResumeAll+0x124>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a27      	ldr	r2, [pc, #156]	@ (8007f60 <xTaskResumeAll+0x128>)
 8007ec2:	441a      	add	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7ff fcf0 	bl	80078b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed4:	4b23      	ldr	r3, [pc, #140]	@ (8007f64 <xTaskResumeAll+0x12c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ede:	4b22      	ldr	r3, [pc, #136]	@ (8007f68 <xTaskResumeAll+0x130>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f58 <xTaskResumeAll+0x120>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1cc      	bne.n	8007e86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ef2:	f000 fa0b 	bl	800830c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f6c <xTaskResumeAll+0x134>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d010      	beq.n	8007f24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f02:	f000 f837 	bl	8007f74 <xTaskIncrementTick>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f0c:	4b16      	ldr	r3, [pc, #88]	@ (8007f68 <xTaskResumeAll+0x130>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f1      	bne.n	8007f02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f1e:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <xTaskResumeAll+0x134>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f24:	4b10      	ldr	r3, [pc, #64]	@ (8007f68 <xTaskResumeAll+0x130>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d009      	beq.n	8007f40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f30:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <xTaskResumeAll+0x138>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f40:	f000 fbcc 	bl	80086dc <vPortExitCritical>

	return xAlreadyYielded;
 8007f44:	68bb      	ldr	r3, [r7, #8]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000714 	.word	0x20000714
 8007f54:	200006ec 	.word	0x200006ec
 8007f58:	200006ac 	.word	0x200006ac
 8007f5c:	200006f4 	.word	0x200006f4
 8007f60:	200005f0 	.word	0x200005f0
 8007f64:	200005ec 	.word	0x200005ec
 8007f68:	20000700 	.word	0x20000700
 8007f6c:	200006fc 	.word	0x200006fc
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80080bc <xTaskIncrementTick+0x148>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 808f 	bne.w	80080a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f88:	4b4d      	ldr	r3, [pc, #308]	@ (80080c0 <xTaskIncrementTick+0x14c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f90:	4a4b      	ldr	r2, [pc, #300]	@ (80080c0 <xTaskIncrementTick+0x14c>)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d121      	bne.n	8007fe0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f9c:	4b49      	ldr	r3, [pc, #292]	@ (80080c4 <xTaskIncrementTick+0x150>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	603b      	str	r3, [r7, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <xTaskIncrementTick+0x46>
 8007fbe:	4b41      	ldr	r3, [pc, #260]	@ (80080c4 <xTaskIncrementTick+0x150>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	4b40      	ldr	r3, [pc, #256]	@ (80080c8 <xTaskIncrementTick+0x154>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80080c4 <xTaskIncrementTick+0x150>)
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	4a3e      	ldr	r2, [pc, #248]	@ (80080c8 <xTaskIncrementTick+0x154>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80080cc <xTaskIncrementTick+0x158>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80080cc <xTaskIncrementTick+0x158>)
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	f000 f996 	bl	800830c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80080d0 <xTaskIncrementTick+0x15c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d348      	bcc.n	800807c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fea:	4b36      	ldr	r3, [pc, #216]	@ (80080c4 <xTaskIncrementTick+0x150>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff4:	4b36      	ldr	r3, [pc, #216]	@ (80080d0 <xTaskIncrementTick+0x15c>)
 8007ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffa:	601a      	str	r2, [r3, #0]
					break;
 8007ffc:	e03e      	b.n	800807c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffe:	4b31      	ldr	r3, [pc, #196]	@ (80080c4 <xTaskIncrementTick+0x150>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	429a      	cmp	r2, r3
 8008014:	d203      	bcs.n	800801e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008016:	4a2e      	ldr	r2, [pc, #184]	@ (80080d0 <xTaskIncrementTick+0x15c>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800801c:	e02e      	b.n	800807c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff fca1 	bl	800796a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3318      	adds	r3, #24
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff fc98 	bl	800796a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803e:	2201      	movs	r2, #1
 8008040:	409a      	lsls	r2, r3
 8008042:	4b24      	ldr	r3, [pc, #144]	@ (80080d4 <xTaskIncrementTick+0x160>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4313      	orrs	r3, r2
 8008048:	4a22      	ldr	r2, [pc, #136]	@ (80080d4 <xTaskIncrementTick+0x160>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a1f      	ldr	r2, [pc, #124]	@ (80080d8 <xTaskIncrementTick+0x164>)
 800805a:	441a      	add	r2, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7ff fc24 	bl	80078b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800806c:	4b1b      	ldr	r3, [pc, #108]	@ (80080dc <xTaskIncrementTick+0x168>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008072:	429a      	cmp	r2, r3
 8008074:	d3b9      	bcc.n	8007fea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008076:	2301      	movs	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807a:	e7b6      	b.n	8007fea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800807c:	4b17      	ldr	r3, [pc, #92]	@ (80080dc <xTaskIncrementTick+0x168>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008082:	4915      	ldr	r1, [pc, #84]	@ (80080d8 <xTaskIncrementTick+0x164>)
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d901      	bls.n	8008098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008098:	4b11      	ldr	r3, [pc, #68]	@ (80080e0 <xTaskIncrementTick+0x16c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e004      	b.n	80080b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <xTaskIncrementTick+0x170>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	4a0d      	ldr	r2, [pc, #52]	@ (80080e4 <xTaskIncrementTick+0x170>)
 80080ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080b0:	697b      	ldr	r3, [r7, #20]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000714 	.word	0x20000714
 80080c0:	200006f0 	.word	0x200006f0
 80080c4:	200006a4 	.word	0x200006a4
 80080c8:	200006a8 	.word	0x200006a8
 80080cc:	20000704 	.word	0x20000704
 80080d0:	2000070c 	.word	0x2000070c
 80080d4:	200006f4 	.word	0x200006f4
 80080d8:	200005f0 	.word	0x200005f0
 80080dc:	200005ec 	.word	0x200005ec
 80080e0:	20000700 	.word	0x20000700
 80080e4:	200006fc 	.word	0x200006fc

080080e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080ee:	4b27      	ldr	r3, [pc, #156]	@ (800818c <vTaskSwitchContext+0xa4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080f6:	4b26      	ldr	r3, [pc, #152]	@ (8008190 <vTaskSwitchContext+0xa8>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080fc:	e040      	b.n	8008180 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80080fe:	4b24      	ldr	r3, [pc, #144]	@ (8008190 <vTaskSwitchContext+0xa8>)
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	4b23      	ldr	r3, [pc, #140]	@ (8008194 <vTaskSwitchContext+0xac>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	fab3 f383 	clz	r3, r3
 8008110:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008112:	7afb      	ldrb	r3, [r7, #11]
 8008114:	f1c3 031f 	rsb	r3, r3, #31
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	491f      	ldr	r1, [pc, #124]	@ (8008198 <vTaskSwitchContext+0xb0>)
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <vTaskSwitchContext+0x5e>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	607b      	str	r3, [r7, #4]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <vTaskSwitchContext+0x5a>
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4a11      	ldr	r2, [pc, #68]	@ (8008198 <vTaskSwitchContext+0xb0>)
 8008152:	4413      	add	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	605a      	str	r2, [r3, #4]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3308      	adds	r3, #8
 8008168:	429a      	cmp	r2, r3
 800816a:	d104      	bne.n	8008176 <vTaskSwitchContext+0x8e>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	4a07      	ldr	r2, [pc, #28]	@ (800819c <vTaskSwitchContext+0xb4>)
 800817e:	6013      	str	r3, [r2, #0]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20000714 	.word	0x20000714
 8008190:	20000700 	.word	0x20000700
 8008194:	200006f4 	.word	0x200006f4
 8008198:	200005f0 	.word	0x200005f0
 800819c:	200005ec 	.word	0x200005ec

080081a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081a8:	f000 f852 	bl	8008250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <prvIdleTask+0x28>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d9f9      	bls.n	80081a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <prvIdleTask+0x2c>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081c4:	e7f0      	b.n	80081a8 <prvIdleTask+0x8>
 80081c6:	bf00      	nop
 80081c8:	200005f0 	.word	0x200005f0
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081d6:	2300      	movs	r3, #0
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	e00c      	b.n	80081f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <prvInitialiseTaskLists+0x60>)
 80081e8:	4413      	add	r3, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fb33 	bl	8007856 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3301      	adds	r3, #1
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b06      	cmp	r3, #6
 80081fa:	d9ef      	bls.n	80081dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081fc:	480d      	ldr	r0, [pc, #52]	@ (8008234 <prvInitialiseTaskLists+0x64>)
 80081fe:	f7ff fb2a 	bl	8007856 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008202:	480d      	ldr	r0, [pc, #52]	@ (8008238 <prvInitialiseTaskLists+0x68>)
 8008204:	f7ff fb27 	bl	8007856 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008208:	480c      	ldr	r0, [pc, #48]	@ (800823c <prvInitialiseTaskLists+0x6c>)
 800820a:	f7ff fb24 	bl	8007856 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800820e:	480c      	ldr	r0, [pc, #48]	@ (8008240 <prvInitialiseTaskLists+0x70>)
 8008210:	f7ff fb21 	bl	8007856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008214:	480b      	ldr	r0, [pc, #44]	@ (8008244 <prvInitialiseTaskLists+0x74>)
 8008216:	f7ff fb1e 	bl	8007856 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800821a:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <prvInitialiseTaskLists+0x78>)
 800821c:	4a05      	ldr	r2, [pc, #20]	@ (8008234 <prvInitialiseTaskLists+0x64>)
 800821e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008220:	4b0a      	ldr	r3, [pc, #40]	@ (800824c <prvInitialiseTaskLists+0x7c>)
 8008222:	4a05      	ldr	r2, [pc, #20]	@ (8008238 <prvInitialiseTaskLists+0x68>)
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	200005f0 	.word	0x200005f0
 8008234:	2000067c 	.word	0x2000067c
 8008238:	20000690 	.word	0x20000690
 800823c:	200006ac 	.word	0x200006ac
 8008240:	200006c0 	.word	0x200006c0
 8008244:	200006d8 	.word	0x200006d8
 8008248:	200006a4 	.word	0x200006a4
 800824c:	200006a8 	.word	0x200006a8

08008250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008256:	e019      	b.n	800828c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008258:	f000 fa0e 	bl	8008678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825c:	4b10      	ldr	r3, [pc, #64]	@ (80082a0 <prvCheckTasksWaitingTermination+0x50>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff fb7e 	bl	800796a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800826e:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	4a0b      	ldr	r2, [pc, #44]	@ (80082a4 <prvCheckTasksWaitingTermination+0x54>)
 8008276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008278:	4b0b      	ldr	r3, [pc, #44]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3b01      	subs	r3, #1
 800827e:	4a0a      	ldr	r2, [pc, #40]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 8008280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008282:	f000 fa2b 	bl	80086dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f810 	bl	80082ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800828c:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <prvCheckTasksWaitingTermination+0x58>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e1      	bne.n	8008258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	200006c0 	.word	0x200006c0
 80082a4:	200006ec 	.word	0x200006ec
 80082a8:	200006d4 	.word	0x200006d4

080082ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d108      	bne.n	80082d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fb86 	bl	80089d4 <vPortFree>
				vPortFree( pxTCB );
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fb83 	bl	80089d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ce:	e019      	b.n	8008304 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d103      	bne.n	80082e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fb7a 	bl	80089d4 <vPortFree>
	}
 80082e0:	e010      	b.n	8008304 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d00b      	beq.n	8008304 <prvDeleteTCB+0x58>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60fb      	str	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <prvDeleteTCB+0x54>
	}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008312:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <prvResetNextTaskUnblockTime+0x38>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d104      	bne.n	8008326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <prvResetNextTaskUnblockTime+0x3c>)
 800831e:	f04f 32ff 	mov.w	r2, #4294967295
 8008322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008324:	e008      	b.n	8008338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008326:	4b07      	ldr	r3, [pc, #28]	@ (8008344 <prvResetNextTaskUnblockTime+0x38>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	4a04      	ldr	r2, [pc, #16]	@ (8008348 <prvResetNextTaskUnblockTime+0x3c>)
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	200006a4 	.word	0x200006a4
 8008348:	2000070c 	.word	0x2000070c

0800834c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008356:	4b29      	ldr	r3, [pc, #164]	@ (80083fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800835c:	4b28      	ldr	r3, [pc, #160]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3304      	adds	r3, #4
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff fb01 	bl	800796a <uxListRemove>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800836e:	4b24      	ldr	r3, [pc, #144]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	2201      	movs	r2, #1
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43da      	mvns	r2, r3
 800837c:	4b21      	ldr	r3, [pc, #132]	@ (8008404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4013      	ands	r3, r2
 8008382:	4a20      	ldr	r2, [pc, #128]	@ (8008404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d10a      	bne.n	80083a4 <prvAddCurrentTaskToDelayedList+0x58>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008394:	4b1a      	ldr	r3, [pc, #104]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	481a      	ldr	r0, [pc, #104]	@ (8008408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800839e:	f7ff fa87 	bl	80078b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083a2:	e026      	b.n	80083f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ac:	4b14      	ldr	r3, [pc, #80]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d209      	bcs.n	80083d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083bc:	4b13      	ldr	r3, [pc, #76]	@ (800840c <prvAddCurrentTaskToDelayedList+0xc0>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7ff fa95 	bl	80078f8 <vListInsert>
}
 80083ce:	e010      	b.n	80083f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7ff fa8b 	bl	80078f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d202      	bcs.n	80083f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80083ec:	4a09      	ldr	r2, [pc, #36]	@ (8008414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6013      	str	r3, [r2, #0]
}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	200006f0 	.word	0x200006f0
 8008400:	200005ec 	.word	0x200005ec
 8008404:	200006f4 	.word	0x200006f4
 8008408:	200006d8 	.word	0x200006d8
 800840c:	200006a8 	.word	0x200006a8
 8008410:	200006a4 	.word	0x200006a4
 8008414:	2000070c 	.word	0x2000070c

08008418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3b04      	subs	r3, #4
 8008428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3b04      	subs	r3, #4
 8008436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f023 0201 	bic.w	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b04      	subs	r3, #4
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008448:	4a0c      	ldr	r2, [pc, #48]	@ (800847c <pxPortInitialiseStack+0x64>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3b14      	subs	r3, #20
 8008452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3b04      	subs	r3, #4
 800845e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f06f 0202 	mvn.w	r2, #2
 8008466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3b20      	subs	r3, #32
 800846c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	08008481 	.word	0x08008481

08008480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800848a:	4b13      	ldr	r3, [pc, #76]	@ (80084d8 <prvTaskExitError+0x58>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008492:	d00b      	beq.n	80084ac <prvTaskExitError+0x2c>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60fb      	str	r3, [r7, #12]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <prvTaskExitError+0x28>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60bb      	str	r3, [r7, #8]
}
 80084be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084c0:	bf00      	nop
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0fc      	beq.n	80084c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20000044 	.word	0x20000044
 80084dc:	00000000 	.word	0x00000000

080084e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	4770      	bx	lr
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst2>:
 8008500:	200005ec 	.word	0x200005ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008508:	4808      	ldr	r0, [pc, #32]	@ (800852c <prvPortStartFirstTask+0x24>)
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	6800      	ldr	r0, [r0, #0]
 800850e:	f380 8808 	msr	MSP, r0
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8814 	msr	CONTROL, r0
 800851a:	b662      	cpsie	i
 800851c:	b661      	cpsie	f
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	df00      	svc	0
 8008528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800852a:	bf00      	nop
 800852c:	e000ed08 	.word	0xe000ed08

08008530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008536:	4b47      	ldr	r3, [pc, #284]	@ (8008654 <xPortStartScheduler+0x124>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a47      	ldr	r2, [pc, #284]	@ (8008658 <xPortStartScheduler+0x128>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10b      	bne.n	8008558 <xPortStartScheduler+0x28>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008558:	4b3e      	ldr	r3, [pc, #248]	@ (8008654 <xPortStartScheduler+0x124>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3f      	ldr	r2, [pc, #252]	@ (800865c <xPortStartScheduler+0x12c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d10b      	bne.n	800857a <xPortStartScheduler+0x4a>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	60fb      	str	r3, [r7, #12]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800857a:	4b39      	ldr	r3, [pc, #228]	@ (8008660 <xPortStartScheduler+0x130>)
 800857c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	22ff      	movs	r2, #255	@ 0xff
 800858a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800859c:	b2da      	uxtb	r2, r3
 800859e:	4b31      	ldr	r3, [pc, #196]	@ (8008664 <xPortStartScheduler+0x134>)
 80085a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085a2:	4b31      	ldr	r3, [pc, #196]	@ (8008668 <xPortStartScheduler+0x138>)
 80085a4:	2207      	movs	r2, #7
 80085a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085a8:	e009      	b.n	80085be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80085aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008668 <xPortStartScheduler+0x138>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008668 <xPortStartScheduler+0x138>)
 80085b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c6:	2b80      	cmp	r3, #128	@ 0x80
 80085c8:	d0ef      	beq.n	80085aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ca:	4b27      	ldr	r3, [pc, #156]	@ (8008668 <xPortStartScheduler+0x138>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1c3 0307 	rsb	r3, r3, #7
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d00b      	beq.n	80085ee <xPortStartScheduler+0xbe>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008668 <xPortStartScheduler+0x138>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008668 <xPortStartScheduler+0x138>)
 80085f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008668 <xPortStartScheduler+0x138>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008600:	4a19      	ldr	r2, [pc, #100]	@ (8008668 <xPortStartScheduler+0x138>)
 8008602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800860c:	4b17      	ldr	r3, [pc, #92]	@ (800866c <xPortStartScheduler+0x13c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a16      	ldr	r2, [pc, #88]	@ (800866c <xPortStartScheduler+0x13c>)
 8008612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008618:	4b14      	ldr	r3, [pc, #80]	@ (800866c <xPortStartScheduler+0x13c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a13      	ldr	r2, [pc, #76]	@ (800866c <xPortStartScheduler+0x13c>)
 800861e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008624:	f000 f8da 	bl	80087dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008628:	4b11      	ldr	r3, [pc, #68]	@ (8008670 <xPortStartScheduler+0x140>)
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800862e:	f000 f8f9 	bl	8008824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008632:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <xPortStartScheduler+0x144>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a0f      	ldr	r2, [pc, #60]	@ (8008674 <xPortStartScheduler+0x144>)
 8008638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800863c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800863e:	f7ff ff63 	bl	8008508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008642:	f7ff fd51 	bl	80080e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008646:	f7ff ff1b 	bl	8008480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	e000ed00 	.word	0xe000ed00
 8008658:	410fc271 	.word	0x410fc271
 800865c:	410fc270 	.word	0x410fc270
 8008660:	e000e400 	.word	0xe000e400
 8008664:	20000718 	.word	0x20000718
 8008668:	2000071c 	.word	0x2000071c
 800866c:	e000ed20 	.word	0xe000ed20
 8008670:	20000044 	.word	0x20000044
 8008674:	e000ef34 	.word	0xe000ef34

08008678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <vPortEnterCritical+0x5c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	4a0e      	ldr	r2, [pc, #56]	@ (80086d4 <vPortEnterCritical+0x5c>)
 800869a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800869c:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <vPortEnterCritical+0x5c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d110      	bne.n	80086c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086a4:	4b0c      	ldr	r3, [pc, #48]	@ (80086d8 <vPortEnterCritical+0x60>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	603b      	str	r3, [r7, #0]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <vPortEnterCritical+0x4a>
	}
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	20000044 	.word	0x20000044
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086e2:	4b12      	ldr	r3, [pc, #72]	@ (800872c <vPortExitCritical+0x50>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <vPortExitCritical+0x26>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008702:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3b01      	subs	r3, #1
 8008708:	4a08      	ldr	r2, [pc, #32]	@ (800872c <vPortExitCritical+0x50>)
 800870a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <vPortExitCritical+0x50>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <vPortExitCritical+0x44>
 8008714:	2300      	movs	r3, #0
 8008716:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800871e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	20000044 	.word	0x20000044

08008730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008730:	f3ef 8009 	mrs	r0, PSP
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	4b15      	ldr	r3, [pc, #84]	@ (8008790 <pxCurrentTCBConst>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f01e 0f10 	tst.w	lr, #16
 8008740:	bf08      	it	eq
 8008742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	6010      	str	r0, [r2, #0]
 800874c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008754:	f380 8811 	msr	BASEPRI, r0
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f7ff fcc2 	bl	80080e8 <vTaskSwitchContext>
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	f380 8811 	msr	BASEPRI, r0
 800876c:	bc09      	pop	{r0, r3}
 800876e:	6819      	ldr	r1, [r3, #0]
 8008770:	6808      	ldr	r0, [r1, #0]
 8008772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008776:	f01e 0f10 	tst.w	lr, #16
 800877a:	bf08      	it	eq
 800877c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008780:	f380 8809 	msr	PSP, r0
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w

08008790 <pxCurrentTCBConst>:
 8008790:	200005ec 	.word	0x200005ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087b2:	f7ff fbdf 	bl	8007f74 <xTaskIncrementTick>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087bc:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <SysTick_Handler+0x40>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
}
 80087ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <vPortSetupTimerInterrupt+0x34>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008814 <vPortSetupTimerInterrupt+0x38>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <vPortSetupTimerInterrupt+0x3c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a0a      	ldr	r2, [pc, #40]	@ (800881c <vPortSetupTimerInterrupt+0x40>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	4a09      	ldr	r2, [pc, #36]	@ (8008820 <vPortSetupTimerInterrupt+0x44>)
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087fe:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <vPortSetupTimerInterrupt+0x34>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	e000e010 	.word	0xe000e010
 8008814:	e000e018 	.word	0xe000e018
 8008818:	20000004 	.word	0x20000004
 800881c:	10624dd3 	.word	0x10624dd3
 8008820:	e000e014 	.word	0xe000e014

08008824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008834 <vPortEnableVFP+0x10>
 8008828:	6801      	ldr	r1, [r0, #0]
 800882a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800882e:	6001      	str	r1, [r0, #0]
 8008830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008832:	bf00      	nop
 8008834:	e000ed88 	.word	0xe000ed88

08008838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08a      	sub	sp, #40	@ 0x28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008844:	f7ff faea 	bl	8007e1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008848:	4b5c      	ldr	r3, [pc, #368]	@ (80089bc <pvPortMalloc+0x184>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008850:	f000 f924 	bl	8008a9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008854:	4b5a      	ldr	r3, [pc, #360]	@ (80089c0 <pvPortMalloc+0x188>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 8095 	bne.w	800898c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01e      	beq.n	80088a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008868:	2208      	movs	r2, #8
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b00      	cmp	r3, #0
 8008878:	d015      	beq.n	80088a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	3308      	adds	r3, #8
 8008882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <pvPortMalloc+0x6e>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	617b      	str	r3, [r7, #20]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d06f      	beq.n	800898c <pvPortMalloc+0x154>
 80088ac:	4b45      	ldr	r3, [pc, #276]	@ (80089c4 <pvPortMalloc+0x18c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d86a      	bhi.n	800898c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088b6:	4b44      	ldr	r3, [pc, #272]	@ (80089c8 <pvPortMalloc+0x190>)
 80088b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088ba:	4b43      	ldr	r3, [pc, #268]	@ (80089c8 <pvPortMalloc+0x190>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088c0:	e004      	b.n	80088cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <pvPortMalloc+0xa6>
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f1      	bne.n	80088c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088de:	4b37      	ldr	r3, [pc, #220]	@ (80089bc <pvPortMalloc+0x184>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d051      	beq.n	800898c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2208      	movs	r2, #8
 80088ee:	4413      	add	r3, r2
 80088f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	1ad2      	subs	r2, r2, r3
 8008902:	2308      	movs	r3, #8
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	429a      	cmp	r2, r3
 8008908:	d920      	bls.n	800894c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800890a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4413      	add	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <pvPortMalloc+0xfc>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	613b      	str	r3, [r7, #16]
}
 800892e:	bf00      	nop
 8008930:	bf00      	nop
 8008932:	e7fd      	b.n	8008930 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	1ad2      	subs	r2, r2, r3
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008946:	69b8      	ldr	r0, [r7, #24]
 8008948:	f000 f90a 	bl	8008b60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800894c:	4b1d      	ldr	r3, [pc, #116]	@ (80089c4 <pvPortMalloc+0x18c>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	4a1b      	ldr	r2, [pc, #108]	@ (80089c4 <pvPortMalloc+0x18c>)
 8008958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800895a:	4b1a      	ldr	r3, [pc, #104]	@ (80089c4 <pvPortMalloc+0x18c>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4b1b      	ldr	r3, [pc, #108]	@ (80089cc <pvPortMalloc+0x194>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d203      	bcs.n	800896e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008966:	4b17      	ldr	r3, [pc, #92]	@ (80089c4 <pvPortMalloc+0x18c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a18      	ldr	r2, [pc, #96]	@ (80089cc <pvPortMalloc+0x194>)
 800896c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	4b13      	ldr	r3, [pc, #76]	@ (80089c0 <pvPortMalloc+0x188>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	431a      	orrs	r2, r3
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008982:	4b13      	ldr	r3, [pc, #76]	@ (80089d0 <pvPortMalloc+0x198>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3301      	adds	r3, #1
 8008988:	4a11      	ldr	r2, [pc, #68]	@ (80089d0 <pvPortMalloc+0x198>)
 800898a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800898c:	f7ff fa54 	bl	8007e38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <pvPortMalloc+0x17a>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	60fb      	str	r3, [r7, #12]
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	e7fd      	b.n	80089ae <pvPortMalloc+0x176>
	return pvReturn;
 80089b2:	69fb      	ldr	r3, [r7, #28]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	@ 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	200012e0 	.word	0x200012e0
 80089c0:	200012f4 	.word	0x200012f4
 80089c4:	200012e4 	.word	0x200012e4
 80089c8:	200012d8 	.word	0x200012d8
 80089cc:	200012e8 	.word	0x200012e8
 80089d0:	200012ec 	.word	0x200012ec

080089d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d04f      	beq.n	8008a86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089e6:	2308      	movs	r3, #8
 80089e8:	425b      	negs	r3, r3
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4413      	add	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <vPortFree+0xbc>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4013      	ands	r3, r2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <vPortFree+0x46>
	__asm volatile
 8008a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	60fb      	str	r3, [r7, #12]
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	e7fd      	b.n	8008a16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <vPortFree+0x66>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	60bb      	str	r3, [r7, #8]
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	e7fd      	b.n	8008a36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	4b14      	ldr	r3, [pc, #80]	@ (8008a90 <vPortFree+0xbc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4013      	ands	r3, r2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01e      	beq.n	8008a86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11a      	bne.n	8008a86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	4b0e      	ldr	r3, [pc, #56]	@ (8008a90 <vPortFree+0xbc>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	43db      	mvns	r3, r3
 8008a5a:	401a      	ands	r2, r3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a60:	f7ff f9dc 	bl	8007e1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <vPortFree+0xc0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	4a09      	ldr	r2, [pc, #36]	@ (8008a94 <vPortFree+0xc0>)
 8008a70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a72:	6938      	ldr	r0, [r7, #16]
 8008a74:	f000 f874 	bl	8008b60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a78:	4b07      	ldr	r3, [pc, #28]	@ (8008a98 <vPortFree+0xc4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	4a06      	ldr	r2, [pc, #24]	@ (8008a98 <vPortFree+0xc4>)
 8008a80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a82:	f7ff f9d9 	bl	8007e38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a86:	bf00      	nop
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200012f4 	.word	0x200012f4
 8008a94:	200012e4 	.word	0x200012e4
 8008a98:	200012f0 	.word	0x200012f0

08008a9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008aa2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008aa6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aa8:	4b27      	ldr	r3, [pc, #156]	@ (8008b48 <prvHeapInit+0xac>)
 8008aaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00c      	beq.n	8008ad0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3307      	adds	r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 0307 	bic.w	r3, r3, #7
 8008ac2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	4a1f      	ldr	r2, [pc, #124]	@ (8008b48 <prvHeapInit+0xac>)
 8008acc:	4413      	add	r3, r2
 8008ace:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <prvHeapInit+0xb0>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ada:	4b1c      	ldr	r3, [pc, #112]	@ (8008b4c <prvHeapInit+0xb0>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ae8:	2208      	movs	r2, #8
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0307 	bic.w	r3, r3, #7
 8008af6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4a15      	ldr	r2, [pc, #84]	@ (8008b50 <prvHeapInit+0xb4>)
 8008afc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008afe:	4b14      	ldr	r3, [pc, #80]	@ (8008b50 <prvHeapInit+0xb4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b06:	4b12      	ldr	r3, [pc, #72]	@ (8008b50 <prvHeapInit+0xb4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	1ad2      	subs	r2, r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <prvHeapInit+0xb4>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a0a      	ldr	r2, [pc, #40]	@ (8008b54 <prvHeapInit+0xb8>)
 8008b2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	4a09      	ldr	r2, [pc, #36]	@ (8008b58 <prvHeapInit+0xbc>)
 8008b32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b34:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <prvHeapInit+0xc0>)
 8008b36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b3a:	601a      	str	r2, [r3, #0]
}
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	20000720 	.word	0x20000720
 8008b4c:	200012d8 	.word	0x200012d8
 8008b50:	200012e0 	.word	0x200012e0
 8008b54:	200012e8 	.word	0x200012e8
 8008b58:	200012e4 	.word	0x200012e4
 8008b5c:	200012f4 	.word	0x200012f4

08008b60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b68:	4b28      	ldr	r3, [pc, #160]	@ (8008c0c <prvInsertBlockIntoFreeList+0xac>)
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	e002      	b.n	8008b74 <prvInsertBlockIntoFreeList+0x14>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d8f7      	bhi.n	8008b6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4413      	add	r3, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d108      	bne.n	8008ba2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	441a      	add	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	441a      	add	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d118      	bne.n	8008be8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b15      	ldr	r3, [pc, #84]	@ (8008c10 <prvInsertBlockIntoFreeList+0xb0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d00d      	beq.n	8008bde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e008      	b.n	8008bf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bde:	4b0c      	ldr	r3, [pc, #48]	@ (8008c10 <prvInsertBlockIntoFreeList+0xb0>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	e003      	b.n	8008bf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d002      	beq.n	8008bfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	200012d8 	.word	0x200012d8
 8008c10:	200012e0 	.word	0x200012e0

08008c14 <arm_sin_f32>:
 8008c14:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8008c94 <arm_sin_f32+0x80>
 8008c18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008c1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008c28:	d504      	bpl.n	8008c34 <arm_sin_f32+0x20>
 8008c2a:	ee17 3a90 	vmov	r3, s15
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c38:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8008c98 <arm_sin_f32+0x84>
 8008c3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c40:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008c44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008c48:	ee17 3a90 	vmov	r3, s15
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c52:	d21a      	bcs.n	8008c8a <arm_sin_f32+0x76>
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5c:	1c59      	adds	r1, r3, #1
 8008c5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c62:	4a0e      	ldr	r2, [pc, #56]	@ (8008c9c <arm_sin_f32+0x88>)
 8008c64:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008c68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008c70:	ed93 7a00 	vldr	s14, [r3]
 8008c74:	edd2 6a00 	vldr	s13, [r2]
 8008c78:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008c7c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c84:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008c88:	4770      	bx	lr
 8008c8a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008c8e:	2101      	movs	r1, #1
 8008c90:	2300      	movs	r3, #0
 8008c92:	e7e6      	b.n	8008c62 <arm_sin_f32+0x4e>
 8008c94:	3e22f983 	.word	0x3e22f983
 8008c98:	44000000 	.word	0x44000000
 8008c9c:	080096e0 	.word	0x080096e0

08008ca0 <siprintf>:
 8008ca0:	b40e      	push	{r1, r2, r3}
 8008ca2:	b500      	push	{lr}
 8008ca4:	b09c      	sub	sp, #112	@ 0x70
 8008ca6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ca8:	9002      	str	r0, [sp, #8]
 8008caa:	9006      	str	r0, [sp, #24]
 8008cac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008cb0:	4809      	ldr	r0, [pc, #36]	@ (8008cd8 <siprintf+0x38>)
 8008cb2:	9107      	str	r1, [sp, #28]
 8008cb4:	9104      	str	r1, [sp, #16]
 8008cb6:	4909      	ldr	r1, [pc, #36]	@ (8008cdc <siprintf+0x3c>)
 8008cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cbc:	9105      	str	r1, [sp, #20]
 8008cbe:	6800      	ldr	r0, [r0, #0]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	a902      	add	r1, sp, #8
 8008cc4:	f000 f9a2 	bl	800900c <_svfiprintf_r>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	b01c      	add	sp, #112	@ 0x70
 8008cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cd4:	b003      	add	sp, #12
 8008cd6:	4770      	bx	lr
 8008cd8:	20000048 	.word	0x20000048
 8008cdc:	ffff0208 	.word	0xffff0208

08008ce0 <memset>:
 8008ce0:	4402      	add	r2, r0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d100      	bne.n	8008cea <memset+0xa>
 8008ce8:	4770      	bx	lr
 8008cea:	f803 1b01 	strb.w	r1, [r3], #1
 8008cee:	e7f9      	b.n	8008ce4 <memset+0x4>

08008cf0 <__errno>:
 8008cf0:	4b01      	ldr	r3, [pc, #4]	@ (8008cf8 <__errno+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000048 	.word	0x20000048

08008cfc <__libc_init_array>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8008d34 <__libc_init_array+0x38>)
 8008d00:	4c0d      	ldr	r4, [pc, #52]	@ (8008d38 <__libc_init_array+0x3c>)
 8008d02:	1b64      	subs	r4, r4, r5
 8008d04:	10a4      	asrs	r4, r4, #2
 8008d06:	2600      	movs	r6, #0
 8008d08:	42a6      	cmp	r6, r4
 8008d0a:	d109      	bne.n	8008d20 <__libc_init_array+0x24>
 8008d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8008d3c <__libc_init_array+0x40>)
 8008d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8008d40 <__libc_init_array+0x44>)
 8008d10:	f000 fc66 	bl	80095e0 <_init>
 8008d14:	1b64      	subs	r4, r4, r5
 8008d16:	10a4      	asrs	r4, r4, #2
 8008d18:	2600      	movs	r6, #0
 8008d1a:	42a6      	cmp	r6, r4
 8008d1c:	d105      	bne.n	8008d2a <__libc_init_array+0x2e>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d24:	4798      	blx	r3
 8008d26:	3601      	adds	r6, #1
 8008d28:	e7ee      	b.n	8008d08 <__libc_init_array+0xc>
 8008d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2e:	4798      	blx	r3
 8008d30:	3601      	adds	r6, #1
 8008d32:	e7f2      	b.n	8008d1a <__libc_init_array+0x1e>
 8008d34:	08009f20 	.word	0x08009f20
 8008d38:	08009f20 	.word	0x08009f20
 8008d3c:	08009f20 	.word	0x08009f20
 8008d40:	08009f24 	.word	0x08009f24

08008d44 <__retarget_lock_acquire_recursive>:
 8008d44:	4770      	bx	lr

08008d46 <__retarget_lock_release_recursive>:
 8008d46:	4770      	bx	lr

08008d48 <memcpy>:
 8008d48:	440a      	add	r2, r1
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d50:	d100      	bne.n	8008d54 <memcpy+0xc>
 8008d52:	4770      	bx	lr
 8008d54:	b510      	push	{r4, lr}
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	d1f9      	bne.n	8008d56 <memcpy+0xe>
 8008d62:	bd10      	pop	{r4, pc}

08008d64 <_free_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4605      	mov	r5, r0
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	d041      	beq.n	8008df0 <_free_r+0x8c>
 8008d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d70:	1f0c      	subs	r4, r1, #4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	bfb8      	it	lt
 8008d76:	18e4      	addlt	r4, r4, r3
 8008d78:	f000 f8e0 	bl	8008f3c <__malloc_lock>
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008df4 <_free_r+0x90>)
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	b933      	cbnz	r3, 8008d90 <_free_r+0x2c>
 8008d82:	6063      	str	r3, [r4, #4]
 8008d84:	6014      	str	r4, [r2, #0]
 8008d86:	4628      	mov	r0, r5
 8008d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d8c:	f000 b8dc 	b.w	8008f48 <__malloc_unlock>
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d908      	bls.n	8008da6 <_free_r+0x42>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	1821      	adds	r1, r4, r0
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf01      	itttt	eq
 8008d9c:	6819      	ldreq	r1, [r3, #0]
 8008d9e:	685b      	ldreq	r3, [r3, #4]
 8008da0:	1809      	addeq	r1, r1, r0
 8008da2:	6021      	streq	r1, [r4, #0]
 8008da4:	e7ed      	b.n	8008d82 <_free_r+0x1e>
 8008da6:	461a      	mov	r2, r3
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	b10b      	cbz	r3, 8008db0 <_free_r+0x4c>
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d9fa      	bls.n	8008da6 <_free_r+0x42>
 8008db0:	6811      	ldr	r1, [r2, #0]
 8008db2:	1850      	adds	r0, r2, r1
 8008db4:	42a0      	cmp	r0, r4
 8008db6:	d10b      	bne.n	8008dd0 <_free_r+0x6c>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	4401      	add	r1, r0
 8008dbc:	1850      	adds	r0, r2, r1
 8008dbe:	4283      	cmp	r3, r0
 8008dc0:	6011      	str	r1, [r2, #0]
 8008dc2:	d1e0      	bne.n	8008d86 <_free_r+0x22>
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	6053      	str	r3, [r2, #4]
 8008dca:	4408      	add	r0, r1
 8008dcc:	6010      	str	r0, [r2, #0]
 8008dce:	e7da      	b.n	8008d86 <_free_r+0x22>
 8008dd0:	d902      	bls.n	8008dd8 <_free_r+0x74>
 8008dd2:	230c      	movs	r3, #12
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	e7d6      	b.n	8008d86 <_free_r+0x22>
 8008dd8:	6820      	ldr	r0, [r4, #0]
 8008dda:	1821      	adds	r1, r4, r0
 8008ddc:	428b      	cmp	r3, r1
 8008dde:	bf04      	itt	eq
 8008de0:	6819      	ldreq	r1, [r3, #0]
 8008de2:	685b      	ldreq	r3, [r3, #4]
 8008de4:	6063      	str	r3, [r4, #4]
 8008de6:	bf04      	itt	eq
 8008de8:	1809      	addeq	r1, r1, r0
 8008dea:	6021      	streq	r1, [r4, #0]
 8008dec:	6054      	str	r4, [r2, #4]
 8008dee:	e7ca      	b.n	8008d86 <_free_r+0x22>
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
 8008df2:	bf00      	nop
 8008df4:	2000143c 	.word	0x2000143c

08008df8 <sbrk_aligned>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8008e38 <sbrk_aligned+0x40>)
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	6831      	ldr	r1, [r6, #0]
 8008e00:	4605      	mov	r5, r0
 8008e02:	b911      	cbnz	r1, 8008e0a <sbrk_aligned+0x12>
 8008e04:	f000 fba6 	bl	8009554 <_sbrk_r>
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 fba1 	bl	8009554 <_sbrk_r>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d103      	bne.n	8008e1e <sbrk_aligned+0x26>
 8008e16:	f04f 34ff 	mov.w	r4, #4294967295
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	bd70      	pop	{r4, r5, r6, pc}
 8008e1e:	1cc4      	adds	r4, r0, #3
 8008e20:	f024 0403 	bic.w	r4, r4, #3
 8008e24:	42a0      	cmp	r0, r4
 8008e26:	d0f8      	beq.n	8008e1a <sbrk_aligned+0x22>
 8008e28:	1a21      	subs	r1, r4, r0
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 fb92 	bl	8009554 <_sbrk_r>
 8008e30:	3001      	adds	r0, #1
 8008e32:	d1f2      	bne.n	8008e1a <sbrk_aligned+0x22>
 8008e34:	e7ef      	b.n	8008e16 <sbrk_aligned+0x1e>
 8008e36:	bf00      	nop
 8008e38:	20001438 	.word	0x20001438

08008e3c <_malloc_r>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	1ccd      	adds	r5, r1, #3
 8008e42:	f025 0503 	bic.w	r5, r5, #3
 8008e46:	3508      	adds	r5, #8
 8008e48:	2d0c      	cmp	r5, #12
 8008e4a:	bf38      	it	cc
 8008e4c:	250c      	movcc	r5, #12
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	4606      	mov	r6, r0
 8008e52:	db01      	blt.n	8008e58 <_malloc_r+0x1c>
 8008e54:	42a9      	cmp	r1, r5
 8008e56:	d904      	bls.n	8008e62 <_malloc_r+0x26>
 8008e58:	230c      	movs	r3, #12
 8008e5a:	6033      	str	r3, [r6, #0]
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f38 <_malloc_r+0xfc>
 8008e66:	f000 f869 	bl	8008f3c <__malloc_lock>
 8008e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e6e:	461c      	mov	r4, r3
 8008e70:	bb44      	cbnz	r4, 8008ec4 <_malloc_r+0x88>
 8008e72:	4629      	mov	r1, r5
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffbf 	bl	8008df8 <sbrk_aligned>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	d158      	bne.n	8008f32 <_malloc_r+0xf6>
 8008e80:	f8d8 4000 	ldr.w	r4, [r8]
 8008e84:	4627      	mov	r7, r4
 8008e86:	2f00      	cmp	r7, #0
 8008e88:	d143      	bne.n	8008f12 <_malloc_r+0xd6>
 8008e8a:	2c00      	cmp	r4, #0
 8008e8c:	d04b      	beq.n	8008f26 <_malloc_r+0xea>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	4639      	mov	r1, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	eb04 0903 	add.w	r9, r4, r3
 8008e98:	f000 fb5c 	bl	8009554 <_sbrk_r>
 8008e9c:	4581      	cmp	r9, r0
 8008e9e:	d142      	bne.n	8008f26 <_malloc_r+0xea>
 8008ea0:	6821      	ldr	r1, [r4, #0]
 8008ea2:	1a6d      	subs	r5, r5, r1
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ffa6 	bl	8008df8 <sbrk_aligned>
 8008eac:	3001      	adds	r0, #1
 8008eae:	d03a      	beq.n	8008f26 <_malloc_r+0xea>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	442b      	add	r3, r5
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	bb62      	cbnz	r2, 8008f18 <_malloc_r+0xdc>
 8008ebe:	f8c8 7000 	str.w	r7, [r8]
 8008ec2:	e00f      	b.n	8008ee4 <_malloc_r+0xa8>
 8008ec4:	6822      	ldr	r2, [r4, #0]
 8008ec6:	1b52      	subs	r2, r2, r5
 8008ec8:	d420      	bmi.n	8008f0c <_malloc_r+0xd0>
 8008eca:	2a0b      	cmp	r2, #11
 8008ecc:	d917      	bls.n	8008efe <_malloc_r+0xc2>
 8008ece:	1961      	adds	r1, r4, r5
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	6025      	str	r5, [r4, #0]
 8008ed4:	bf18      	it	ne
 8008ed6:	6059      	strne	r1, [r3, #4]
 8008ed8:	6863      	ldr	r3, [r4, #4]
 8008eda:	bf08      	it	eq
 8008edc:	f8c8 1000 	streq.w	r1, [r8]
 8008ee0:	5162      	str	r2, [r4, r5]
 8008ee2:	604b      	str	r3, [r1, #4]
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 f82f 	bl	8008f48 <__malloc_unlock>
 8008eea:	f104 000b 	add.w	r0, r4, #11
 8008eee:	1d23      	adds	r3, r4, #4
 8008ef0:	f020 0007 	bic.w	r0, r0, #7
 8008ef4:	1ac2      	subs	r2, r0, r3
 8008ef6:	bf1c      	itt	ne
 8008ef8:	1a1b      	subne	r3, r3, r0
 8008efa:	50a3      	strne	r3, [r4, r2]
 8008efc:	e7af      	b.n	8008e5e <_malloc_r+0x22>
 8008efe:	6862      	ldr	r2, [r4, #4]
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	bf0c      	ite	eq
 8008f04:	f8c8 2000 	streq.w	r2, [r8]
 8008f08:	605a      	strne	r2, [r3, #4]
 8008f0a:	e7eb      	b.n	8008ee4 <_malloc_r+0xa8>
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	6864      	ldr	r4, [r4, #4]
 8008f10:	e7ae      	b.n	8008e70 <_malloc_r+0x34>
 8008f12:	463c      	mov	r4, r7
 8008f14:	687f      	ldr	r7, [r7, #4]
 8008f16:	e7b6      	b.n	8008e86 <_malloc_r+0x4a>
 8008f18:	461a      	mov	r2, r3
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d1fb      	bne.n	8008f18 <_malloc_r+0xdc>
 8008f20:	2300      	movs	r3, #0
 8008f22:	6053      	str	r3, [r2, #4]
 8008f24:	e7de      	b.n	8008ee4 <_malloc_r+0xa8>
 8008f26:	230c      	movs	r3, #12
 8008f28:	6033      	str	r3, [r6, #0]
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f000 f80c 	bl	8008f48 <__malloc_unlock>
 8008f30:	e794      	b.n	8008e5c <_malloc_r+0x20>
 8008f32:	6005      	str	r5, [r0, #0]
 8008f34:	e7d6      	b.n	8008ee4 <_malloc_r+0xa8>
 8008f36:	bf00      	nop
 8008f38:	2000143c 	.word	0x2000143c

08008f3c <__malloc_lock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	@ (8008f44 <__malloc_lock+0x8>)
 8008f3e:	f7ff bf01 	b.w	8008d44 <__retarget_lock_acquire_recursive>
 8008f42:	bf00      	nop
 8008f44:	20001434 	.word	0x20001434

08008f48 <__malloc_unlock>:
 8008f48:	4801      	ldr	r0, [pc, #4]	@ (8008f50 <__malloc_unlock+0x8>)
 8008f4a:	f7ff befc 	b.w	8008d46 <__retarget_lock_release_recursive>
 8008f4e:	bf00      	nop
 8008f50:	20001434 	.word	0x20001434

08008f54 <__ssputs_r>:
 8008f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f58:	688e      	ldr	r6, [r1, #8]
 8008f5a:	461f      	mov	r7, r3
 8008f5c:	42be      	cmp	r6, r7
 8008f5e:	680b      	ldr	r3, [r1, #0]
 8008f60:	4682      	mov	sl, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	4690      	mov	r8, r2
 8008f66:	d82d      	bhi.n	8008fc4 <__ssputs_r+0x70>
 8008f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f70:	d026      	beq.n	8008fc0 <__ssputs_r+0x6c>
 8008f72:	6965      	ldr	r5, [r4, #20]
 8008f74:	6909      	ldr	r1, [r1, #16]
 8008f76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f7a:	eba3 0901 	sub.w	r9, r3, r1
 8008f7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f82:	1c7b      	adds	r3, r7, #1
 8008f84:	444b      	add	r3, r9
 8008f86:	106d      	asrs	r5, r5, #1
 8008f88:	429d      	cmp	r5, r3
 8008f8a:	bf38      	it	cc
 8008f8c:	461d      	movcc	r5, r3
 8008f8e:	0553      	lsls	r3, r2, #21
 8008f90:	d527      	bpl.n	8008fe2 <__ssputs_r+0x8e>
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7ff ff52 	bl	8008e3c <_malloc_r>
 8008f98:	4606      	mov	r6, r0
 8008f9a:	b360      	cbz	r0, 8008ff6 <__ssputs_r+0xa2>
 8008f9c:	6921      	ldr	r1, [r4, #16]
 8008f9e:	464a      	mov	r2, r9
 8008fa0:	f7ff fed2 	bl	8008d48 <memcpy>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fae:	81a3      	strh	r3, [r4, #12]
 8008fb0:	6126      	str	r6, [r4, #16]
 8008fb2:	6165      	str	r5, [r4, #20]
 8008fb4:	444e      	add	r6, r9
 8008fb6:	eba5 0509 	sub.w	r5, r5, r9
 8008fba:	6026      	str	r6, [r4, #0]
 8008fbc:	60a5      	str	r5, [r4, #8]
 8008fbe:	463e      	mov	r6, r7
 8008fc0:	42be      	cmp	r6, r7
 8008fc2:	d900      	bls.n	8008fc6 <__ssputs_r+0x72>
 8008fc4:	463e      	mov	r6, r7
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4641      	mov	r1, r8
 8008fcc:	f000 faa8 	bl	8009520 <memmove>
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	1b9b      	subs	r3, r3, r6
 8008fd4:	60a3      	str	r3, [r4, #8]
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	4433      	add	r3, r6
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	f000 fac6 	bl	8009574 <_realloc_r>
 8008fe8:	4606      	mov	r6, r0
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d1e0      	bne.n	8008fb0 <__ssputs_r+0x5c>
 8008fee:	6921      	ldr	r1, [r4, #16]
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	f7ff feb7 	bl	8008d64 <_free_r>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	f8ca 3000 	str.w	r3, [sl]
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	e7e9      	b.n	8008fde <__ssputs_r+0x8a>
	...

0800900c <_svfiprintf_r>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	4698      	mov	r8, r3
 8009012:	898b      	ldrh	r3, [r1, #12]
 8009014:	061b      	lsls	r3, r3, #24
 8009016:	b09d      	sub	sp, #116	@ 0x74
 8009018:	4607      	mov	r7, r0
 800901a:	460d      	mov	r5, r1
 800901c:	4614      	mov	r4, r2
 800901e:	d510      	bpl.n	8009042 <_svfiprintf_r+0x36>
 8009020:	690b      	ldr	r3, [r1, #16]
 8009022:	b973      	cbnz	r3, 8009042 <_svfiprintf_r+0x36>
 8009024:	2140      	movs	r1, #64	@ 0x40
 8009026:	f7ff ff09 	bl	8008e3c <_malloc_r>
 800902a:	6028      	str	r0, [r5, #0]
 800902c:	6128      	str	r0, [r5, #16]
 800902e:	b930      	cbnz	r0, 800903e <_svfiprintf_r+0x32>
 8009030:	230c      	movs	r3, #12
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	b01d      	add	sp, #116	@ 0x74
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	2340      	movs	r3, #64	@ 0x40
 8009040:	616b      	str	r3, [r5, #20]
 8009042:	2300      	movs	r3, #0
 8009044:	9309      	str	r3, [sp, #36]	@ 0x24
 8009046:	2320      	movs	r3, #32
 8009048:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800904c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009050:	2330      	movs	r3, #48	@ 0x30
 8009052:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091f0 <_svfiprintf_r+0x1e4>
 8009056:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800905a:	f04f 0901 	mov.w	r9, #1
 800905e:	4623      	mov	r3, r4
 8009060:	469a      	mov	sl, r3
 8009062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009066:	b10a      	cbz	r2, 800906c <_svfiprintf_r+0x60>
 8009068:	2a25      	cmp	r2, #37	@ 0x25
 800906a:	d1f9      	bne.n	8009060 <_svfiprintf_r+0x54>
 800906c:	ebba 0b04 	subs.w	fp, sl, r4
 8009070:	d00b      	beq.n	800908a <_svfiprintf_r+0x7e>
 8009072:	465b      	mov	r3, fp
 8009074:	4622      	mov	r2, r4
 8009076:	4629      	mov	r1, r5
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ff6b 	bl	8008f54 <__ssputs_r>
 800907e:	3001      	adds	r0, #1
 8009080:	f000 80a7 	beq.w	80091d2 <_svfiprintf_r+0x1c6>
 8009084:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009086:	445a      	add	r2, fp
 8009088:	9209      	str	r2, [sp, #36]	@ 0x24
 800908a:	f89a 3000 	ldrb.w	r3, [sl]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 809f 	beq.w	80091d2 <_svfiprintf_r+0x1c6>
 8009094:	2300      	movs	r3, #0
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800909e:	f10a 0a01 	add.w	sl, sl, #1
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	9307      	str	r3, [sp, #28]
 80090a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80090ac:	4654      	mov	r4, sl
 80090ae:	2205      	movs	r2, #5
 80090b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b4:	484e      	ldr	r0, [pc, #312]	@ (80091f0 <_svfiprintf_r+0x1e4>)
 80090b6:	f7f7 f8a3 	bl	8000200 <memchr>
 80090ba:	9a04      	ldr	r2, [sp, #16]
 80090bc:	b9d8      	cbnz	r0, 80090f6 <_svfiprintf_r+0xea>
 80090be:	06d0      	lsls	r0, r2, #27
 80090c0:	bf44      	itt	mi
 80090c2:	2320      	movmi	r3, #32
 80090c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090c8:	0711      	lsls	r1, r2, #28
 80090ca:	bf44      	itt	mi
 80090cc:	232b      	movmi	r3, #43	@ 0x2b
 80090ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090d8:	d015      	beq.n	8009106 <_svfiprintf_r+0xfa>
 80090da:	9a07      	ldr	r2, [sp, #28]
 80090dc:	4654      	mov	r4, sl
 80090de:	2000      	movs	r0, #0
 80090e0:	f04f 0c0a 	mov.w	ip, #10
 80090e4:	4621      	mov	r1, r4
 80090e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ea:	3b30      	subs	r3, #48	@ 0x30
 80090ec:	2b09      	cmp	r3, #9
 80090ee:	d94b      	bls.n	8009188 <_svfiprintf_r+0x17c>
 80090f0:	b1b0      	cbz	r0, 8009120 <_svfiprintf_r+0x114>
 80090f2:	9207      	str	r2, [sp, #28]
 80090f4:	e014      	b.n	8009120 <_svfiprintf_r+0x114>
 80090f6:	eba0 0308 	sub.w	r3, r0, r8
 80090fa:	fa09 f303 	lsl.w	r3, r9, r3
 80090fe:	4313      	orrs	r3, r2
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	46a2      	mov	sl, r4
 8009104:	e7d2      	b.n	80090ac <_svfiprintf_r+0xa0>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	1d19      	adds	r1, r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	9103      	str	r1, [sp, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfbb      	ittet	lt
 8009112:	425b      	neglt	r3, r3
 8009114:	f042 0202 	orrlt.w	r2, r2, #2
 8009118:	9307      	strge	r3, [sp, #28]
 800911a:	9307      	strlt	r3, [sp, #28]
 800911c:	bfb8      	it	lt
 800911e:	9204      	strlt	r2, [sp, #16]
 8009120:	7823      	ldrb	r3, [r4, #0]
 8009122:	2b2e      	cmp	r3, #46	@ 0x2e
 8009124:	d10a      	bne.n	800913c <_svfiprintf_r+0x130>
 8009126:	7863      	ldrb	r3, [r4, #1]
 8009128:	2b2a      	cmp	r3, #42	@ 0x2a
 800912a:	d132      	bne.n	8009192 <_svfiprintf_r+0x186>
 800912c:	9b03      	ldr	r3, [sp, #12]
 800912e:	1d1a      	adds	r2, r3, #4
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	9203      	str	r2, [sp, #12]
 8009134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009138:	3402      	adds	r4, #2
 800913a:	9305      	str	r3, [sp, #20]
 800913c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009200 <_svfiprintf_r+0x1f4>
 8009140:	7821      	ldrb	r1, [r4, #0]
 8009142:	2203      	movs	r2, #3
 8009144:	4650      	mov	r0, sl
 8009146:	f7f7 f85b 	bl	8000200 <memchr>
 800914a:	b138      	cbz	r0, 800915c <_svfiprintf_r+0x150>
 800914c:	9b04      	ldr	r3, [sp, #16]
 800914e:	eba0 000a 	sub.w	r0, r0, sl
 8009152:	2240      	movs	r2, #64	@ 0x40
 8009154:	4082      	lsls	r2, r0
 8009156:	4313      	orrs	r3, r2
 8009158:	3401      	adds	r4, #1
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009160:	4824      	ldr	r0, [pc, #144]	@ (80091f4 <_svfiprintf_r+0x1e8>)
 8009162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009166:	2206      	movs	r2, #6
 8009168:	f7f7 f84a 	bl	8000200 <memchr>
 800916c:	2800      	cmp	r0, #0
 800916e:	d036      	beq.n	80091de <_svfiprintf_r+0x1d2>
 8009170:	4b21      	ldr	r3, [pc, #132]	@ (80091f8 <_svfiprintf_r+0x1ec>)
 8009172:	bb1b      	cbnz	r3, 80091bc <_svfiprintf_r+0x1b0>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	3307      	adds	r3, #7
 8009178:	f023 0307 	bic.w	r3, r3, #7
 800917c:	3308      	adds	r3, #8
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009182:	4433      	add	r3, r6
 8009184:	9309      	str	r3, [sp, #36]	@ 0x24
 8009186:	e76a      	b.n	800905e <_svfiprintf_r+0x52>
 8009188:	fb0c 3202 	mla	r2, ip, r2, r3
 800918c:	460c      	mov	r4, r1
 800918e:	2001      	movs	r0, #1
 8009190:	e7a8      	b.n	80090e4 <_svfiprintf_r+0xd8>
 8009192:	2300      	movs	r3, #0
 8009194:	3401      	adds	r4, #1
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	4619      	mov	r1, r3
 800919a:	f04f 0c0a 	mov.w	ip, #10
 800919e:	4620      	mov	r0, r4
 80091a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091a4:	3a30      	subs	r2, #48	@ 0x30
 80091a6:	2a09      	cmp	r2, #9
 80091a8:	d903      	bls.n	80091b2 <_svfiprintf_r+0x1a6>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0c6      	beq.n	800913c <_svfiprintf_r+0x130>
 80091ae:	9105      	str	r1, [sp, #20]
 80091b0:	e7c4      	b.n	800913c <_svfiprintf_r+0x130>
 80091b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091b6:	4604      	mov	r4, r0
 80091b8:	2301      	movs	r3, #1
 80091ba:	e7f0      	b.n	800919e <_svfiprintf_r+0x192>
 80091bc:	ab03      	add	r3, sp, #12
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	462a      	mov	r2, r5
 80091c2:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <_svfiprintf_r+0x1f0>)
 80091c4:	a904      	add	r1, sp, #16
 80091c6:	4638      	mov	r0, r7
 80091c8:	f3af 8000 	nop.w
 80091cc:	1c42      	adds	r2, r0, #1
 80091ce:	4606      	mov	r6, r0
 80091d0:	d1d6      	bne.n	8009180 <_svfiprintf_r+0x174>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	065b      	lsls	r3, r3, #25
 80091d6:	f53f af2d 	bmi.w	8009034 <_svfiprintf_r+0x28>
 80091da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091dc:	e72c      	b.n	8009038 <_svfiprintf_r+0x2c>
 80091de:	ab03      	add	r3, sp, #12
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	462a      	mov	r2, r5
 80091e4:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <_svfiprintf_r+0x1f0>)
 80091e6:	a904      	add	r1, sp, #16
 80091e8:	4638      	mov	r0, r7
 80091ea:	f000 f879 	bl	80092e0 <_printf_i>
 80091ee:	e7ed      	b.n	80091cc <_svfiprintf_r+0x1c0>
 80091f0:	08009ee4 	.word	0x08009ee4
 80091f4:	08009eee 	.word	0x08009eee
 80091f8:	00000000 	.word	0x00000000
 80091fc:	08008f55 	.word	0x08008f55
 8009200:	08009eea 	.word	0x08009eea

08009204 <_printf_common>:
 8009204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	4616      	mov	r6, r2
 800920a:	4698      	mov	r8, r3
 800920c:	688a      	ldr	r2, [r1, #8]
 800920e:	690b      	ldr	r3, [r1, #16]
 8009210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009214:	4293      	cmp	r3, r2
 8009216:	bfb8      	it	lt
 8009218:	4613      	movlt	r3, r2
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009220:	4607      	mov	r7, r0
 8009222:	460c      	mov	r4, r1
 8009224:	b10a      	cbz	r2, 800922a <_printf_common+0x26>
 8009226:	3301      	adds	r3, #1
 8009228:	6033      	str	r3, [r6, #0]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	0699      	lsls	r1, r3, #26
 800922e:	bf42      	ittt	mi
 8009230:	6833      	ldrmi	r3, [r6, #0]
 8009232:	3302      	addmi	r3, #2
 8009234:	6033      	strmi	r3, [r6, #0]
 8009236:	6825      	ldr	r5, [r4, #0]
 8009238:	f015 0506 	ands.w	r5, r5, #6
 800923c:	d106      	bne.n	800924c <_printf_common+0x48>
 800923e:	f104 0a19 	add.w	sl, r4, #25
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	6832      	ldr	r2, [r6, #0]
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	42ab      	cmp	r3, r5
 800924a:	dc26      	bgt.n	800929a <_printf_common+0x96>
 800924c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009250:	6822      	ldr	r2, [r4, #0]
 8009252:	3b00      	subs	r3, #0
 8009254:	bf18      	it	ne
 8009256:	2301      	movne	r3, #1
 8009258:	0692      	lsls	r2, r2, #26
 800925a:	d42b      	bmi.n	80092b4 <_printf_common+0xb0>
 800925c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009260:	4641      	mov	r1, r8
 8009262:	4638      	mov	r0, r7
 8009264:	47c8      	blx	r9
 8009266:	3001      	adds	r0, #1
 8009268:	d01e      	beq.n	80092a8 <_printf_common+0xa4>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	6922      	ldr	r2, [r4, #16]
 800926e:	f003 0306 	and.w	r3, r3, #6
 8009272:	2b04      	cmp	r3, #4
 8009274:	bf02      	ittt	eq
 8009276:	68e5      	ldreq	r5, [r4, #12]
 8009278:	6833      	ldreq	r3, [r6, #0]
 800927a:	1aed      	subeq	r5, r5, r3
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	bf0c      	ite	eq
 8009280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009284:	2500      	movne	r5, #0
 8009286:	4293      	cmp	r3, r2
 8009288:	bfc4      	itt	gt
 800928a:	1a9b      	subgt	r3, r3, r2
 800928c:	18ed      	addgt	r5, r5, r3
 800928e:	2600      	movs	r6, #0
 8009290:	341a      	adds	r4, #26
 8009292:	42b5      	cmp	r5, r6
 8009294:	d11a      	bne.n	80092cc <_printf_common+0xc8>
 8009296:	2000      	movs	r0, #0
 8009298:	e008      	b.n	80092ac <_printf_common+0xa8>
 800929a:	2301      	movs	r3, #1
 800929c:	4652      	mov	r2, sl
 800929e:	4641      	mov	r1, r8
 80092a0:	4638      	mov	r0, r7
 80092a2:	47c8      	blx	r9
 80092a4:	3001      	adds	r0, #1
 80092a6:	d103      	bne.n	80092b0 <_printf_common+0xac>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7c6      	b.n	8009242 <_printf_common+0x3e>
 80092b4:	18e1      	adds	r1, r4, r3
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	2030      	movs	r0, #48	@ 0x30
 80092ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092be:	4422      	add	r2, r4
 80092c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092c8:	3302      	adds	r3, #2
 80092ca:	e7c7      	b.n	800925c <_printf_common+0x58>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4622      	mov	r2, r4
 80092d0:	4641      	mov	r1, r8
 80092d2:	4638      	mov	r0, r7
 80092d4:	47c8      	blx	r9
 80092d6:	3001      	adds	r0, #1
 80092d8:	d0e6      	beq.n	80092a8 <_printf_common+0xa4>
 80092da:	3601      	adds	r6, #1
 80092dc:	e7d9      	b.n	8009292 <_printf_common+0x8e>
	...

080092e0 <_printf_i>:
 80092e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	7e0f      	ldrb	r7, [r1, #24]
 80092e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092e8:	2f78      	cmp	r7, #120	@ 0x78
 80092ea:	4691      	mov	r9, r2
 80092ec:	4680      	mov	r8, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	469a      	mov	sl, r3
 80092f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092f6:	d807      	bhi.n	8009308 <_printf_i+0x28>
 80092f8:	2f62      	cmp	r7, #98	@ 0x62
 80092fa:	d80a      	bhi.n	8009312 <_printf_i+0x32>
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	f000 80d2 	beq.w	80094a6 <_printf_i+0x1c6>
 8009302:	2f58      	cmp	r7, #88	@ 0x58
 8009304:	f000 80b9 	beq.w	800947a <_printf_i+0x19a>
 8009308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800930c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009310:	e03a      	b.n	8009388 <_printf_i+0xa8>
 8009312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009316:	2b15      	cmp	r3, #21
 8009318:	d8f6      	bhi.n	8009308 <_printf_i+0x28>
 800931a:	a101      	add	r1, pc, #4	@ (adr r1, 8009320 <_printf_i+0x40>)
 800931c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009320:	08009379 	.word	0x08009379
 8009324:	0800938d 	.word	0x0800938d
 8009328:	08009309 	.word	0x08009309
 800932c:	08009309 	.word	0x08009309
 8009330:	08009309 	.word	0x08009309
 8009334:	08009309 	.word	0x08009309
 8009338:	0800938d 	.word	0x0800938d
 800933c:	08009309 	.word	0x08009309
 8009340:	08009309 	.word	0x08009309
 8009344:	08009309 	.word	0x08009309
 8009348:	08009309 	.word	0x08009309
 800934c:	0800948d 	.word	0x0800948d
 8009350:	080093b7 	.word	0x080093b7
 8009354:	08009447 	.word	0x08009447
 8009358:	08009309 	.word	0x08009309
 800935c:	08009309 	.word	0x08009309
 8009360:	080094af 	.word	0x080094af
 8009364:	08009309 	.word	0x08009309
 8009368:	080093b7 	.word	0x080093b7
 800936c:	08009309 	.word	0x08009309
 8009370:	08009309 	.word	0x08009309
 8009374:	0800944f 	.word	0x0800944f
 8009378:	6833      	ldr	r3, [r6, #0]
 800937a:	1d1a      	adds	r2, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6032      	str	r2, [r6, #0]
 8009380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009388:	2301      	movs	r3, #1
 800938a:	e09d      	b.n	80094c8 <_printf_i+0x1e8>
 800938c:	6833      	ldr	r3, [r6, #0]
 800938e:	6820      	ldr	r0, [r4, #0]
 8009390:	1d19      	adds	r1, r3, #4
 8009392:	6031      	str	r1, [r6, #0]
 8009394:	0606      	lsls	r6, r0, #24
 8009396:	d501      	bpl.n	800939c <_printf_i+0xbc>
 8009398:	681d      	ldr	r5, [r3, #0]
 800939a:	e003      	b.n	80093a4 <_printf_i+0xc4>
 800939c:	0645      	lsls	r5, r0, #25
 800939e:	d5fb      	bpl.n	8009398 <_printf_i+0xb8>
 80093a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093a4:	2d00      	cmp	r5, #0
 80093a6:	da03      	bge.n	80093b0 <_printf_i+0xd0>
 80093a8:	232d      	movs	r3, #45	@ 0x2d
 80093aa:	426d      	negs	r5, r5
 80093ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b0:	4859      	ldr	r0, [pc, #356]	@ (8009518 <_printf_i+0x238>)
 80093b2:	230a      	movs	r3, #10
 80093b4:	e011      	b.n	80093da <_printf_i+0xfa>
 80093b6:	6821      	ldr	r1, [r4, #0]
 80093b8:	6833      	ldr	r3, [r6, #0]
 80093ba:	0608      	lsls	r0, r1, #24
 80093bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80093c0:	d402      	bmi.n	80093c8 <_printf_i+0xe8>
 80093c2:	0649      	lsls	r1, r1, #25
 80093c4:	bf48      	it	mi
 80093c6:	b2ad      	uxthmi	r5, r5
 80093c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80093ca:	4853      	ldr	r0, [pc, #332]	@ (8009518 <_printf_i+0x238>)
 80093cc:	6033      	str	r3, [r6, #0]
 80093ce:	bf14      	ite	ne
 80093d0:	230a      	movne	r3, #10
 80093d2:	2308      	moveq	r3, #8
 80093d4:	2100      	movs	r1, #0
 80093d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093da:	6866      	ldr	r6, [r4, #4]
 80093dc:	60a6      	str	r6, [r4, #8]
 80093de:	2e00      	cmp	r6, #0
 80093e0:	bfa2      	ittt	ge
 80093e2:	6821      	ldrge	r1, [r4, #0]
 80093e4:	f021 0104 	bicge.w	r1, r1, #4
 80093e8:	6021      	strge	r1, [r4, #0]
 80093ea:	b90d      	cbnz	r5, 80093f0 <_printf_i+0x110>
 80093ec:	2e00      	cmp	r6, #0
 80093ee:	d04b      	beq.n	8009488 <_printf_i+0x1a8>
 80093f0:	4616      	mov	r6, r2
 80093f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80093f6:	fb03 5711 	mls	r7, r3, r1, r5
 80093fa:	5dc7      	ldrb	r7, [r0, r7]
 80093fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009400:	462f      	mov	r7, r5
 8009402:	42bb      	cmp	r3, r7
 8009404:	460d      	mov	r5, r1
 8009406:	d9f4      	bls.n	80093f2 <_printf_i+0x112>
 8009408:	2b08      	cmp	r3, #8
 800940a:	d10b      	bne.n	8009424 <_printf_i+0x144>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	07df      	lsls	r7, r3, #31
 8009410:	d508      	bpl.n	8009424 <_printf_i+0x144>
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	6861      	ldr	r1, [r4, #4]
 8009416:	4299      	cmp	r1, r3
 8009418:	bfde      	ittt	le
 800941a:	2330      	movle	r3, #48	@ 0x30
 800941c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009424:	1b92      	subs	r2, r2, r6
 8009426:	6122      	str	r2, [r4, #16]
 8009428:	f8cd a000 	str.w	sl, [sp]
 800942c:	464b      	mov	r3, r9
 800942e:	aa03      	add	r2, sp, #12
 8009430:	4621      	mov	r1, r4
 8009432:	4640      	mov	r0, r8
 8009434:	f7ff fee6 	bl	8009204 <_printf_common>
 8009438:	3001      	adds	r0, #1
 800943a:	d14a      	bne.n	80094d2 <_printf_i+0x1f2>
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	b004      	add	sp, #16
 8009442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	f043 0320 	orr.w	r3, r3, #32
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	4833      	ldr	r0, [pc, #204]	@ (800951c <_printf_i+0x23c>)
 8009450:	2778      	movs	r7, #120	@ 0x78
 8009452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	6831      	ldr	r1, [r6, #0]
 800945a:	061f      	lsls	r7, r3, #24
 800945c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009460:	d402      	bmi.n	8009468 <_printf_i+0x188>
 8009462:	065f      	lsls	r7, r3, #25
 8009464:	bf48      	it	mi
 8009466:	b2ad      	uxthmi	r5, r5
 8009468:	6031      	str	r1, [r6, #0]
 800946a:	07d9      	lsls	r1, r3, #31
 800946c:	bf44      	itt	mi
 800946e:	f043 0320 	orrmi.w	r3, r3, #32
 8009472:	6023      	strmi	r3, [r4, #0]
 8009474:	b11d      	cbz	r5, 800947e <_printf_i+0x19e>
 8009476:	2310      	movs	r3, #16
 8009478:	e7ac      	b.n	80093d4 <_printf_i+0xf4>
 800947a:	4827      	ldr	r0, [pc, #156]	@ (8009518 <_printf_i+0x238>)
 800947c:	e7e9      	b.n	8009452 <_printf_i+0x172>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	f023 0320 	bic.w	r3, r3, #32
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	e7f6      	b.n	8009476 <_printf_i+0x196>
 8009488:	4616      	mov	r6, r2
 800948a:	e7bd      	b.n	8009408 <_printf_i+0x128>
 800948c:	6833      	ldr	r3, [r6, #0]
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	6961      	ldr	r1, [r4, #20]
 8009492:	1d18      	adds	r0, r3, #4
 8009494:	6030      	str	r0, [r6, #0]
 8009496:	062e      	lsls	r6, r5, #24
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	d501      	bpl.n	80094a0 <_printf_i+0x1c0>
 800949c:	6019      	str	r1, [r3, #0]
 800949e:	e002      	b.n	80094a6 <_printf_i+0x1c6>
 80094a0:	0668      	lsls	r0, r5, #25
 80094a2:	d5fb      	bpl.n	800949c <_printf_i+0x1bc>
 80094a4:	8019      	strh	r1, [r3, #0]
 80094a6:	2300      	movs	r3, #0
 80094a8:	6123      	str	r3, [r4, #16]
 80094aa:	4616      	mov	r6, r2
 80094ac:	e7bc      	b.n	8009428 <_printf_i+0x148>
 80094ae:	6833      	ldr	r3, [r6, #0]
 80094b0:	1d1a      	adds	r2, r3, #4
 80094b2:	6032      	str	r2, [r6, #0]
 80094b4:	681e      	ldr	r6, [r3, #0]
 80094b6:	6862      	ldr	r2, [r4, #4]
 80094b8:	2100      	movs	r1, #0
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7f6 fea0 	bl	8000200 <memchr>
 80094c0:	b108      	cbz	r0, 80094c6 <_printf_i+0x1e6>
 80094c2:	1b80      	subs	r0, r0, r6
 80094c4:	6060      	str	r0, [r4, #4]
 80094c6:	6863      	ldr	r3, [r4, #4]
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	2300      	movs	r3, #0
 80094cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d0:	e7aa      	b.n	8009428 <_printf_i+0x148>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	4632      	mov	r2, r6
 80094d6:	4649      	mov	r1, r9
 80094d8:	4640      	mov	r0, r8
 80094da:	47d0      	blx	sl
 80094dc:	3001      	adds	r0, #1
 80094de:	d0ad      	beq.n	800943c <_printf_i+0x15c>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	079b      	lsls	r3, r3, #30
 80094e4:	d413      	bmi.n	800950e <_printf_i+0x22e>
 80094e6:	68e0      	ldr	r0, [r4, #12]
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	4298      	cmp	r0, r3
 80094ec:	bfb8      	it	lt
 80094ee:	4618      	movlt	r0, r3
 80094f0:	e7a6      	b.n	8009440 <_printf_i+0x160>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4632      	mov	r2, r6
 80094f6:	4649      	mov	r1, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	47d0      	blx	sl
 80094fc:	3001      	adds	r0, #1
 80094fe:	d09d      	beq.n	800943c <_printf_i+0x15c>
 8009500:	3501      	adds	r5, #1
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	9903      	ldr	r1, [sp, #12]
 8009506:	1a5b      	subs	r3, r3, r1
 8009508:	42ab      	cmp	r3, r5
 800950a:	dcf2      	bgt.n	80094f2 <_printf_i+0x212>
 800950c:	e7eb      	b.n	80094e6 <_printf_i+0x206>
 800950e:	2500      	movs	r5, #0
 8009510:	f104 0619 	add.w	r6, r4, #25
 8009514:	e7f5      	b.n	8009502 <_printf_i+0x222>
 8009516:	bf00      	nop
 8009518:	08009ef5 	.word	0x08009ef5
 800951c:	08009f06 	.word	0x08009f06

08009520 <memmove>:
 8009520:	4288      	cmp	r0, r1
 8009522:	b510      	push	{r4, lr}
 8009524:	eb01 0402 	add.w	r4, r1, r2
 8009528:	d902      	bls.n	8009530 <memmove+0x10>
 800952a:	4284      	cmp	r4, r0
 800952c:	4623      	mov	r3, r4
 800952e:	d807      	bhi.n	8009540 <memmove+0x20>
 8009530:	1e43      	subs	r3, r0, #1
 8009532:	42a1      	cmp	r1, r4
 8009534:	d008      	beq.n	8009548 <memmove+0x28>
 8009536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800953a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800953e:	e7f8      	b.n	8009532 <memmove+0x12>
 8009540:	4402      	add	r2, r0
 8009542:	4601      	mov	r1, r0
 8009544:	428a      	cmp	r2, r1
 8009546:	d100      	bne.n	800954a <memmove+0x2a>
 8009548:	bd10      	pop	{r4, pc}
 800954a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800954e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009552:	e7f7      	b.n	8009544 <memmove+0x24>

08009554 <_sbrk_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d06      	ldr	r5, [pc, #24]	@ (8009570 <_sbrk_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7f8 fbd4 	bl	8001d0c <_sbrk>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_sbrk_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_sbrk_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20001430 	.word	0x20001430

08009574 <_realloc_r>:
 8009574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	4680      	mov	r8, r0
 800957a:	4615      	mov	r5, r2
 800957c:	460c      	mov	r4, r1
 800957e:	b921      	cbnz	r1, 800958a <_realloc_r+0x16>
 8009580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	4611      	mov	r1, r2
 8009586:	f7ff bc59 	b.w	8008e3c <_malloc_r>
 800958a:	b92a      	cbnz	r2, 8009598 <_realloc_r+0x24>
 800958c:	f7ff fbea 	bl	8008d64 <_free_r>
 8009590:	2400      	movs	r4, #0
 8009592:	4620      	mov	r0, r4
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	f000 f81a 	bl	80095d0 <_malloc_usable_size_r>
 800959c:	4285      	cmp	r5, r0
 800959e:	4606      	mov	r6, r0
 80095a0:	d802      	bhi.n	80095a8 <_realloc_r+0x34>
 80095a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80095a6:	d8f4      	bhi.n	8009592 <_realloc_r+0x1e>
 80095a8:	4629      	mov	r1, r5
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fc46 	bl	8008e3c <_malloc_r>
 80095b0:	4607      	mov	r7, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d0ec      	beq.n	8009590 <_realloc_r+0x1c>
 80095b6:	42b5      	cmp	r5, r6
 80095b8:	462a      	mov	r2, r5
 80095ba:	4621      	mov	r1, r4
 80095bc:	bf28      	it	cs
 80095be:	4632      	movcs	r2, r6
 80095c0:	f7ff fbc2 	bl	8008d48 <memcpy>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fbcc 	bl	8008d64 <_free_r>
 80095cc:	463c      	mov	r4, r7
 80095ce:	e7e0      	b.n	8009592 <_realloc_r+0x1e>

080095d0 <_malloc_usable_size_r>:
 80095d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d4:	1f18      	subs	r0, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfbc      	itt	lt
 80095da:	580b      	ldrlt	r3, [r1, r0]
 80095dc:	18c0      	addlt	r0, r0, r3
 80095de:	4770      	bx	lr

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
